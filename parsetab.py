
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL COLON COMA CTEF CTEL DIFF DIVIDE DO ELSE EQUAL EXP FLOAT FOR FUNCTION ID IF INT ISEQUAL LBRACKET LCURLY LESSTHAN LPAREN MINUS MORETHAN NOTEQUAL OR PLUS PRINT RBRACKET RCURLY RETURN RPAREN SEMICOLON START STRING TIMES VAR VOID WHILEprograma : START LPAREN RPAREN bloquedeclaracion : vars\n                   | epsilonvars : VAR var\n            | vars varsvar : vardef COLON tipo SEMICOLONvardef : IDtipo : INT\n            | FLOAT\n            | BOOL\n            | STRINGlista : ID\n             | ID COMAarreglo : LBRACKET lista RBRACKET bloque : LCURLY declaracion estatutoExp RCURLYbloqueReturn : LCURLY declaracion estatutoExp returnexp RCURLYestatutoExp : estatuto SEMICOLON\n                    | estatutoExp estatutoExpestatuto : asignacion \n                | condicion\n                | whileLoop\n                | doWhile\n                | forLoop\n                | escritura\n                | funcion\n                | functionCallreturnexp : RETURN expresion SEMICOLONasignacion : ID EQUAL expresionescritura : PRINT LPAREN escrito RPARENescrito : impr\n               | impr COMA imprimpr : STRING\n            | expresionexpresion : exp\n                | condition\n                | arreglo \n                | functionCallcondition : exp comparacion expresioncomparacion : LESSTHAN\n                   | MORETHAN\n                   | ISEQUAL\n                   | NOTEQUAL\n                   | AND\n                   | OR doWhile : do bloque WHILE LPAREN expresion RPARENdo : DOwhileLoop : WHILE startCondition expresion endCondition bloquestartCondition : LPAREN\n                     |  SEMICOLONforLoop : FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloquecondicion : IF LPAREN expresion endCondition bloque condicionelseendCondition : RPAREN\n                    | SEMICOLONcondicionelse : else bloque\n                     | epsilonelse : ELSEfuncion : FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturnaddArgs : epsilonfuncdef : IDtiposreturn : tipo bloqueReturn\n                    | VOID bloquefunctionCall : funCall LPAREN funcArgs RPARENfunCall : IDfuncArgs : checkArgs\n                  | funcArgs COMA funcArgs\n                  | epsiloncheckArgs : expresionargumentos : args\n                  | epsilonargs : asignacion\n            | args COMA argsexp : termino\n           | termino signo expsigno : PLUS\n             | MINUStermino : factor\n               | factor operacion terminooperacion : TIMES\n                 | DIVIDE\n                 | DIFF\n                 | EXPfactor : paren expresion paren\n               | varcteparen : LPAREN\n            | RPARENepsilon : varcte : ID \n              | int\n              | float\n              | bool\n              | stringint : INTfloat : FLOATbool : BOOLstring : STRING'
    
_lr_action_items = {'START':([0,],[2,]),'$end':([1,5,35,],[0,-1,-15,]),'LPAREN':([2,21,22,23,25,26,28,37,38,39,40,41,43,44,45,46,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,114,115,118,120,121,123,124,125,126,128,129,134,160,],[3,-63,38,40,43,44,47,57,57,57,-48,-49,-86,57,82,-59,57,-63,-28,-34,-35,-36,-37,-72,-84,-85,-76,57,-83,-88,-89,-90,-91,-92,-93,-94,-95,114,40,-70,-68,-69,57,-39,-40,-41,-42,-43,-44,57,-74,-75,57,-78,-79,-80,-81,57,57,57,57,-62,57,-38,-73,-87,-14,-77,-82,-71,57,]),'RPAREN':([3,8,9,30,31,37,38,39,40,41,44,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,78,79,80,81,82,83,84,85,86,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,109,114,115,118,119,120,121,122,123,124,125,126,128,129,132,133,135,136,137,138,147,160,],[4,-2,-3,-5,-4,58,58,58,-48,-49,58,58,-87,-28,-34,-35,-36,-37,-72,-84,-85,-76,58,-83,-88,-89,-90,-91,-92,-93,-94,-95,111,111,117,-30,-32,-33,-86,120,-64,-66,-67,58,-39,-40,-41,-42,-43,-44,58,-74,-75,58,-78,-79,-80,-81,58,58,58,58,-86,-62,58,-6,-38,-73,-87,-14,-77,-82,143,111,-31,145,-58,-65,149,58,]),'LCURLY':([4,24,29,88,89,90,91,110,111,112,113,140,142,149,151,152,],[6,6,-46,-8,-9,-10,-11,6,-52,-53,6,6,-56,6,155,6,]),'VAR':([6,8,30,31,82,122,155,],[10,10,10,-4,10,-6,10,]),'ID':([6,7,8,9,10,11,27,30,31,34,36,37,38,39,40,41,43,44,47,56,57,58,60,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,111,112,114,115,116,118,121,122,144,155,157,158,160,],[-86,21,-2,-3,33,21,46,-5,-4,21,-17,49,49,49,-48,-49,77,49,49,103,-84,-85,49,49,-39,-40,-41,-42,-43,-44,125,-74,-75,125,-78,-79,-80,-81,-52,-53,49,49,77,49,49,-6,77,-86,21,21,49,]),'IF':([6,7,8,9,11,30,31,34,36,122,155,157,158,],[-86,22,-2,-3,22,-5,-4,22,-17,-6,-86,22,22,]),'WHILE':([6,7,8,9,11,30,31,34,35,36,42,122,155,157,158,],[-86,23,-2,-3,23,-5,-4,23,-15,-17,72,-6,-86,23,23,]),'FOR':([6,7,8,9,11,30,31,34,36,122,155,157,158,],[-86,25,-2,-3,25,-5,-4,25,-17,-6,-86,25,25,]),'PRINT':([6,7,8,9,11,30,31,34,36,122,155,157,158,],[-86,26,-2,-3,26,-5,-4,26,-17,-6,-86,26,26,]),'FUNCTION':([6,7,8,9,11,30,31,34,36,122,155,157,158,],[-86,27,-2,-3,27,-5,-4,27,-17,-6,-86,27,27,]),'DO':([6,7,8,9,11,30,31,34,36,122,155,157,158,],[-86,29,-2,-3,29,-5,-4,29,-17,-6,-86,29,29,]),'RCURLY':([11,34,36,159,163,],[35,-18,-17,161,-27,]),'SEMICOLON':([12,13,14,15,16,17,18,19,20,23,35,43,49,50,51,52,53,54,55,57,58,59,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,87,88,89,90,91,117,120,123,124,125,126,128,129,130,131,133,134,139,141,143,146,150,153,154,156,161,162,],[36,-19,-20,-21,-22,-23,-24,-25,-26,41,-15,-86,-87,-28,-34,-35,-36,-37,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,112,112,41,-70,-68,-69,122,-8,-9,-10,-11,-29,-62,-38,-73,-87,-14,-77,-82,-86,-47,112,-71,-51,-55,-45,-54,-57,-50,-60,-61,-16,163,]),'EQUAL':([21,77,],[37,37,]),'COLON':([32,33,145,],[48,-7,148,]),'RETURN':([34,36,158,],[-18,-17,160,]),'ELSE':([35,130,],[-15,142,]),'LBRACKET':([37,38,39,40,41,44,47,57,58,60,92,93,94,95,96,97,98,114,115,118,121,160,],[56,56,56,-48,-49,56,56,-84,-85,56,56,-39,-40,-41,-42,-43,-44,56,56,56,56,56,]),'INT':([37,38,39,40,41,44,47,48,57,58,60,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,114,115,118,121,148,160,],[66,66,66,-48,-49,66,66,88,-84,-85,66,66,-39,-40,-41,-42,-43,-44,66,-74,-75,66,-78,-79,-80,-81,66,66,66,66,88,66,]),'FLOAT':([37,38,39,40,41,44,47,48,57,58,60,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,114,115,118,121,148,160,],[67,67,67,-48,-49,67,67,89,-84,-85,67,67,-39,-40,-41,-42,-43,-44,67,-74,-75,67,-78,-79,-80,-81,67,67,67,67,89,67,]),'BOOL':([37,38,39,40,41,44,47,48,57,58,60,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,114,115,118,121,148,160,],[68,68,68,-48,-49,68,68,90,-84,-85,68,68,-39,-40,-41,-42,-43,-44,68,-74,-75,68,-78,-79,-80,-81,68,68,68,68,90,68,]),'STRING':([37,38,39,40,41,44,47,48,57,58,60,92,93,94,95,96,97,98,99,100,101,104,105,106,107,108,114,115,118,121,148,160,],[69,69,69,-48,-49,80,69,91,-84,-85,69,69,-39,-40,-41,-42,-43,-44,69,-74,-75,69,-78,-79,-80,-81,69,69,80,69,91,69,]),'COMA':([47,49,50,51,52,53,54,55,57,58,59,61,62,63,64,65,66,67,68,69,74,75,79,80,81,83,84,85,86,103,120,121,123,124,125,126,128,129,134,138,],[-86,-87,-28,-34,-35,-36,-37,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-70,116,118,-32,-33,121,-64,-66,-67,127,-62,-86,-38,-73,-87,-14,-77,-82,116,121,]),'TIMES':([49,57,58,59,61,62,63,64,65,66,67,68,69,80,125,129,],[-87,-84,-85,105,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-87,-82,]),'DIVIDE':([49,57,58,59,61,62,63,64,65,66,67,68,69,80,125,129,],[-87,-84,-85,106,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-87,-82,]),'DIFF':([49,57,58,59,61,62,63,64,65,66,67,68,69,80,125,129,],[-87,-84,-85,107,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-87,-82,]),'EXP':([49,57,58,59,61,62,63,64,65,66,67,68,69,80,125,129,],[-87,-84,-85,108,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-87,-82,]),'PLUS':([49,55,57,58,59,61,62,63,64,65,66,67,68,69,80,125,128,129,],[-87,100,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-87,-77,-82,]),'MINUS':([49,55,57,58,59,61,62,63,64,65,66,67,68,69,80,125,128,129,],[-87,101,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-87,-77,-82,]),'LESSTHAN':([49,51,55,57,58,59,61,62,63,64,65,66,67,68,69,80,124,125,128,129,],[-87,93,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-73,-87,-77,-82,]),'MORETHAN':([49,51,55,57,58,59,61,62,63,64,65,66,67,68,69,80,124,125,128,129,],[-87,94,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-73,-87,-77,-82,]),'ISEQUAL':([49,51,55,57,58,59,61,62,63,64,65,66,67,68,69,80,124,125,128,129,],[-87,95,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-73,-87,-77,-82,]),'NOTEQUAL':([49,51,55,57,58,59,61,62,63,64,65,66,67,68,69,80,124,125,128,129,],[-87,96,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-73,-87,-77,-82,]),'AND':([49,51,55,57,58,59,61,62,63,64,65,66,67,68,69,80,124,125,128,129,],[-87,97,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-73,-87,-77,-82,]),'OR':([49,51,55,57,58,59,61,62,63,64,65,66,67,68,69,80,124,125,128,129,],[-87,98,-72,-84,-85,-76,-83,-88,-89,-90,-91,-92,-93,-94,-95,-95,-73,-87,-77,-82,]),'RBRACKET':([102,103,127,],[126,-12,-13,]),'VOID':([148,],[152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'bloque':([4,24,110,113,140,149,152,],[5,42,130,131,146,153,156,]),'declaracion':([6,82,155,],[7,119,157,]),'vars':([6,8,30,82,155,],[8,30,30,8,8,]),'epsilon':([6,43,47,82,119,121,130,155,],[9,76,85,9,137,85,141,9,]),'estatutoExp':([7,11,34,157,158,],[11,34,34,158,34,]),'estatuto':([7,11,34,157,158,],[12,12,12,12,12,]),'asignacion':([7,11,34,43,116,144,157,158,],[13,13,13,74,74,147,13,13,]),'condicion':([7,11,34,157,158,],[14,14,14,14,14,]),'whileLoop':([7,11,34,157,158,],[15,15,15,15,15,]),'doWhile':([7,11,34,157,158,],[16,16,16,16,16,]),'forLoop':([7,11,34,157,158,],[17,17,17,17,17,]),'escritura':([7,11,34,157,158,],[18,18,18,18,18,]),'funcion':([7,11,34,157,158,],[19,19,19,19,19,]),'functionCall':([7,11,34,37,38,39,44,47,60,92,114,115,118,121,157,158,160,],[20,20,20,54,54,54,54,54,54,54,54,54,54,54,20,20,54,]),'do':([7,11,34,157,158,],[24,24,24,24,24,]),'funCall':([7,11,34,37,38,39,44,47,60,92,114,115,118,121,157,158,160,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'var':([10,],[31,]),'vardef':([10,],[32,]),'startCondition':([23,73,],[39,115,]),'funcdef':([27,],[45,]),'expresion':([37,38,39,44,47,60,92,114,115,118,121,160,],[50,70,71,81,86,109,123,132,133,81,86,162,]),'exp':([37,38,39,44,47,60,92,99,114,115,118,121,160,],[51,51,51,51,51,51,51,124,51,51,51,51,51,]),'condition':([37,38,39,44,47,60,92,114,115,118,121,160,],[52,52,52,52,52,52,52,52,52,52,52,52,]),'arreglo':([37,38,39,44,47,60,92,114,115,118,121,160,],[53,53,53,53,53,53,53,53,53,53,53,53,]),'termino':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[55,55,55,55,55,55,55,55,128,55,55,55,55,55,]),'factor':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'paren':([37,38,39,44,47,60,92,99,104,109,114,115,118,121,160,],[60,60,60,60,60,60,60,60,60,129,60,60,60,60,60,]),'varcte':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'int':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'float':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'bool':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'string':([37,38,39,44,47,60,92,99,104,114,115,118,121,160,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'argumentos':([43,],[73,]),'args':([43,116,],[75,134,]),'escrito':([44,],[78,]),'impr':([44,118,],[79,135,]),'funcArgs':([47,121,],[83,138,]),'checkArgs':([47,121,],[84,84,]),'tipo':([48,148,],[87,151,]),'comparacion':([51,],[92,]),'signo':([55,],[99,]),'lista':([56,],[102,]),'operacion':([59,],[104,]),'endCondition':([70,71,133,],[110,113,144,]),'addArgs':([119,],[136,]),'condicionelse':([130,],[139,]),'else':([130,],[140,]),'tiposreturn':([148,],[150,]),'bloqueReturn':([151,],[154,]),'returnexp':([158,],[159,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> START LPAREN RPAREN bloque','programa',4,'p_programa','ply_sintax.py',16),
  ('declaracion -> vars','declaracion',1,'p_declaracion','ply_sintax.py',22),
  ('declaracion -> epsilon','declaracion',1,'p_declaracion','ply_sintax.py',23),
  ('vars -> VAR var','vars',2,'p_vars','ply_sintax.py',27),
  ('vars -> vars vars','vars',2,'p_vars','ply_sintax.py',28),
  ('var -> vardef COLON tipo SEMICOLON','var',4,'p_var','ply_sintax.py',32),
  ('vardef -> ID','vardef',1,'p_vardef','ply_sintax.py',36),
  ('tipo -> INT','tipo',1,'p_tipo','ply_sintax.py',45),
  ('tipo -> FLOAT','tipo',1,'p_tipo','ply_sintax.py',46),
  ('tipo -> BOOL','tipo',1,'p_tipo','ply_sintax.py',47),
  ('tipo -> STRING','tipo',1,'p_tipo','ply_sintax.py',48),
  ('lista -> ID','lista',1,'p_lista','ply_sintax.py',55),
  ('lista -> ID COMA','lista',2,'p_lista','ply_sintax.py',56),
  ('arreglo -> LBRACKET lista RBRACKET','arreglo',3,'p_arreglo','ply_sintax.py',60),
  ('bloque -> LCURLY declaracion estatutoExp RCURLY','bloque',4,'p_bloque','ply_sintax.py',64),
  ('bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY','bloqueReturn',5,'p_bloqueReturn','ply_sintax.py',68),
  ('estatutoExp -> estatuto SEMICOLON','estatutoExp',2,'p_estatutoExp','ply_sintax.py',72),
  ('estatutoExp -> estatutoExp estatutoExp','estatutoExp',2,'p_estatutoExp','ply_sintax.py',73),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','ply_sintax.py',77),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','ply_sintax.py',78),
  ('estatuto -> whileLoop','estatuto',1,'p_estatuto','ply_sintax.py',79),
  ('estatuto -> doWhile','estatuto',1,'p_estatuto','ply_sintax.py',80),
  ('estatuto -> forLoop','estatuto',1,'p_estatuto','ply_sintax.py',81),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','ply_sintax.py',82),
  ('estatuto -> funcion','estatuto',1,'p_estatuto','ply_sintax.py',83),
  ('estatuto -> functionCall','estatuto',1,'p_estatuto','ply_sintax.py',84),
  ('returnexp -> RETURN expresion SEMICOLON','returnexp',3,'p_returnexp','ply_sintax.py',88),
  ('asignacion -> ID EQUAL expresion','asignacion',3,'p_asignacion','ply_sintax.py',92),
  ('escritura -> PRINT LPAREN escrito RPAREN','escritura',4,'p_escritura','ply_sintax.py',102),
  ('escrito -> impr','escrito',1,'p_escrito','ply_sintax.py',106),
  ('escrito -> impr COMA impr','escrito',3,'p_escrito','ply_sintax.py',107),
  ('impr -> STRING','impr',1,'p_impr','ply_sintax.py',111),
  ('impr -> expresion','impr',1,'p_impr','ply_sintax.py',112),
  ('expresion -> exp','expresion',1,'p_expresion','ply_sintax.py',116),
  ('expresion -> condition','expresion',1,'p_expresion','ply_sintax.py',117),
  ('expresion -> arreglo','expresion',1,'p_expresion','ply_sintax.py',118),
  ('expresion -> functionCall','expresion',1,'p_expresion','ply_sintax.py',119),
  ('condition -> exp comparacion expresion','condition',3,'p_condition','ply_sintax.py',127),
  ('comparacion -> LESSTHAN','comparacion',1,'p_comparacion','ply_sintax.py',131),
  ('comparacion -> MORETHAN','comparacion',1,'p_comparacion','ply_sintax.py',132),
  ('comparacion -> ISEQUAL','comparacion',1,'p_comparacion','ply_sintax.py',133),
  ('comparacion -> NOTEQUAL','comparacion',1,'p_comparacion','ply_sintax.py',134),
  ('comparacion -> AND','comparacion',1,'p_comparacion','ply_sintax.py',135),
  ('comparacion -> OR','comparacion',1,'p_comparacion','ply_sintax.py',136),
  ('doWhile -> do bloque WHILE LPAREN expresion RPAREN','doWhile',6,'p_doWhile','ply_sintax.py',141),
  ('do -> DO','do',1,'p_do','ply_sintax.py',147),
  ('whileLoop -> WHILE startCondition expresion endCondition bloque','whileLoop',5,'p_whileLoop','ply_sintax.py',152),
  ('startCondition -> LPAREN','startCondition',1,'p_startCondition','ply_sintax.py',158),
  ('startCondition -> SEMICOLON','startCondition',1,'p_startCondition','ply_sintax.py',159),
  ('forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque','forLoop',9,'p_forLoop','ply_sintax.py',164),
  ('condicion -> IF LPAREN expresion endCondition bloque condicionelse','condicion',6,'p_condicion','ply_sintax.py',170),
  ('endCondition -> RPAREN','endCondition',1,'p_endCondition','ply_sintax.py',174),
  ('endCondition -> SEMICOLON','endCondition',1,'p_endCondition','ply_sintax.py',175),
  ('condicionelse -> else bloque','condicionelse',2,'p_condicionelse','ply_sintax.py',180),
  ('condicionelse -> epsilon','condicionelse',1,'p_condicionelse','ply_sintax.py',181),
  ('else -> ELSE','else',1,'p_else','ply_sintax.py',186),
  ('funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn','funcion',8,'p_funcion','ply_sintax.py',192),
  ('addArgs -> epsilon','addArgs',1,'p_addArgs','ply_sintax.py',200),
  ('funcdef -> ID','funcdef',1,'p_funcdef','ply_sintax.py',206),
  ('tiposreturn -> tipo bloqueReturn','tiposreturn',2,'p_tiposreturn','ply_sintax.py',214),
  ('tiposreturn -> VOID bloque','tiposreturn',2,'p_tiposreturn','ply_sintax.py',215),
  ('functionCall -> funCall LPAREN funcArgs RPAREN','functionCall',4,'p_functionCall','ply_sintax.py',221),
  ('funCall -> ID','funCall',1,'p_funCall','ply_sintax.py',226),
  ('funcArgs -> checkArgs','funcArgs',1,'p_funcArgs','ply_sintax.py',234),
  ('funcArgs -> funcArgs COMA funcArgs','funcArgs',3,'p_funcArgs','ply_sintax.py',235),
  ('funcArgs -> epsilon','funcArgs',1,'p_funcArgs','ply_sintax.py',236),
  ('checkArgs -> expresion','checkArgs',1,'p_checkArgs','ply_sintax.py',240),
  ('argumentos -> args','argumentos',1,'p_argumentos','ply_sintax.py',245),
  ('argumentos -> epsilon','argumentos',1,'p_argumentos','ply_sintax.py',246),
  ('args -> asignacion','args',1,'p_args','ply_sintax.py',250),
  ('args -> args COMA args','args',3,'p_args','ply_sintax.py',251),
  ('exp -> termino','exp',1,'p_exp','ply_sintax.py',255),
  ('exp -> termino signo exp','exp',3,'p_exp','ply_sintax.py',256),
  ('signo -> PLUS','signo',1,'p_signo','ply_sintax.py',261),
  ('signo -> MINUS','signo',1,'p_signo','ply_sintax.py',262),
  ('termino -> factor','termino',1,'p_termino','ply_sintax.py',268),
  ('termino -> factor operacion termino','termino',3,'p_termino','ply_sintax.py',269),
  ('operacion -> TIMES','operacion',1,'p_operacion','ply_sintax.py',275),
  ('operacion -> DIVIDE','operacion',1,'p_operacion','ply_sintax.py',276),
  ('operacion -> DIFF','operacion',1,'p_operacion','ply_sintax.py',277),
  ('operacion -> EXP','operacion',1,'p_operacion','ply_sintax.py',278),
  ('factor -> paren expresion paren','factor',3,'p_factor','ply_sintax.py',284),
  ('factor -> varcte','factor',1,'p_factor','ply_sintax.py',285),
  ('paren -> LPAREN','paren',1,'p_paren','ply_sintax.py',291),
  ('paren -> RPAREN','paren',1,'p_paren','ply_sintax.py',292),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','ply_sintax.py',305),
  ('varcte -> ID','varcte',1,'p_varcte','ply_sintax.py',309),
  ('varcte -> int','varcte',1,'p_varcte','ply_sintax.py',310),
  ('varcte -> float','varcte',1,'p_varcte','ply_sintax.py',311),
  ('varcte -> bool','varcte',1,'p_varcte','ply_sintax.py',312),
  ('varcte -> string','varcte',1,'p_varcte','ply_sintax.py',313),
  ('int -> INT','int',1,'p_int','ply_sintax.py',322),
  ('float -> FLOAT','float',1,'p_float','ply_sintax.py',328),
  ('bool -> BOOL','bool',1,'p_bool','ply_sintax.py',334),
  ('string -> STRING','string',1,'p_string','ply_sintax.py',340),
]
