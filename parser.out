Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START LPAREN RPAREN bloque
Rule 2     declaracion -> vars
Rule 3     declaracion -> epsilon
Rule 4     vars -> VAR var
Rule 5     vars -> vars vars
Rule 6     var -> vardef COLON tipo SEMICOLON
Rule 7     var -> declaracionArr SEMICOLON
Rule 8     var -> declaracionMatrix SEMICOLON
Rule 9     vardef -> ID
Rule 10    tipo -> INT
Rule 11    tipo -> FLOAT
Rule 12    tipo -> BOOL
Rule 13    tipo -> STRING
Rule 14    bloque -> LCURLY declaracion estatutoExp RCURLY
Rule 15    bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY
Rule 16    estatutoExp -> estatuto SEMICOLON
Rule 17    estatutoExp -> estatutoExp estatutoExp
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> whileLoop
Rule 21    estatuto -> doWhile
Rule 22    estatuto -> forLoop
Rule 23    estatuto -> escritura
Rule 24    estatuto -> funcion
Rule 25    estatuto -> functionCall
Rule 26    estatuto -> break
Rule 27    break -> BREAK expresion
Rule 28    returnexp -> RETURN expresion SEMICOLON
Rule 29    asignacion -> ID EQUAL expresion
Rule 30    escritura -> PRINT LPAREN escrito RPAREN
Rule 31    escrito -> impr
Rule 32    escrito -> impr COMA escrito
Rule 33    impr -> expresion
Rule 34    expresion -> exp
Rule 35    expresion -> condition
Rule 36    expresion -> functionCall
Rule 37    condition -> exp comparacion expresion
Rule 38    comparacion -> LESSTHAN
Rule 39    comparacion -> MORETHAN
Rule 40    comparacion -> ISEQUAL
Rule 41    comparacion -> NOTEQUAL
Rule 42    comparacion -> AND
Rule 43    comparacion -> OR
Rule 44    doWhile -> do bloque WHILE LPAREN expresion RPAREN
Rule 45    do -> DO
Rule 46    whileLoop -> WHILE startCondition expresion endCondition bloque
Rule 47    startCondition -> LPAREN
Rule 48    startCondition -> SEMICOLON
Rule 49    forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
Rule 50    condicion -> IF LPAREN expresion endCondition bloque condicionelse
Rule 51    endCondition -> RPAREN
Rule 52    endCondition -> SEMICOLON
Rule 53    condicionelse -> else bloque
Rule 54    condicionelse -> epsilon
Rule 55    else -> ELSE
Rule 56    funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
Rule 57    addArgs -> epsilon
Rule 58    funcdef -> ID
Rule 59    tiposreturn -> tiposFuncion bloqueReturn
Rule 60    tiposreturn -> VOID bloque
Rule 61    tiposFuncion -> INT
Rule 62    tiposFuncion -> FLOAT
Rule 63    tiposFuncion -> BOOL
Rule 64    tiposFuncion -> STRING
Rule 65    functionCall -> funCall lparen funcArgs rparen
Rule 66    funCall -> ID
Rule 67    funcArgs -> checkArgs
Rule 68    funcArgs -> funcArgs COMA funcArgs
Rule 69    funcArgs -> epsilon
Rule 70    checkArgs -> expresion
Rule 71    argumentos -> args
Rule 72    argumentos -> epsilon
Rule 73    args -> asignacion
Rule 74    args -> args COMA args
Rule 75    exp -> termino
Rule 76    exp -> termino signo exp
Rule 77    signo -> PLUS
Rule 78    signo -> MINUS
Rule 79    termino -> factor
Rule 80    termino -> factor operacion termino
Rule 81    operacion -> TIMES
Rule 82    operacion -> DIVIDE
Rule 83    operacion -> DIFF
Rule 84    operacion -> EXP
Rule 85    factor -> varcte
Rule 86    factor -> lparen expresion rparen
Rule 87    factor -> functionCall
Rule 88    lparen -> LPAREN
Rule 89    rparen -> RPAREN
Rule 90    epsilon -> <empty>
Rule 91    arrDef -> ID
Rule 92    declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo
Rule 93    declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
Rule 94    arr -> callArr openBracket expresion abracket matrix
Rule 95    arr -> callArr openBracket expresion abracket epsilon
Rule 96    callArr -> ID
Rule 97    matrix -> openBracket expresion mbracket
Rule 98    openBracket -> LBRACKET
Rule 99    closeBracket -> RBRACKET
Rule 100   abracket -> closeBracket
Rule 101   mbracket -> closeBracket
Rule 102   varcte -> ID
Rule 103   varcte -> int
Rule 104   varcte -> float
Rule 105   varcte -> bool
Rule 106   varcte -> string
Rule 107   varcte -> matrix
Rule 108   varcte -> arr
Rule 109   int -> INT
Rule 110   float -> FLOAT
Rule 111   bool -> BOOL
Rule 112   string -> STRING

Terminals, with rules where they appear

AND                  : 42
BOOL                 : 12 63 111
BREAK                : 27
COLON                : 6 56 92 93
COMA                 : 32 68 74
DIFF                 : 83
DIVIDE               : 82
DO                   : 45
ELSE                 : 55
EQUAL                : 29
EXP                  : 84
FLOAT                : 11 62 110
FOR                  : 49
FUNCTION             : 56
ID                   : 9 29 58 66 91 96 102
IF                   : 50
INT                  : 10 61 92 93 93 109
ISEQUAL              : 40
LBRACKET             : 92 93 93 98
LCURLY               : 14 15
LESSTHAN             : 38
LPAREN               : 1 30 44 47 49 50 56 88
MINUS                : 78
MORETHAN             : 39
NOTEQUAL             : 41
OR                   : 43
PLUS                 : 77
PRINT                : 30
RBRACKET             : 92 93 93 99
RCURLY               : 14 15
RETURN               : 28
RPAREN               : 1 30 44 49 51 56 89
SEMICOLON            : 6 7 8 16 28 48 52
START                : 1
STRING               : 13 64 112
TIMES                : 81
VAR                  : 4
VOID                 : 60
WHILE                : 44 46
error                : 

Nonterminals, with rules where they appear

abracket             : 94 95
addArgs              : 56
args                 : 71 74 74
argumentos           : 49
arr                  : 108
arrDef               : 92 93
asignacion           : 18 49 73
bloque               : 1 44 46 49 50 53 60
bloqueReturn         : 59
bool                 : 105
break                : 26
callArr              : 94 95
checkArgs            : 67
closeBracket         : 100 101
comparacion          : 37
condicion            : 19
condicionelse        : 50
condition            : 35
declaracion          : 14 15 56
declaracionArr       : 7
declaracionMatrix    : 8
do                   : 44
doWhile              : 21
else                 : 53
endCondition         : 46 49 50
epsilon              : 3 54 57 69 72 95
escrito              : 30 32
escritura            : 23
estatuto             : 16
estatutoExp          : 14 15 17 17
exp                  : 34 37 76
expresion            : 27 28 29 33 37 44 46 49 50 70 86 94 95 97
factor               : 79 80
float                : 104
forLoop              : 22
funCall              : 65
funcArgs             : 65 68 68
funcdef              : 56
funcion              : 24
functionCall         : 25 36 87
impr                 : 31 32
int                  : 103
lparen               : 65 86
matrix               : 94 107
mbracket             : 97
openBracket          : 94 95 97
operacion            : 80
programa             : 0
returnexp            : 15
rparen               : 65 86
signo                : 76
startCondition       : 46 49
string               : 106
termino              : 75 76 80
tipo                 : 6 92 93
tiposFuncion         : 59
tiposreturn          : 56
var                  : 4
varcte               : 85
vardef               : 6
vars                 : 2 5 5
whileLoop            : 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START LPAREN RPAREN bloque

    START           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> START . LPAREN RPAREN bloque

    LPAREN          shift and go to state 3


state 3

    (1) programa -> START LPAREN . RPAREN bloque

    RPAREN          shift and go to state 4


state 4

    (1) programa -> START LPAREN RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 5

state 5

    (1) programa -> START LPAREN RPAREN bloque .

    $end            reduce using rule 1 (programa -> START LPAREN RPAREN bloque .)


state 6

    (14) bloque -> LCURLY . declaracion estatutoExp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (90) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 90 (epsilon -> .)
    IF              reduce using rule 90 (epsilon -> .)
    WHILE           reduce using rule 90 (epsilon -> .)
    FOR             reduce using rule 90 (epsilon -> .)
    PRINT           reduce using rule 90 (epsilon -> .)
    FUNCTION        reduce using rule 90 (epsilon -> .)
    BREAK           reduce using rule 90 (epsilon -> .)
    DO              reduce using rule 90 (epsilon -> .)

    declaracion                    shift and go to state 7
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 7

    (14) bloque -> LCURLY declaracion . estatutoExp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (50) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (46) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (44) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (49) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (30) escritura -> . PRINT LPAREN escrito RPAREN
    (56) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (65) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (45) do -> . DO
    (66) funCall -> . ID

    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 26
    PRINT           shift and go to state 27
    FUNCTION        shift and go to state 28
    BREAK           shift and go to state 30
    DO              shift and go to state 31

    estatutoExp                    shift and go to state 11
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    do                             shift and go to state 25
    funCall                        shift and go to state 29

state 8

    (2) declaracion -> vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

    ID              reduce using rule 2 (declaracion -> vars .)
    IF              reduce using rule 2 (declaracion -> vars .)
    WHILE           reduce using rule 2 (declaracion -> vars .)
    FOR             reduce using rule 2 (declaracion -> vars .)
    PRINT           reduce using rule 2 (declaracion -> vars .)
    FUNCTION        reduce using rule 2 (declaracion -> vars .)
    BREAK           reduce using rule 2 (declaracion -> vars .)
    DO              reduce using rule 2 (declaracion -> vars .)
    RPAREN          reduce using rule 2 (declaracion -> vars .)
    VAR             shift and go to state 10

    vars                           shift and go to state 32

state 9

    (3) declaracion -> epsilon .

    ID              reduce using rule 3 (declaracion -> epsilon .)
    IF              reduce using rule 3 (declaracion -> epsilon .)
    WHILE           reduce using rule 3 (declaracion -> epsilon .)
    FOR             reduce using rule 3 (declaracion -> epsilon .)
    PRINT           reduce using rule 3 (declaracion -> epsilon .)
    FUNCTION        reduce using rule 3 (declaracion -> epsilon .)
    BREAK           reduce using rule 3 (declaracion -> epsilon .)
    DO              reduce using rule 3 (declaracion -> epsilon .)
    RPAREN          reduce using rule 3 (declaracion -> epsilon .)


state 10

    (4) vars -> VAR . var
    (6) var -> . vardef COLON tipo SEMICOLON
    (7) var -> . declaracionArr SEMICOLON
    (8) var -> . declaracionMatrix SEMICOLON
    (9) vardef -> . ID
    (92) declaracionArr -> . arrDef LBRACKET INT RBRACKET COLON tipo
    (93) declaracionMatrix -> . arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
    (91) arrDef -> . ID

    ID              shift and go to state 37

    var                            shift and go to state 33
    vardef                         shift and go to state 34
    declaracionArr                 shift and go to state 35
    declaracionMatrix              shift and go to state 36
    arrDef                         shift and go to state 38

state 11

    (14) bloque -> LCURLY declaracion estatutoExp . RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (50) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (46) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (44) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (49) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (30) escritura -> . PRINT LPAREN escrito RPAREN
    (56) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (65) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (45) do -> . DO
    (66) funCall -> . ID

    RCURLY          shift and go to state 40
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 26
    PRINT           shift and go to state 27
    FUNCTION        shift and go to state 28
    BREAK           shift and go to state 30
    DO              shift and go to state 31

    estatutoExp                    shift and go to state 39
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    do                             shift and go to state 25
    funCall                        shift and go to state 29

state 12

    (16) estatutoExp -> estatuto . SEMICOLON

    SEMICOLON       shift and go to state 41


state 13

    (18) estatuto -> asignacion .

    SEMICOLON       reduce using rule 18 (estatuto -> asignacion .)


state 14

    (19) estatuto -> condicion .

    SEMICOLON       reduce using rule 19 (estatuto -> condicion .)


state 15

    (20) estatuto -> whileLoop .

    SEMICOLON       reduce using rule 20 (estatuto -> whileLoop .)


state 16

    (21) estatuto -> doWhile .

    SEMICOLON       reduce using rule 21 (estatuto -> doWhile .)


state 17

    (22) estatuto -> forLoop .

    SEMICOLON       reduce using rule 22 (estatuto -> forLoop .)


state 18

    (23) estatuto -> escritura .

    SEMICOLON       reduce using rule 23 (estatuto -> escritura .)


state 19

    (24) estatuto -> funcion .

    SEMICOLON       reduce using rule 24 (estatuto -> funcion .)


state 20

    (25) estatuto -> functionCall .

    SEMICOLON       reduce using rule 25 (estatuto -> functionCall .)


state 21

    (26) estatuto -> break .

    SEMICOLON       reduce using rule 26 (estatuto -> break .)


state 22

    (29) asignacion -> ID . EQUAL expresion
    (66) funCall -> ID .

    EQUAL           shift and go to state 42
    LPAREN          reduce using rule 66 (funCall -> ID .)


state 23

    (50) condicion -> IF . LPAREN expresion endCondition bloque condicionelse

    LPAREN          shift and go to state 43


state 24

    (46) whileLoop -> WHILE . startCondition expresion endCondition bloque
    (47) startCondition -> . LPAREN
    (48) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 45
    SEMICOLON       shift and go to state 46

    startCondition                 shift and go to state 44

state 25

    (44) doWhile -> do . bloque WHILE LPAREN expresion RPAREN
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 47

state 26

    (49) forLoop -> FOR . LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque

    LPAREN          shift and go to state 48


state 27

    (30) escritura -> PRINT . LPAREN escrito RPAREN

    LPAREN          shift and go to state 49


state 28

    (56) funcion -> FUNCTION . funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (58) funcdef -> . ID

    ID              shift and go to state 51

    funcdef                        shift and go to state 50

state 29

    (65) functionCall -> funCall . lparen funcArgs rparen
    (88) lparen -> . LPAREN

    LPAREN          shift and go to state 53

    lparen                         shift and go to state 52

state 30

    (27) break -> BREAK . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 54
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 31

    (45) do -> DO .

    LCURLY          reduce using rule 45 (do -> DO .)


state 32

    (5) vars -> vars vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 5 (vars -> vars vars .)
    IF              reduce using rule 5 (vars -> vars vars .)
    WHILE           reduce using rule 5 (vars -> vars vars .)
    FOR             reduce using rule 5 (vars -> vars vars .)
    PRINT           reduce using rule 5 (vars -> vars vars .)
    FUNCTION        reduce using rule 5 (vars -> vars vars .)
    BREAK           reduce using rule 5 (vars -> vars vars .)
    DO              reduce using rule 5 (vars -> vars vars .)
    RPAREN          reduce using rule 5 (vars -> vars vars .)
    VAR             shift and go to state 10

  ! VAR             [ reduce using rule 5 (vars -> vars vars .) ]

    vars                           shift and go to state 32

state 33

    (4) vars -> VAR var .

    VAR             reduce using rule 4 (vars -> VAR var .)
    ID              reduce using rule 4 (vars -> VAR var .)
    IF              reduce using rule 4 (vars -> VAR var .)
    WHILE           reduce using rule 4 (vars -> VAR var .)
    FOR             reduce using rule 4 (vars -> VAR var .)
    PRINT           reduce using rule 4 (vars -> VAR var .)
    FUNCTION        reduce using rule 4 (vars -> VAR var .)
    BREAK           reduce using rule 4 (vars -> VAR var .)
    DO              reduce using rule 4 (vars -> VAR var .)
    RPAREN          reduce using rule 4 (vars -> VAR var .)


state 34

    (6) var -> vardef . COLON tipo SEMICOLON

    COLON           shift and go to state 76


state 35

    (7) var -> declaracionArr . SEMICOLON

    SEMICOLON       shift and go to state 77


state 36

    (8) var -> declaracionMatrix . SEMICOLON

    SEMICOLON       shift and go to state 78


state 37

    (9) vardef -> ID .
    (91) arrDef -> ID .

    COLON           reduce using rule 9 (vardef -> ID .)
    LBRACKET        reduce using rule 91 (arrDef -> ID .)


state 38

    (92) declaracionArr -> arrDef . LBRACKET INT RBRACKET COLON tipo
    (93) declaracionMatrix -> arrDef . LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    LBRACKET        shift and go to state 79


state 39

    (17) estatutoExp -> estatutoExp estatutoExp .
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (50) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (46) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (44) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (49) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (30) escritura -> . PRINT LPAREN escrito RPAREN
    (56) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (65) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (45) do -> . DO
    (66) funCall -> . ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    RCURLY          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    RETURN          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 26
    PRINT           shift and go to state 27
    FUNCTION        shift and go to state 28
    BREAK           shift and go to state 30
    DO              shift and go to state 31

  ! ID              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! IF              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! WHILE           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FOR             [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! PRINT           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FUNCTION        [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! BREAK           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! DO              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]

    estatutoExp                    shift and go to state 39
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    do                             shift and go to state 25
    funCall                        shift and go to state 29

state 40

    (14) bloque -> LCURLY declaracion estatutoExp RCURLY .

    $end            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    WHILE           reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    ELSE            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    SEMICOLON       reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)


state 41

    (16) estatutoExp -> estatuto SEMICOLON .

    RCURLY          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    ID              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    IF              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    WHILE           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FOR             reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    PRINT           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FUNCTION        reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    BREAK           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    DO              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    RETURN          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)


state 42

    (29) asignacion -> ID EQUAL . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 80
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 43

    (50) condicion -> IF LPAREN . expresion endCondition bloque condicionelse
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 81
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 44

    (46) whileLoop -> WHILE startCondition . expresion endCondition bloque
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 82
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 45

    (47) startCondition -> LPAREN .

    ID              reduce using rule 47 (startCondition -> LPAREN .)
    LPAREN          reduce using rule 47 (startCondition -> LPAREN .)
    INT             reduce using rule 47 (startCondition -> LPAREN .)
    FLOAT           reduce using rule 47 (startCondition -> LPAREN .)
    BOOL            reduce using rule 47 (startCondition -> LPAREN .)
    STRING          reduce using rule 47 (startCondition -> LPAREN .)
    LBRACKET        reduce using rule 47 (startCondition -> LPAREN .)


state 46

    (48) startCondition -> SEMICOLON .

    ID              reduce using rule 48 (startCondition -> SEMICOLON .)
    LPAREN          reduce using rule 48 (startCondition -> SEMICOLON .)
    INT             reduce using rule 48 (startCondition -> SEMICOLON .)
    FLOAT           reduce using rule 48 (startCondition -> SEMICOLON .)
    BOOL            reduce using rule 48 (startCondition -> SEMICOLON .)
    STRING          reduce using rule 48 (startCondition -> SEMICOLON .)
    LBRACKET        reduce using rule 48 (startCondition -> SEMICOLON .)


state 47

    (44) doWhile -> do bloque . WHILE LPAREN expresion RPAREN

    WHILE           shift and go to state 83


state 48

    (49) forLoop -> FOR LPAREN . argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (71) argumentos -> . args
    (72) argumentos -> . epsilon
    (73) args -> . asignacion
    (74) args -> . args COMA args
    (90) epsilon -> .
    (29) asignacion -> . ID EQUAL expresion

    LPAREN          reduce using rule 90 (epsilon -> .)
    SEMICOLON       reduce using rule 90 (epsilon -> .)
    ID              shift and go to state 88

    argumentos                     shift and go to state 84
    asignacion                     shift and go to state 85
    args                           shift and go to state 86
    epsilon                        shift and go to state 87

state 49

    (30) escritura -> PRINT LPAREN . escrito RPAREN
    (31) escrito -> . impr
    (32) escrito -> . impr COMA escrito
    (33) impr -> . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    escrito                        shift and go to state 89
    impr                           shift and go to state 90
    expresion                      shift and go to state 91
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 50

    (56) funcion -> FUNCTION funcdef . LPAREN declaracion addArgs RPAREN COLON tiposreturn

    LPAREN          shift and go to state 92


state 51

    (58) funcdef -> ID .

    LPAREN          reduce using rule 58 (funcdef -> ID .)


state 52

    (65) functionCall -> funCall lparen . funcArgs rparen
    (67) funcArgs -> . checkArgs
    (68) funcArgs -> . funcArgs COMA funcArgs
    (69) funcArgs -> . epsilon
    (70) checkArgs -> . expresion
    (90) epsilon -> .
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    COMA            reduce using rule 90 (epsilon -> .)
    RPAREN          reduce using rule 90 (epsilon -> .)
    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    funcArgs                       shift and go to state 93
    checkArgs                      shift and go to state 94
    epsilon                        shift and go to state 95
    expresion                      shift and go to state 96
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 53

    (88) lparen -> LPAREN .

    ID              reduce using rule 88 (lparen -> LPAREN .)
    LPAREN          reduce using rule 88 (lparen -> LPAREN .)
    INT             reduce using rule 88 (lparen -> LPAREN .)
    FLOAT           reduce using rule 88 (lparen -> LPAREN .)
    BOOL            reduce using rule 88 (lparen -> LPAREN .)
    STRING          reduce using rule 88 (lparen -> LPAREN .)
    LBRACKET        reduce using rule 88 (lparen -> LPAREN .)
    COMA            reduce using rule 88 (lparen -> LPAREN .)
    RPAREN          reduce using rule 88 (lparen -> LPAREN .)


state 54

    (27) break -> BREAK expresion .

    SEMICOLON       reduce using rule 27 (break -> BREAK expresion .)


state 55

    (34) expresion -> exp .
    (37) condition -> exp . comparacion expresion
    (38) comparacion -> . LESSTHAN
    (39) comparacion -> . MORETHAN
    (40) comparacion -> . ISEQUAL
    (41) comparacion -> . NOTEQUAL
    (42) comparacion -> . AND
    (43) comparacion -> . OR

    SEMICOLON       reduce using rule 34 (expresion -> exp .)
    COMA            reduce using rule 34 (expresion -> exp .)
    LPAREN          reduce using rule 34 (expresion -> exp .)
    RPAREN          reduce using rule 34 (expresion -> exp .)
    RBRACKET        reduce using rule 34 (expresion -> exp .)
    LESSTHAN        shift and go to state 98
    MORETHAN        shift and go to state 99
    ISEQUAL         shift and go to state 100
    NOTEQUAL        shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103

    comparacion                    shift and go to state 97

state 56

    (35) expresion -> condition .

    SEMICOLON       reduce using rule 35 (expresion -> condition .)
    COMA            reduce using rule 35 (expresion -> condition .)
    LPAREN          reduce using rule 35 (expresion -> condition .)
    RPAREN          reduce using rule 35 (expresion -> condition .)
    RBRACKET        reduce using rule 35 (expresion -> condition .)


state 57

    (36) expresion -> functionCall .
    (87) factor -> functionCall .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 36 (expresion -> functionCall .)
  ! reduce/reduce conflict for COMA resolved using rule 36 (expresion -> functionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 36 (expresion -> functionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (expresion -> functionCall .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 36 (expresion -> functionCall .)
    SEMICOLON       reduce using rule 36 (expresion -> functionCall .)
    COMA            reduce using rule 36 (expresion -> functionCall .)
    LPAREN          reduce using rule 36 (expresion -> functionCall .)
    RPAREN          reduce using rule 36 (expresion -> functionCall .)
    RBRACKET        reduce using rule 36 (expresion -> functionCall .)
    TIMES           reduce using rule 87 (factor -> functionCall .)
    DIVIDE          reduce using rule 87 (factor -> functionCall .)
    DIFF            reduce using rule 87 (factor -> functionCall .)
    EXP             reduce using rule 87 (factor -> functionCall .)
    PLUS            reduce using rule 87 (factor -> functionCall .)
    MINUS           reduce using rule 87 (factor -> functionCall .)
    LESSTHAN        reduce using rule 87 (factor -> functionCall .)
    MORETHAN        reduce using rule 87 (factor -> functionCall .)
    ISEQUAL         reduce using rule 87 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 87 (factor -> functionCall .)
    AND             reduce using rule 87 (factor -> functionCall .)
    OR              reduce using rule 87 (factor -> functionCall .)

  ! SEMICOLON       [ reduce using rule 87 (factor -> functionCall .) ]
  ! COMA            [ reduce using rule 87 (factor -> functionCall .) ]
  ! LPAREN          [ reduce using rule 87 (factor -> functionCall .) ]
  ! RPAREN          [ reduce using rule 87 (factor -> functionCall .) ]
  ! RBRACKET        [ reduce using rule 87 (factor -> functionCall .) ]


state 58

    (75) exp -> termino .
    (76) exp -> termino . signo exp
    (77) signo -> . PLUS
    (78) signo -> . MINUS

    LESSTHAN        reduce using rule 75 (exp -> termino .)
    MORETHAN        reduce using rule 75 (exp -> termino .)
    ISEQUAL         reduce using rule 75 (exp -> termino .)
    NOTEQUAL        reduce using rule 75 (exp -> termino .)
    AND             reduce using rule 75 (exp -> termino .)
    OR              reduce using rule 75 (exp -> termino .)
    SEMICOLON       reduce using rule 75 (exp -> termino .)
    COMA            reduce using rule 75 (exp -> termino .)
    LPAREN          reduce using rule 75 (exp -> termino .)
    RPAREN          reduce using rule 75 (exp -> termino .)
    RBRACKET        reduce using rule 75 (exp -> termino .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

    signo                          shift and go to state 104

state 59

    (86) factor -> lparen . expresion rparen
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    lparen                         shift and go to state 59
    expresion                      shift and go to state 107
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 60

    (79) termino -> factor .
    (80) termino -> factor . operacion termino
    (81) operacion -> . TIMES
    (82) operacion -> . DIVIDE
    (83) operacion -> . DIFF
    (84) operacion -> . EXP

    PLUS            reduce using rule 79 (termino -> factor .)
    MINUS           reduce using rule 79 (termino -> factor .)
    LESSTHAN        reduce using rule 79 (termino -> factor .)
    MORETHAN        reduce using rule 79 (termino -> factor .)
    ISEQUAL         reduce using rule 79 (termino -> factor .)
    NOTEQUAL        reduce using rule 79 (termino -> factor .)
    AND             reduce using rule 79 (termino -> factor .)
    OR              reduce using rule 79 (termino -> factor .)
    SEMICOLON       reduce using rule 79 (termino -> factor .)
    COMA            reduce using rule 79 (termino -> factor .)
    LPAREN          reduce using rule 79 (termino -> factor .)
    RPAREN          reduce using rule 79 (termino -> factor .)
    RBRACKET        reduce using rule 79 (termino -> factor .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110
    DIFF            shift and go to state 111
    EXP             shift and go to state 112

    operacion                      shift and go to state 108

state 61

    (66) funCall -> ID .
    (102) varcte -> ID .
    (96) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 66 (funCall -> ID .)
    LPAREN          reduce using rule 66 (funCall -> ID .)
    TIMES           reduce using rule 102 (varcte -> ID .)
    DIVIDE          reduce using rule 102 (varcte -> ID .)
    DIFF            reduce using rule 102 (varcte -> ID .)
    EXP             reduce using rule 102 (varcte -> ID .)
    PLUS            reduce using rule 102 (varcte -> ID .)
    MINUS           reduce using rule 102 (varcte -> ID .)
    LESSTHAN        reduce using rule 102 (varcte -> ID .)
    MORETHAN        reduce using rule 102 (varcte -> ID .)
    ISEQUAL         reduce using rule 102 (varcte -> ID .)
    NOTEQUAL        reduce using rule 102 (varcte -> ID .)
    AND             reduce using rule 102 (varcte -> ID .)
    OR              reduce using rule 102 (varcte -> ID .)
    SEMICOLON       reduce using rule 102 (varcte -> ID .)
    COMA            reduce using rule 102 (varcte -> ID .)
    RPAREN          reduce using rule 102 (varcte -> ID .)
    RBRACKET        reduce using rule 102 (varcte -> ID .)
    LBRACKET        reduce using rule 96 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 102 (varcte -> ID .) ]


state 62

    (85) factor -> varcte .

    TIMES           reduce using rule 85 (factor -> varcte .)
    DIVIDE          reduce using rule 85 (factor -> varcte .)
    DIFF            reduce using rule 85 (factor -> varcte .)
    EXP             reduce using rule 85 (factor -> varcte .)
    PLUS            reduce using rule 85 (factor -> varcte .)
    MINUS           reduce using rule 85 (factor -> varcte .)
    LESSTHAN        reduce using rule 85 (factor -> varcte .)
    MORETHAN        reduce using rule 85 (factor -> varcte .)
    ISEQUAL         reduce using rule 85 (factor -> varcte .)
    NOTEQUAL        reduce using rule 85 (factor -> varcte .)
    AND             reduce using rule 85 (factor -> varcte .)
    OR              reduce using rule 85 (factor -> varcte .)
    SEMICOLON       reduce using rule 85 (factor -> varcte .)
    COMA            reduce using rule 85 (factor -> varcte .)
    LPAREN          reduce using rule 85 (factor -> varcte .)
    RPAREN          reduce using rule 85 (factor -> varcte .)
    RBRACKET        reduce using rule 85 (factor -> varcte .)


state 63

    (103) varcte -> int .

    TIMES           reduce using rule 103 (varcte -> int .)
    DIVIDE          reduce using rule 103 (varcte -> int .)
    DIFF            reduce using rule 103 (varcte -> int .)
    EXP             reduce using rule 103 (varcte -> int .)
    PLUS            reduce using rule 103 (varcte -> int .)
    MINUS           reduce using rule 103 (varcte -> int .)
    LESSTHAN        reduce using rule 103 (varcte -> int .)
    MORETHAN        reduce using rule 103 (varcte -> int .)
    ISEQUAL         reduce using rule 103 (varcte -> int .)
    NOTEQUAL        reduce using rule 103 (varcte -> int .)
    AND             reduce using rule 103 (varcte -> int .)
    OR              reduce using rule 103 (varcte -> int .)
    SEMICOLON       reduce using rule 103 (varcte -> int .)
    COMA            reduce using rule 103 (varcte -> int .)
    LPAREN          reduce using rule 103 (varcte -> int .)
    RPAREN          reduce using rule 103 (varcte -> int .)
    RBRACKET        reduce using rule 103 (varcte -> int .)


state 64

    (104) varcte -> float .

    TIMES           reduce using rule 104 (varcte -> float .)
    DIVIDE          reduce using rule 104 (varcte -> float .)
    DIFF            reduce using rule 104 (varcte -> float .)
    EXP             reduce using rule 104 (varcte -> float .)
    PLUS            reduce using rule 104 (varcte -> float .)
    MINUS           reduce using rule 104 (varcte -> float .)
    LESSTHAN        reduce using rule 104 (varcte -> float .)
    MORETHAN        reduce using rule 104 (varcte -> float .)
    ISEQUAL         reduce using rule 104 (varcte -> float .)
    NOTEQUAL        reduce using rule 104 (varcte -> float .)
    AND             reduce using rule 104 (varcte -> float .)
    OR              reduce using rule 104 (varcte -> float .)
    SEMICOLON       reduce using rule 104 (varcte -> float .)
    COMA            reduce using rule 104 (varcte -> float .)
    LPAREN          reduce using rule 104 (varcte -> float .)
    RPAREN          reduce using rule 104 (varcte -> float .)
    RBRACKET        reduce using rule 104 (varcte -> float .)


state 65

    (105) varcte -> bool .

    TIMES           reduce using rule 105 (varcte -> bool .)
    DIVIDE          reduce using rule 105 (varcte -> bool .)
    DIFF            reduce using rule 105 (varcte -> bool .)
    EXP             reduce using rule 105 (varcte -> bool .)
    PLUS            reduce using rule 105 (varcte -> bool .)
    MINUS           reduce using rule 105 (varcte -> bool .)
    LESSTHAN        reduce using rule 105 (varcte -> bool .)
    MORETHAN        reduce using rule 105 (varcte -> bool .)
    ISEQUAL         reduce using rule 105 (varcte -> bool .)
    NOTEQUAL        reduce using rule 105 (varcte -> bool .)
    AND             reduce using rule 105 (varcte -> bool .)
    OR              reduce using rule 105 (varcte -> bool .)
    SEMICOLON       reduce using rule 105 (varcte -> bool .)
    COMA            reduce using rule 105 (varcte -> bool .)
    LPAREN          reduce using rule 105 (varcte -> bool .)
    RPAREN          reduce using rule 105 (varcte -> bool .)
    RBRACKET        reduce using rule 105 (varcte -> bool .)


state 66

    (106) varcte -> string .

    TIMES           reduce using rule 106 (varcte -> string .)
    DIVIDE          reduce using rule 106 (varcte -> string .)
    DIFF            reduce using rule 106 (varcte -> string .)
    EXP             reduce using rule 106 (varcte -> string .)
    PLUS            reduce using rule 106 (varcte -> string .)
    MINUS           reduce using rule 106 (varcte -> string .)
    LESSTHAN        reduce using rule 106 (varcte -> string .)
    MORETHAN        reduce using rule 106 (varcte -> string .)
    ISEQUAL         reduce using rule 106 (varcte -> string .)
    NOTEQUAL        reduce using rule 106 (varcte -> string .)
    AND             reduce using rule 106 (varcte -> string .)
    OR              reduce using rule 106 (varcte -> string .)
    SEMICOLON       reduce using rule 106 (varcte -> string .)
    COMA            reduce using rule 106 (varcte -> string .)
    LPAREN          reduce using rule 106 (varcte -> string .)
    RPAREN          reduce using rule 106 (varcte -> string .)
    RBRACKET        reduce using rule 106 (varcte -> string .)


state 67

    (107) varcte -> matrix .

    TIMES           reduce using rule 107 (varcte -> matrix .)
    DIVIDE          reduce using rule 107 (varcte -> matrix .)
    DIFF            reduce using rule 107 (varcte -> matrix .)
    EXP             reduce using rule 107 (varcte -> matrix .)
    PLUS            reduce using rule 107 (varcte -> matrix .)
    MINUS           reduce using rule 107 (varcte -> matrix .)
    LESSTHAN        reduce using rule 107 (varcte -> matrix .)
    MORETHAN        reduce using rule 107 (varcte -> matrix .)
    ISEQUAL         reduce using rule 107 (varcte -> matrix .)
    NOTEQUAL        reduce using rule 107 (varcte -> matrix .)
    AND             reduce using rule 107 (varcte -> matrix .)
    OR              reduce using rule 107 (varcte -> matrix .)
    SEMICOLON       reduce using rule 107 (varcte -> matrix .)
    COMA            reduce using rule 107 (varcte -> matrix .)
    LPAREN          reduce using rule 107 (varcte -> matrix .)
    RPAREN          reduce using rule 107 (varcte -> matrix .)
    RBRACKET        reduce using rule 107 (varcte -> matrix .)


state 68

    (108) varcte -> arr .

    TIMES           reduce using rule 108 (varcte -> arr .)
    DIVIDE          reduce using rule 108 (varcte -> arr .)
    DIFF            reduce using rule 108 (varcte -> arr .)
    EXP             reduce using rule 108 (varcte -> arr .)
    PLUS            reduce using rule 108 (varcte -> arr .)
    MINUS           reduce using rule 108 (varcte -> arr .)
    LESSTHAN        reduce using rule 108 (varcte -> arr .)
    MORETHAN        reduce using rule 108 (varcte -> arr .)
    ISEQUAL         reduce using rule 108 (varcte -> arr .)
    NOTEQUAL        reduce using rule 108 (varcte -> arr .)
    AND             reduce using rule 108 (varcte -> arr .)
    OR              reduce using rule 108 (varcte -> arr .)
    SEMICOLON       reduce using rule 108 (varcte -> arr .)
    COMA            reduce using rule 108 (varcte -> arr .)
    LPAREN          reduce using rule 108 (varcte -> arr .)
    RPAREN          reduce using rule 108 (varcte -> arr .)
    RBRACKET        reduce using rule 108 (varcte -> arr .)


state 69

    (109) int -> INT .

    TIMES           reduce using rule 109 (int -> INT .)
    DIVIDE          reduce using rule 109 (int -> INT .)
    DIFF            reduce using rule 109 (int -> INT .)
    EXP             reduce using rule 109 (int -> INT .)
    PLUS            reduce using rule 109 (int -> INT .)
    MINUS           reduce using rule 109 (int -> INT .)
    LESSTHAN        reduce using rule 109 (int -> INT .)
    MORETHAN        reduce using rule 109 (int -> INT .)
    ISEQUAL         reduce using rule 109 (int -> INT .)
    NOTEQUAL        reduce using rule 109 (int -> INT .)
    AND             reduce using rule 109 (int -> INT .)
    OR              reduce using rule 109 (int -> INT .)
    SEMICOLON       reduce using rule 109 (int -> INT .)
    COMA            reduce using rule 109 (int -> INT .)
    LPAREN          reduce using rule 109 (int -> INT .)
    RPAREN          reduce using rule 109 (int -> INT .)
    RBRACKET        reduce using rule 109 (int -> INT .)


state 70

    (110) float -> FLOAT .

    TIMES           reduce using rule 110 (float -> FLOAT .)
    DIVIDE          reduce using rule 110 (float -> FLOAT .)
    DIFF            reduce using rule 110 (float -> FLOAT .)
    EXP             reduce using rule 110 (float -> FLOAT .)
    PLUS            reduce using rule 110 (float -> FLOAT .)
    MINUS           reduce using rule 110 (float -> FLOAT .)
    LESSTHAN        reduce using rule 110 (float -> FLOAT .)
    MORETHAN        reduce using rule 110 (float -> FLOAT .)
    ISEQUAL         reduce using rule 110 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 110 (float -> FLOAT .)
    AND             reduce using rule 110 (float -> FLOAT .)
    OR              reduce using rule 110 (float -> FLOAT .)
    SEMICOLON       reduce using rule 110 (float -> FLOAT .)
    COMA            reduce using rule 110 (float -> FLOAT .)
    LPAREN          reduce using rule 110 (float -> FLOAT .)
    RPAREN          reduce using rule 110 (float -> FLOAT .)
    RBRACKET        reduce using rule 110 (float -> FLOAT .)


state 71

    (111) bool -> BOOL .

    TIMES           reduce using rule 111 (bool -> BOOL .)
    DIVIDE          reduce using rule 111 (bool -> BOOL .)
    DIFF            reduce using rule 111 (bool -> BOOL .)
    EXP             reduce using rule 111 (bool -> BOOL .)
    PLUS            reduce using rule 111 (bool -> BOOL .)
    MINUS           reduce using rule 111 (bool -> BOOL .)
    LESSTHAN        reduce using rule 111 (bool -> BOOL .)
    MORETHAN        reduce using rule 111 (bool -> BOOL .)
    ISEQUAL         reduce using rule 111 (bool -> BOOL .)
    NOTEQUAL        reduce using rule 111 (bool -> BOOL .)
    AND             reduce using rule 111 (bool -> BOOL .)
    OR              reduce using rule 111 (bool -> BOOL .)
    SEMICOLON       reduce using rule 111 (bool -> BOOL .)
    COMA            reduce using rule 111 (bool -> BOOL .)
    LPAREN          reduce using rule 111 (bool -> BOOL .)
    RPAREN          reduce using rule 111 (bool -> BOOL .)
    RBRACKET        reduce using rule 111 (bool -> BOOL .)


state 72

    (112) string -> STRING .

    TIMES           reduce using rule 112 (string -> STRING .)
    DIVIDE          reduce using rule 112 (string -> STRING .)
    DIFF            reduce using rule 112 (string -> STRING .)
    EXP             reduce using rule 112 (string -> STRING .)
    PLUS            reduce using rule 112 (string -> STRING .)
    MINUS           reduce using rule 112 (string -> STRING .)
    LESSTHAN        reduce using rule 112 (string -> STRING .)
    MORETHAN        reduce using rule 112 (string -> STRING .)
    ISEQUAL         reduce using rule 112 (string -> STRING .)
    NOTEQUAL        reduce using rule 112 (string -> STRING .)
    AND             reduce using rule 112 (string -> STRING .)
    OR              reduce using rule 112 (string -> STRING .)
    SEMICOLON       reduce using rule 112 (string -> STRING .)
    COMA            reduce using rule 112 (string -> STRING .)
    LPAREN          reduce using rule 112 (string -> STRING .)
    RPAREN          reduce using rule 112 (string -> STRING .)
    RBRACKET        reduce using rule 112 (string -> STRING .)


state 73

    (97) matrix -> openBracket . expresion mbracket
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    openBracket                    shift and go to state 73
    expresion                      shift and go to state 113
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    callArr                        shift and go to state 74

state 74

    (94) arr -> callArr . openBracket expresion abracket matrix
    (95) arr -> callArr . openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET

    LBRACKET        shift and go to state 75

    openBracket                    shift and go to state 114

state 75

    (98) openBracket -> LBRACKET .

    ID              reduce using rule 98 (openBracket -> LBRACKET .)
    LPAREN          reduce using rule 98 (openBracket -> LBRACKET .)
    INT             reduce using rule 98 (openBracket -> LBRACKET .)
    FLOAT           reduce using rule 98 (openBracket -> LBRACKET .)
    BOOL            reduce using rule 98 (openBracket -> LBRACKET .)
    STRING          reduce using rule 98 (openBracket -> LBRACKET .)
    LBRACKET        reduce using rule 98 (openBracket -> LBRACKET .)


state 76

    (6) var -> vardef COLON . tipo SEMICOLON
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 116
    FLOAT           shift and go to state 117
    BOOL            shift and go to state 118
    STRING          shift and go to state 119

    tipo                           shift and go to state 115

state 77

    (7) var -> declaracionArr SEMICOLON .

    VAR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    ID              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    IF              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    WHILE           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FOR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    PRINT           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FUNCTION        reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    BREAK           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    DO              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    RPAREN          reduce using rule 7 (var -> declaracionArr SEMICOLON .)


state 78

    (8) var -> declaracionMatrix SEMICOLON .

    VAR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    ID              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    IF              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    WHILE           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FOR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    PRINT           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FUNCTION        reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    BREAK           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    DO              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    RPAREN          reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)


state 79

    (92) declaracionArr -> arrDef LBRACKET . INT RBRACKET COLON tipo
    (93) declaracionMatrix -> arrDef LBRACKET . INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    INT             shift and go to state 120


state 80

    (29) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    COMA            reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    LPAREN          reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    RPAREN          reduce using rule 29 (asignacion -> ID EQUAL expresion .)


state 81

    (50) condicion -> IF LPAREN expresion . endCondition bloque condicionelse
    (51) endCondition -> . RPAREN
    (52) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 122
    SEMICOLON       shift and go to state 123

    endCondition                   shift and go to state 121

state 82

    (46) whileLoop -> WHILE startCondition expresion . endCondition bloque
    (51) endCondition -> . RPAREN
    (52) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 122
    SEMICOLON       shift and go to state 123

    endCondition                   shift and go to state 124

state 83

    (44) doWhile -> do bloque WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 125


state 84

    (49) forLoop -> FOR LPAREN argumentos . startCondition expresion endCondition asignacion RPAREN bloque
    (47) startCondition -> . LPAREN
    (48) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 45
    SEMICOLON       shift and go to state 46

    startCondition                 shift and go to state 126

state 85

    (73) args -> asignacion .

    COMA            reduce using rule 73 (args -> asignacion .)
    LPAREN          reduce using rule 73 (args -> asignacion .)
    SEMICOLON       reduce using rule 73 (args -> asignacion .)


state 86

    (71) argumentos -> args .
    (74) args -> args . COMA args

    LPAREN          reduce using rule 71 (argumentos -> args .)
    SEMICOLON       reduce using rule 71 (argumentos -> args .)
    COMA            shift and go to state 127


state 87

    (72) argumentos -> epsilon .

    LPAREN          reduce using rule 72 (argumentos -> epsilon .)
    SEMICOLON       reduce using rule 72 (argumentos -> epsilon .)


state 88

    (29) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 42


state 89

    (30) escritura -> PRINT LPAREN escrito . RPAREN

    RPAREN          shift and go to state 128


state 90

    (31) escrito -> impr .
    (32) escrito -> impr . COMA escrito

    RPAREN          reduce using rule 31 (escrito -> impr .)
    COMA            shift and go to state 129


state 91

    (33) impr -> expresion .

    COMA            reduce using rule 33 (impr -> expresion .)
    RPAREN          reduce using rule 33 (impr -> expresion .)


state 92

    (56) funcion -> FUNCTION funcdef LPAREN . declaracion addArgs RPAREN COLON tiposreturn
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (90) epsilon -> .

    VAR             shift and go to state 10
    RPAREN          reduce using rule 90 (epsilon -> .)

    declaracion                    shift and go to state 130
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 93

    (65) functionCall -> funCall lparen funcArgs . rparen
    (68) funcArgs -> funcArgs . COMA funcArgs
    (89) rparen -> . RPAREN

    COMA            shift and go to state 132
    RPAREN          shift and go to state 133

    rparen                         shift and go to state 131

state 94

    (67) funcArgs -> checkArgs .

    COMA            reduce using rule 67 (funcArgs -> checkArgs .)
    RPAREN          reduce using rule 67 (funcArgs -> checkArgs .)


state 95

    (69) funcArgs -> epsilon .

    COMA            reduce using rule 69 (funcArgs -> epsilon .)
    RPAREN          reduce using rule 69 (funcArgs -> epsilon .)


state 96

    (70) checkArgs -> expresion .

    COMA            reduce using rule 70 (checkArgs -> expresion .)
    RPAREN          reduce using rule 70 (checkArgs -> expresion .)


state 97

    (37) condition -> exp comparacion . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    exp                            shift and go to state 55
    expresion                      shift and go to state 134
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 98

    (38) comparacion -> LESSTHAN .

    ID              reduce using rule 38 (comparacion -> LESSTHAN .)
    LPAREN          reduce using rule 38 (comparacion -> LESSTHAN .)
    INT             reduce using rule 38 (comparacion -> LESSTHAN .)
    FLOAT           reduce using rule 38 (comparacion -> LESSTHAN .)
    BOOL            reduce using rule 38 (comparacion -> LESSTHAN .)
    STRING          reduce using rule 38 (comparacion -> LESSTHAN .)
    LBRACKET        reduce using rule 38 (comparacion -> LESSTHAN .)


state 99

    (39) comparacion -> MORETHAN .

    ID              reduce using rule 39 (comparacion -> MORETHAN .)
    LPAREN          reduce using rule 39 (comparacion -> MORETHAN .)
    INT             reduce using rule 39 (comparacion -> MORETHAN .)
    FLOAT           reduce using rule 39 (comparacion -> MORETHAN .)
    BOOL            reduce using rule 39 (comparacion -> MORETHAN .)
    STRING          reduce using rule 39 (comparacion -> MORETHAN .)
    LBRACKET        reduce using rule 39 (comparacion -> MORETHAN .)


state 100

    (40) comparacion -> ISEQUAL .

    ID              reduce using rule 40 (comparacion -> ISEQUAL .)
    LPAREN          reduce using rule 40 (comparacion -> ISEQUAL .)
    INT             reduce using rule 40 (comparacion -> ISEQUAL .)
    FLOAT           reduce using rule 40 (comparacion -> ISEQUAL .)
    BOOL            reduce using rule 40 (comparacion -> ISEQUAL .)
    STRING          reduce using rule 40 (comparacion -> ISEQUAL .)
    LBRACKET        reduce using rule 40 (comparacion -> ISEQUAL .)


state 101

    (41) comparacion -> NOTEQUAL .

    ID              reduce using rule 41 (comparacion -> NOTEQUAL .)
    LPAREN          reduce using rule 41 (comparacion -> NOTEQUAL .)
    INT             reduce using rule 41 (comparacion -> NOTEQUAL .)
    FLOAT           reduce using rule 41 (comparacion -> NOTEQUAL .)
    BOOL            reduce using rule 41 (comparacion -> NOTEQUAL .)
    STRING          reduce using rule 41 (comparacion -> NOTEQUAL .)
    LBRACKET        reduce using rule 41 (comparacion -> NOTEQUAL .)


state 102

    (42) comparacion -> AND .

    ID              reduce using rule 42 (comparacion -> AND .)
    LPAREN          reduce using rule 42 (comparacion -> AND .)
    INT             reduce using rule 42 (comparacion -> AND .)
    FLOAT           reduce using rule 42 (comparacion -> AND .)
    BOOL            reduce using rule 42 (comparacion -> AND .)
    STRING          reduce using rule 42 (comparacion -> AND .)
    LBRACKET        reduce using rule 42 (comparacion -> AND .)


state 103

    (43) comparacion -> OR .

    ID              reduce using rule 43 (comparacion -> OR .)
    LPAREN          reduce using rule 43 (comparacion -> OR .)
    INT             reduce using rule 43 (comparacion -> OR .)
    FLOAT           reduce using rule 43 (comparacion -> OR .)
    BOOL            reduce using rule 43 (comparacion -> OR .)
    STRING          reduce using rule 43 (comparacion -> OR .)
    LBRACKET        reduce using rule 43 (comparacion -> OR .)


state 104

    (76) exp -> termino signo . exp
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (65) functionCall -> . funCall lparen funcArgs rparen
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (66) funCall -> . ID
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 137
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    termino                        shift and go to state 58
    exp                            shift and go to state 135
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    lparen                         shift and go to state 59
    functionCall                   shift and go to state 136
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    funCall                        shift and go to state 29
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 105

    (77) signo -> PLUS .

    ID              reduce using rule 77 (signo -> PLUS .)
    LPAREN          reduce using rule 77 (signo -> PLUS .)
    INT             reduce using rule 77 (signo -> PLUS .)
    FLOAT           reduce using rule 77 (signo -> PLUS .)
    BOOL            reduce using rule 77 (signo -> PLUS .)
    STRING          reduce using rule 77 (signo -> PLUS .)
    LBRACKET        reduce using rule 77 (signo -> PLUS .)


state 106

    (78) signo -> MINUS .

    ID              reduce using rule 78 (signo -> MINUS .)
    LPAREN          reduce using rule 78 (signo -> MINUS .)
    INT             reduce using rule 78 (signo -> MINUS .)
    FLOAT           reduce using rule 78 (signo -> MINUS .)
    BOOL            reduce using rule 78 (signo -> MINUS .)
    STRING          reduce using rule 78 (signo -> MINUS .)
    LBRACKET        reduce using rule 78 (signo -> MINUS .)


state 107

    (86) factor -> lparen expresion . rparen
    (89) rparen -> . RPAREN

    RPAREN          shift and go to state 133

    rparen                         shift and go to state 138

state 108

    (80) termino -> factor operacion . termino
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (65) functionCall -> . funCall lparen funcArgs rparen
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (66) funCall -> . ID
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 137
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    factor                         shift and go to state 60
    termino                        shift and go to state 139
    varcte                         shift and go to state 62
    lparen                         shift and go to state 59
    functionCall                   shift and go to state 136
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    funCall                        shift and go to state 29
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 109

    (81) operacion -> TIMES .

    ID              reduce using rule 81 (operacion -> TIMES .)
    LPAREN          reduce using rule 81 (operacion -> TIMES .)
    INT             reduce using rule 81 (operacion -> TIMES .)
    FLOAT           reduce using rule 81 (operacion -> TIMES .)
    BOOL            reduce using rule 81 (operacion -> TIMES .)
    STRING          reduce using rule 81 (operacion -> TIMES .)
    LBRACKET        reduce using rule 81 (operacion -> TIMES .)


state 110

    (82) operacion -> DIVIDE .

    ID              reduce using rule 82 (operacion -> DIVIDE .)
    LPAREN          reduce using rule 82 (operacion -> DIVIDE .)
    INT             reduce using rule 82 (operacion -> DIVIDE .)
    FLOAT           reduce using rule 82 (operacion -> DIVIDE .)
    BOOL            reduce using rule 82 (operacion -> DIVIDE .)
    STRING          reduce using rule 82 (operacion -> DIVIDE .)
    LBRACKET        reduce using rule 82 (operacion -> DIVIDE .)


state 111

    (83) operacion -> DIFF .

    ID              reduce using rule 83 (operacion -> DIFF .)
    LPAREN          reduce using rule 83 (operacion -> DIFF .)
    INT             reduce using rule 83 (operacion -> DIFF .)
    FLOAT           reduce using rule 83 (operacion -> DIFF .)
    BOOL            reduce using rule 83 (operacion -> DIFF .)
    STRING          reduce using rule 83 (operacion -> DIFF .)
    LBRACKET        reduce using rule 83 (operacion -> DIFF .)


state 112

    (84) operacion -> EXP .

    ID              reduce using rule 84 (operacion -> EXP .)
    LPAREN          reduce using rule 84 (operacion -> EXP .)
    INT             reduce using rule 84 (operacion -> EXP .)
    FLOAT           reduce using rule 84 (operacion -> EXP .)
    BOOL            reduce using rule 84 (operacion -> EXP .)
    STRING          reduce using rule 84 (operacion -> EXP .)
    LBRACKET        reduce using rule 84 (operacion -> EXP .)


state 113

    (97) matrix -> openBracket expresion . mbracket
    (101) mbracket -> . closeBracket
    (99) closeBracket -> . RBRACKET

    RBRACKET        shift and go to state 142

    mbracket                       shift and go to state 140
    closeBracket                   shift and go to state 141

state 114

    (94) arr -> callArr openBracket . expresion abracket matrix
    (95) arr -> callArr openBracket . expresion abracket epsilon
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    callArr                        shift and go to state 74
    openBracket                    shift and go to state 73
    expresion                      shift and go to state 143
    matrix                         shift and go to state 67
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    arr                            shift and go to state 68

state 115

    (6) var -> vardef COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 144


state 116

    (10) tipo -> INT .

    SEMICOLON       reduce using rule 10 (tipo -> INT .)


state 117

    (11) tipo -> FLOAT .

    SEMICOLON       reduce using rule 11 (tipo -> FLOAT .)


state 118

    (12) tipo -> BOOL .

    SEMICOLON       reduce using rule 12 (tipo -> BOOL .)


state 119

    (13) tipo -> STRING .

    SEMICOLON       reduce using rule 13 (tipo -> STRING .)


state 120

    (92) declaracionArr -> arrDef LBRACKET INT . RBRACKET COLON tipo
    (93) declaracionMatrix -> arrDef LBRACKET INT . RBRACKET LBRACKET INT RBRACKET COLON tipo

    RBRACKET        shift and go to state 145


state 121

    (50) condicion -> IF LPAREN expresion endCondition . bloque condicionelse
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 146

state 122

    (51) endCondition -> RPAREN .

    LCURLY          reduce using rule 51 (endCondition -> RPAREN .)
    ID              reduce using rule 51 (endCondition -> RPAREN .)


state 123

    (52) endCondition -> SEMICOLON .

    LCURLY          reduce using rule 52 (endCondition -> SEMICOLON .)
    ID              reduce using rule 52 (endCondition -> SEMICOLON .)


state 124

    (46) whileLoop -> WHILE startCondition expresion endCondition . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 147

state 125

    (44) doWhile -> do bloque WHILE LPAREN . expresion RPAREN
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 148
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 126

    (49) forLoop -> FOR LPAREN argumentos startCondition . expresion endCondition asignacion RPAREN bloque
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 149
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 127

    (74) args -> args COMA . args
    (73) args -> . asignacion
    (74) args -> . args COMA args
    (29) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 88

    args                           shift and go to state 150
    asignacion                     shift and go to state 85

state 128

    (30) escritura -> PRINT LPAREN escrito RPAREN .

    SEMICOLON       reduce using rule 30 (escritura -> PRINT LPAREN escrito RPAREN .)


state 129

    (32) escrito -> impr COMA . escrito
    (31) escrito -> . impr
    (32) escrito -> . impr COMA escrito
    (33) impr -> . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    impr                           shift and go to state 90
    escrito                        shift and go to state 151
    expresion                      shift and go to state 91
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 130

    (56) funcion -> FUNCTION funcdef LPAREN declaracion . addArgs RPAREN COLON tiposreturn
    (57) addArgs -> . epsilon
    (90) epsilon -> .

    RPAREN          reduce using rule 90 (epsilon -> .)

    addArgs                        shift and go to state 152
    epsilon                        shift and go to state 153

state 131

    (65) functionCall -> funCall lparen funcArgs rparen .

    SEMICOLON       reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    TIMES           reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    DIVIDE          reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    DIFF            reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    EXP             reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    PLUS            reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    MINUS           reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    LESSTHAN        reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    MORETHAN        reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    ISEQUAL         reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    NOTEQUAL        reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    AND             reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    OR              reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    COMA            reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    LPAREN          reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    RPAREN          reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)
    RBRACKET        reduce using rule 65 (functionCall -> funCall lparen funcArgs rparen .)


state 132

    (68) funcArgs -> funcArgs COMA . funcArgs
    (67) funcArgs -> . checkArgs
    (68) funcArgs -> . funcArgs COMA funcArgs
    (69) funcArgs -> . epsilon
    (70) checkArgs -> . expresion
    (90) epsilon -> .
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    COMA            reduce using rule 90 (epsilon -> .)
    RPAREN          reduce using rule 90 (epsilon -> .)
    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    funcArgs                       shift and go to state 154
    checkArgs                      shift and go to state 94
    epsilon                        shift and go to state 95
    expresion                      shift and go to state 96
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 133

    (89) rparen -> RPAREN .

    SEMICOLON       reduce using rule 89 (rparen -> RPAREN .)
    TIMES           reduce using rule 89 (rparen -> RPAREN .)
    DIVIDE          reduce using rule 89 (rparen -> RPAREN .)
    DIFF            reduce using rule 89 (rparen -> RPAREN .)
    EXP             reduce using rule 89 (rparen -> RPAREN .)
    PLUS            reduce using rule 89 (rparen -> RPAREN .)
    MINUS           reduce using rule 89 (rparen -> RPAREN .)
    LESSTHAN        reduce using rule 89 (rparen -> RPAREN .)
    MORETHAN        reduce using rule 89 (rparen -> RPAREN .)
    ISEQUAL         reduce using rule 89 (rparen -> RPAREN .)
    NOTEQUAL        reduce using rule 89 (rparen -> RPAREN .)
    AND             reduce using rule 89 (rparen -> RPAREN .)
    OR              reduce using rule 89 (rparen -> RPAREN .)
    COMA            reduce using rule 89 (rparen -> RPAREN .)
    LPAREN          reduce using rule 89 (rparen -> RPAREN .)
    RPAREN          reduce using rule 89 (rparen -> RPAREN .)
    RBRACKET        reduce using rule 89 (rparen -> RPAREN .)


state 134

    (37) condition -> exp comparacion expresion .

    SEMICOLON       reduce using rule 37 (condition -> exp comparacion expresion .)
    COMA            reduce using rule 37 (condition -> exp comparacion expresion .)
    LPAREN          reduce using rule 37 (condition -> exp comparacion expresion .)
    RPAREN          reduce using rule 37 (condition -> exp comparacion expresion .)
    RBRACKET        reduce using rule 37 (condition -> exp comparacion expresion .)


state 135

    (76) exp -> termino signo exp .

    LESSTHAN        reduce using rule 76 (exp -> termino signo exp .)
    MORETHAN        reduce using rule 76 (exp -> termino signo exp .)
    ISEQUAL         reduce using rule 76 (exp -> termino signo exp .)
    NOTEQUAL        reduce using rule 76 (exp -> termino signo exp .)
    AND             reduce using rule 76 (exp -> termino signo exp .)
    OR              reduce using rule 76 (exp -> termino signo exp .)
    SEMICOLON       reduce using rule 76 (exp -> termino signo exp .)
    COMA            reduce using rule 76 (exp -> termino signo exp .)
    LPAREN          reduce using rule 76 (exp -> termino signo exp .)
    RPAREN          reduce using rule 76 (exp -> termino signo exp .)
    RBRACKET        reduce using rule 76 (exp -> termino signo exp .)


state 136

    (87) factor -> functionCall .

    TIMES           reduce using rule 87 (factor -> functionCall .)
    DIVIDE          reduce using rule 87 (factor -> functionCall .)
    DIFF            reduce using rule 87 (factor -> functionCall .)
    EXP             reduce using rule 87 (factor -> functionCall .)
    PLUS            reduce using rule 87 (factor -> functionCall .)
    MINUS           reduce using rule 87 (factor -> functionCall .)
    LESSTHAN        reduce using rule 87 (factor -> functionCall .)
    MORETHAN        reduce using rule 87 (factor -> functionCall .)
    ISEQUAL         reduce using rule 87 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 87 (factor -> functionCall .)
    AND             reduce using rule 87 (factor -> functionCall .)
    OR              reduce using rule 87 (factor -> functionCall .)
    SEMICOLON       reduce using rule 87 (factor -> functionCall .)
    COMA            reduce using rule 87 (factor -> functionCall .)
    LPAREN          reduce using rule 87 (factor -> functionCall .)
    RPAREN          reduce using rule 87 (factor -> functionCall .)
    RBRACKET        reduce using rule 87 (factor -> functionCall .)


state 137

    (102) varcte -> ID .
    (66) funCall -> ID .
    (96) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 66 (funCall -> ID .)
    TIMES           reduce using rule 102 (varcte -> ID .)
    DIVIDE          reduce using rule 102 (varcte -> ID .)
    DIFF            reduce using rule 102 (varcte -> ID .)
    EXP             reduce using rule 102 (varcte -> ID .)
    PLUS            reduce using rule 102 (varcte -> ID .)
    MINUS           reduce using rule 102 (varcte -> ID .)
    LESSTHAN        reduce using rule 102 (varcte -> ID .)
    MORETHAN        reduce using rule 102 (varcte -> ID .)
    ISEQUAL         reduce using rule 102 (varcte -> ID .)
    NOTEQUAL        reduce using rule 102 (varcte -> ID .)
    AND             reduce using rule 102 (varcte -> ID .)
    OR              reduce using rule 102 (varcte -> ID .)
    SEMICOLON       reduce using rule 102 (varcte -> ID .)
    COMA            reduce using rule 102 (varcte -> ID .)
    RPAREN          reduce using rule 102 (varcte -> ID .)
    RBRACKET        reduce using rule 102 (varcte -> ID .)
    LPAREN          reduce using rule 66 (funCall -> ID .)
    LBRACKET        reduce using rule 96 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 102 (varcte -> ID .) ]


state 138

    (86) factor -> lparen expresion rparen .

    TIMES           reduce using rule 86 (factor -> lparen expresion rparen .)
    DIVIDE          reduce using rule 86 (factor -> lparen expresion rparen .)
    DIFF            reduce using rule 86 (factor -> lparen expresion rparen .)
    EXP             reduce using rule 86 (factor -> lparen expresion rparen .)
    PLUS            reduce using rule 86 (factor -> lparen expresion rparen .)
    MINUS           reduce using rule 86 (factor -> lparen expresion rparen .)
    LESSTHAN        reduce using rule 86 (factor -> lparen expresion rparen .)
    MORETHAN        reduce using rule 86 (factor -> lparen expresion rparen .)
    ISEQUAL         reduce using rule 86 (factor -> lparen expresion rparen .)
    NOTEQUAL        reduce using rule 86 (factor -> lparen expresion rparen .)
    AND             reduce using rule 86 (factor -> lparen expresion rparen .)
    OR              reduce using rule 86 (factor -> lparen expresion rparen .)
    SEMICOLON       reduce using rule 86 (factor -> lparen expresion rparen .)
    COMA            reduce using rule 86 (factor -> lparen expresion rparen .)
    LPAREN          reduce using rule 86 (factor -> lparen expresion rparen .)
    RPAREN          reduce using rule 86 (factor -> lparen expresion rparen .)
    RBRACKET        reduce using rule 86 (factor -> lparen expresion rparen .)


state 139

    (80) termino -> factor operacion termino .

    PLUS            reduce using rule 80 (termino -> factor operacion termino .)
    MINUS           reduce using rule 80 (termino -> factor operacion termino .)
    LESSTHAN        reduce using rule 80 (termino -> factor operacion termino .)
    MORETHAN        reduce using rule 80 (termino -> factor operacion termino .)
    ISEQUAL         reduce using rule 80 (termino -> factor operacion termino .)
    NOTEQUAL        reduce using rule 80 (termino -> factor operacion termino .)
    AND             reduce using rule 80 (termino -> factor operacion termino .)
    OR              reduce using rule 80 (termino -> factor operacion termino .)
    SEMICOLON       reduce using rule 80 (termino -> factor operacion termino .)
    COMA            reduce using rule 80 (termino -> factor operacion termino .)
    LPAREN          reduce using rule 80 (termino -> factor operacion termino .)
    RPAREN          reduce using rule 80 (termino -> factor operacion termino .)
    RBRACKET        reduce using rule 80 (termino -> factor operacion termino .)


state 140

    (97) matrix -> openBracket expresion mbracket .

    TIMES           reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    DIVIDE          reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    DIFF            reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    EXP             reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    PLUS            reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    MINUS           reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    LESSTHAN        reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    MORETHAN        reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    ISEQUAL         reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    NOTEQUAL        reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    AND             reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    OR              reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    SEMICOLON       reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    COMA            reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    LPAREN          reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    RPAREN          reduce using rule 97 (matrix -> openBracket expresion mbracket .)
    RBRACKET        reduce using rule 97 (matrix -> openBracket expresion mbracket .)


state 141

    (101) mbracket -> closeBracket .

    TIMES           reduce using rule 101 (mbracket -> closeBracket .)
    DIVIDE          reduce using rule 101 (mbracket -> closeBracket .)
    DIFF            reduce using rule 101 (mbracket -> closeBracket .)
    EXP             reduce using rule 101 (mbracket -> closeBracket .)
    PLUS            reduce using rule 101 (mbracket -> closeBracket .)
    MINUS           reduce using rule 101 (mbracket -> closeBracket .)
    LESSTHAN        reduce using rule 101 (mbracket -> closeBracket .)
    MORETHAN        reduce using rule 101 (mbracket -> closeBracket .)
    ISEQUAL         reduce using rule 101 (mbracket -> closeBracket .)
    NOTEQUAL        reduce using rule 101 (mbracket -> closeBracket .)
    AND             reduce using rule 101 (mbracket -> closeBracket .)
    OR              reduce using rule 101 (mbracket -> closeBracket .)
    SEMICOLON       reduce using rule 101 (mbracket -> closeBracket .)
    COMA            reduce using rule 101 (mbracket -> closeBracket .)
    LPAREN          reduce using rule 101 (mbracket -> closeBracket .)
    RPAREN          reduce using rule 101 (mbracket -> closeBracket .)
    RBRACKET        reduce using rule 101 (mbracket -> closeBracket .)


state 142

    (99) closeBracket -> RBRACKET .

    TIMES           reduce using rule 99 (closeBracket -> RBRACKET .)
    DIVIDE          reduce using rule 99 (closeBracket -> RBRACKET .)
    DIFF            reduce using rule 99 (closeBracket -> RBRACKET .)
    EXP             reduce using rule 99 (closeBracket -> RBRACKET .)
    PLUS            reduce using rule 99 (closeBracket -> RBRACKET .)
    MINUS           reduce using rule 99 (closeBracket -> RBRACKET .)
    LESSTHAN        reduce using rule 99 (closeBracket -> RBRACKET .)
    MORETHAN        reduce using rule 99 (closeBracket -> RBRACKET .)
    ISEQUAL         reduce using rule 99 (closeBracket -> RBRACKET .)
    NOTEQUAL        reduce using rule 99 (closeBracket -> RBRACKET .)
    AND             reduce using rule 99 (closeBracket -> RBRACKET .)
    OR              reduce using rule 99 (closeBracket -> RBRACKET .)
    SEMICOLON       reduce using rule 99 (closeBracket -> RBRACKET .)
    COMA            reduce using rule 99 (closeBracket -> RBRACKET .)
    LPAREN          reduce using rule 99 (closeBracket -> RBRACKET .)
    RPAREN          reduce using rule 99 (closeBracket -> RBRACKET .)
    RBRACKET        reduce using rule 99 (closeBracket -> RBRACKET .)
    LBRACKET        reduce using rule 99 (closeBracket -> RBRACKET .)


state 143

    (94) arr -> callArr openBracket expresion . abracket matrix
    (95) arr -> callArr openBracket expresion . abracket epsilon
    (100) abracket -> . closeBracket
    (99) closeBracket -> . RBRACKET

    RBRACKET        shift and go to state 142

    abracket                       shift and go to state 155
    closeBracket                   shift and go to state 156

state 144

    (6) var -> vardef COLON tipo SEMICOLON .

    VAR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    ID              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    IF              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    WHILE           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FOR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    PRINT           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    BREAK           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    DO              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)


state 145

    (92) declaracionArr -> arrDef LBRACKET INT RBRACKET . COLON tipo
    (93) declaracionMatrix -> arrDef LBRACKET INT RBRACKET . LBRACKET INT RBRACKET COLON tipo

    COLON           shift and go to state 158
    LBRACKET        shift and go to state 157


state 146

    (50) condicion -> IF LPAREN expresion endCondition bloque . condicionelse
    (53) condicionelse -> . else bloque
    (54) condicionelse -> . epsilon
    (55) else -> . ELSE
    (90) epsilon -> .

    ELSE            shift and go to state 162
    SEMICOLON       reduce using rule 90 (epsilon -> .)

    condicionelse                  shift and go to state 159
    else                           shift and go to state 160
    epsilon                        shift and go to state 161

state 147

    (46) whileLoop -> WHILE startCondition expresion endCondition bloque .

    SEMICOLON       reduce using rule 46 (whileLoop -> WHILE startCondition expresion endCondition bloque .)


state 148

    (44) doWhile -> do bloque WHILE LPAREN expresion . RPAREN

    RPAREN          shift and go to state 163


state 149

    (49) forLoop -> FOR LPAREN argumentos startCondition expresion . endCondition asignacion RPAREN bloque
    (51) endCondition -> . RPAREN
    (52) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 122
    SEMICOLON       shift and go to state 123

    endCondition                   shift and go to state 164

state 150

    (74) args -> args COMA args .
    (74) args -> args . COMA args

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 74 (args -> args COMA args .)
    SEMICOLON       reduce using rule 74 (args -> args COMA args .)
    COMA            shift and go to state 127

  ! COMA            [ reduce using rule 74 (args -> args COMA args .) ]


state 151

    (32) escrito -> impr COMA escrito .

    RPAREN          reduce using rule 32 (escrito -> impr COMA escrito .)


state 152

    (56) funcion -> FUNCTION funcdef LPAREN declaracion addArgs . RPAREN COLON tiposreturn

    RPAREN          shift and go to state 165


state 153

    (57) addArgs -> epsilon .

    RPAREN          reduce using rule 57 (addArgs -> epsilon .)


state 154

    (68) funcArgs -> funcArgs COMA funcArgs .
    (68) funcArgs -> funcArgs . COMA funcArgs

  ! shift/reduce conflict for COMA resolved as shift
    RPAREN          reduce using rule 68 (funcArgs -> funcArgs COMA funcArgs .)
    COMA            shift and go to state 132

  ! COMA            [ reduce using rule 68 (funcArgs -> funcArgs COMA funcArgs .) ]


state 155

    (94) arr -> callArr openBracket expresion abracket . matrix
    (95) arr -> callArr openBracket expresion abracket . epsilon
    (97) matrix -> . openBracket expresion mbracket
    (90) epsilon -> .
    (98) openBracket -> . LBRACKET

    TIMES           reduce using rule 90 (epsilon -> .)
    DIVIDE          reduce using rule 90 (epsilon -> .)
    DIFF            reduce using rule 90 (epsilon -> .)
    EXP             reduce using rule 90 (epsilon -> .)
    PLUS            reduce using rule 90 (epsilon -> .)
    MINUS           reduce using rule 90 (epsilon -> .)
    LESSTHAN        reduce using rule 90 (epsilon -> .)
    MORETHAN        reduce using rule 90 (epsilon -> .)
    ISEQUAL         reduce using rule 90 (epsilon -> .)
    NOTEQUAL        reduce using rule 90 (epsilon -> .)
    AND             reduce using rule 90 (epsilon -> .)
    OR              reduce using rule 90 (epsilon -> .)
    SEMICOLON       reduce using rule 90 (epsilon -> .)
    COMA            reduce using rule 90 (epsilon -> .)
    LPAREN          reduce using rule 90 (epsilon -> .)
    RPAREN          reduce using rule 90 (epsilon -> .)
    RBRACKET        reduce using rule 90 (epsilon -> .)
    LBRACKET        shift and go to state 75

    openBracket                    shift and go to state 73
    matrix                         shift and go to state 166
    epsilon                        shift and go to state 167

state 156

    (100) abracket -> closeBracket .

    LBRACKET        reduce using rule 100 (abracket -> closeBracket .)
    TIMES           reduce using rule 100 (abracket -> closeBracket .)
    DIVIDE          reduce using rule 100 (abracket -> closeBracket .)
    DIFF            reduce using rule 100 (abracket -> closeBracket .)
    EXP             reduce using rule 100 (abracket -> closeBracket .)
    PLUS            reduce using rule 100 (abracket -> closeBracket .)
    MINUS           reduce using rule 100 (abracket -> closeBracket .)
    LESSTHAN        reduce using rule 100 (abracket -> closeBracket .)
    MORETHAN        reduce using rule 100 (abracket -> closeBracket .)
    ISEQUAL         reduce using rule 100 (abracket -> closeBracket .)
    NOTEQUAL        reduce using rule 100 (abracket -> closeBracket .)
    AND             reduce using rule 100 (abracket -> closeBracket .)
    OR              reduce using rule 100 (abracket -> closeBracket .)
    SEMICOLON       reduce using rule 100 (abracket -> closeBracket .)
    COMA            reduce using rule 100 (abracket -> closeBracket .)
    LPAREN          reduce using rule 100 (abracket -> closeBracket .)
    RPAREN          reduce using rule 100 (abracket -> closeBracket .)
    RBRACKET        reduce using rule 100 (abracket -> closeBracket .)


state 157

    (93) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET . INT RBRACKET COLON tipo

    INT             shift and go to state 168


state 158

    (92) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 116
    FLOAT           shift and go to state 117
    BOOL            shift and go to state 118
    STRING          shift and go to state 119

    tipo                           shift and go to state 169

state 159

    (50) condicion -> IF LPAREN expresion endCondition bloque condicionelse .

    SEMICOLON       reduce using rule 50 (condicion -> IF LPAREN expresion endCondition bloque condicionelse .)


state 160

    (53) condicionelse -> else . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 170

state 161

    (54) condicionelse -> epsilon .

    SEMICOLON       reduce using rule 54 (condicionelse -> epsilon .)


state 162

    (55) else -> ELSE .

    LCURLY          reduce using rule 55 (else -> ELSE .)


state 163

    (44) doWhile -> do bloque WHILE LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 44 (doWhile -> do bloque WHILE LPAREN expresion RPAREN .)


state 164

    (49) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition . asignacion RPAREN bloque
    (29) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 88

    asignacion                     shift and go to state 171

state 165

    (56) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN . COLON tiposreturn

    COLON           shift and go to state 172


state 166

    (94) arr -> callArr openBracket expresion abracket matrix .

    TIMES           reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    DIVIDE          reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    DIFF            reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    EXP             reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    PLUS            reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    MINUS           reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    LESSTHAN        reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    MORETHAN        reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    ISEQUAL         reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    NOTEQUAL        reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    AND             reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    OR              reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    SEMICOLON       reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    COMA            reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    LPAREN          reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    RPAREN          reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)
    RBRACKET        reduce using rule 94 (arr -> callArr openBracket expresion abracket matrix .)


state 167

    (95) arr -> callArr openBracket expresion abracket epsilon .

    TIMES           reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    DIVIDE          reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    DIFF            reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    EXP             reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    PLUS            reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    MINUS           reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    LESSTHAN        reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    MORETHAN        reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    ISEQUAL         reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    NOTEQUAL        reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    AND             reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    OR              reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    SEMICOLON       reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    COMA            reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    LPAREN          reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    RPAREN          reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)
    RBRACKET        reduce using rule 95 (arr -> callArr openBracket expresion abracket epsilon .)


state 168

    (93) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT . RBRACKET COLON tipo

    RBRACKET        shift and go to state 173


state 169

    (92) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 92 (declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .)


state 170

    (53) condicionelse -> else bloque .

    SEMICOLON       reduce using rule 53 (condicionelse -> else bloque .)


state 171

    (49) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion . RPAREN bloque

    RPAREN          shift and go to state 174


state 172

    (56) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON . tiposreturn
    (59) tiposreturn -> . tiposFuncion bloqueReturn
    (60) tiposreturn -> . VOID bloque
    (61) tiposFuncion -> . INT
    (62) tiposFuncion -> . FLOAT
    (63) tiposFuncion -> . BOOL
    (64) tiposFuncion -> . STRING

    VOID            shift and go to state 177
    INT             shift and go to state 178
    FLOAT           shift and go to state 179
    BOOL            shift and go to state 180
    STRING          shift and go to state 181

    tiposreturn                    shift and go to state 175
    tiposFuncion                   shift and go to state 176

state 173

    (93) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET . COLON tipo

    COLON           shift and go to state 182


state 174

    (49) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 183

state 175

    (56) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .

    SEMICOLON       reduce using rule 56 (funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .)


state 176

    (59) tiposreturn -> tiposFuncion . bloqueReturn
    (15) bloqueReturn -> . LCURLY declaracion estatutoExp returnexp RCURLY

    LCURLY          shift and go to state 185

    bloqueReturn                   shift and go to state 184

state 177

    (60) tiposreturn -> VOID . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 186

state 178

    (61) tiposFuncion -> INT .

    LCURLY          reduce using rule 61 (tiposFuncion -> INT .)


state 179

    (62) tiposFuncion -> FLOAT .

    LCURLY          reduce using rule 62 (tiposFuncion -> FLOAT .)


state 180

    (63) tiposFuncion -> BOOL .

    LCURLY          reduce using rule 63 (tiposFuncion -> BOOL .)


state 181

    (64) tiposFuncion -> STRING .

    LCURLY          reduce using rule 64 (tiposFuncion -> STRING .)


state 182

    (93) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 116
    FLOAT           shift and go to state 117
    BOOL            shift and go to state 118
    STRING          shift and go to state 119

    tipo                           shift and go to state 187

state 183

    (49) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .

    SEMICOLON       reduce using rule 49 (forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .)


state 184

    (59) tiposreturn -> tiposFuncion bloqueReturn .

    SEMICOLON       reduce using rule 59 (tiposreturn -> tiposFuncion bloqueReturn .)


state 185

    (15) bloqueReturn -> LCURLY . declaracion estatutoExp returnexp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (90) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 90 (epsilon -> .)
    IF              reduce using rule 90 (epsilon -> .)
    WHILE           reduce using rule 90 (epsilon -> .)
    FOR             reduce using rule 90 (epsilon -> .)
    PRINT           reduce using rule 90 (epsilon -> .)
    FUNCTION        reduce using rule 90 (epsilon -> .)
    BREAK           reduce using rule 90 (epsilon -> .)
    DO              reduce using rule 90 (epsilon -> .)

    declaracion                    shift and go to state 188
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 186

    (60) tiposreturn -> VOID bloque .

    SEMICOLON       reduce using rule 60 (tiposreturn -> VOID bloque .)


state 187

    (93) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 93 (declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .)


state 188

    (15) bloqueReturn -> LCURLY declaracion . estatutoExp returnexp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (50) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (46) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (44) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (49) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (30) escritura -> . PRINT LPAREN escrito RPAREN
    (56) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (65) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (45) do -> . DO
    (66) funCall -> . ID

    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 26
    PRINT           shift and go to state 27
    FUNCTION        shift and go to state 28
    BREAK           shift and go to state 30
    DO              shift and go to state 31

    estatutoExp                    shift and go to state 189
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    do                             shift and go to state 25
    funCall                        shift and go to state 29

state 189

    (15) bloqueReturn -> LCURLY declaracion estatutoExp . returnexp RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (28) returnexp -> . RETURN expresion SEMICOLON
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (50) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (46) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (44) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (49) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (30) escritura -> . PRINT LPAREN escrito RPAREN
    (56) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (65) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (45) do -> . DO
    (66) funCall -> . ID

    RETURN          shift and go to state 191
    ID              shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 26
    PRINT           shift and go to state 27
    FUNCTION        shift and go to state 28
    BREAK           shift and go to state 30
    DO              shift and go to state 31

    estatutoExp                    shift and go to state 39
    returnexp                      shift and go to state 190
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    do                             shift and go to state 25
    funCall                        shift and go to state 29

state 190

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp . RCURLY

    RCURLY          shift and go to state 192


state 191

    (28) returnexp -> RETURN . expresion SEMICOLON
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . functionCall
    (75) exp -> . termino
    (76) exp -> . termino signo exp
    (37) condition -> . exp comparacion expresion
    (65) functionCall -> . funCall lparen funcArgs rparen
    (79) termino -> . factor
    (80) termino -> . factor operacion termino
    (66) funCall -> . ID
    (85) factor -> . varcte
    (86) factor -> . lparen expresion rparen
    (87) factor -> . functionCall
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (88) lparen -> . LPAREN
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (97) matrix -> . openBracket expresion mbracket
    (94) arr -> . callArr openBracket expresion abracket matrix
    (95) arr -> . callArr openBracket expresion abracket epsilon
    (98) openBracket -> . LBRACKET
    (96) callArr -> . ID

    ID              shift and go to state 61
    LPAREN          shift and go to state 53
    INT             shift and go to state 69
    FLOAT           shift and go to state 70
    BOOL            shift and go to state 71
    STRING          shift and go to state 72
    LBRACKET        shift and go to state 75

    expresion                      shift and go to state 193
    exp                            shift and go to state 55
    condition                      shift and go to state 56
    functionCall                   shift and go to state 57
    termino                        shift and go to state 58
    funCall                        shift and go to state 29
    lparen                         shift and go to state 59
    factor                         shift and go to state 60
    varcte                         shift and go to state 62
    int                            shift and go to state 63
    float                          shift and go to state 64
    bool                           shift and go to state 65
    string                         shift and go to state 66
    matrix                         shift and go to state 67
    arr                            shift and go to state 68
    openBracket                    shift and go to state 73
    callArr                        shift and go to state 74

state 192

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .

    SEMICOLON       reduce using rule 15 (bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .)


state 193

    (28) returnexp -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 194


state 194

    (28) returnexp -> RETURN expresion SEMICOLON .

    RCURLY          reduce using rule 28 (returnexp -> RETURN expresion SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 39 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 39 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 39 resolved as shift
WARNING: shift/reduce conflict for DO in state 39 resolved as shift
WARNING: shift/reduce conflict for COMA in state 150 resolved as shift
WARNING: shift/reduce conflict for COMA in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (expresion -> functionCall)
WARNING: rejected rule (factor -> functionCall) in state 57
WARNING: reduce/reduce conflict in state 61 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 61
WARNING: reduce/reduce conflict in state 137 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 137
