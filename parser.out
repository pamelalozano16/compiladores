Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTEF
    CTEL

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START LPAREN RPAREN bloque
Rule 2     declaracion -> vars
Rule 3     declaracion -> epsilon
Rule 4     vars -> VAR var
Rule 5     vars -> vars vars
Rule 6     var -> vardef COLON tipo SEMICOLON
Rule 7     vardef -> ID
Rule 8     tipo -> INT
Rule 9     tipo -> FLOAT
Rule 10    tipo -> BOOL
Rule 11    tipo -> STRING
Rule 12    lista -> ID
Rule 13    lista -> ID COMA
Rule 14    arreglo -> LBRACKET lista RBRACKET
Rule 15    bloque -> LCURLY declaracion estatutoExp RCURLY
Rule 16    bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY
Rule 17    estatutoExp -> estatuto SEMICOLON
Rule 18    estatutoExp -> estatutoExp estatutoExp
Rule 19    estatuto -> asignacion
Rule 20    estatuto -> condicion
Rule 21    estatuto -> whileLoop
Rule 22    estatuto -> doWhile
Rule 23    estatuto -> forLoop
Rule 24    estatuto -> escritura
Rule 25    estatuto -> funcion
Rule 26    estatuto -> functionCall
Rule 27    returnexp -> RETURN expresion SEMICOLON
Rule 28    asignacion -> ID EQUAL expresion
Rule 29    escritura -> PRINT LPAREN escrito RPAREN
Rule 30    escrito -> impr
Rule 31    escrito -> impr COMA impr
Rule 32    impr -> STRING
Rule 33    impr -> expresion
Rule 34    expresion -> exp
Rule 35    expresion -> condition
Rule 36    expresion -> arreglo
Rule 37    expresion -> functionCall
Rule 38    condition -> exp comparacion expresion
Rule 39    comparacion -> LESSTHAN
Rule 40    comparacion -> MORETHAN
Rule 41    comparacion -> ISEQUAL
Rule 42    comparacion -> NOTEQUAL
Rule 43    comparacion -> AND
Rule 44    comparacion -> OR
Rule 45    doWhile -> do bloque WHILE LPAREN addCheckBool expresion RPAREN
Rule 46    do -> DO
Rule 47    whileLoop -> WHILE startCondition addCheckBool expresion endCondition bloque
Rule 48    addCheckBool -> epsilon
Rule 49    startCondition -> LPAREN
Rule 50    startCondition -> SEMICOLON
Rule 51    forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
Rule 52    condicion -> IF LPAREN addCheckBool expresion endCondition bloque condicionelse
Rule 53    endCondition -> RPAREN
Rule 54    endCondition -> SEMICOLON
Rule 55    condicionelse -> else bloque
Rule 56    condicionelse -> epsilon
Rule 57    else -> ELSE
Rule 58    funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
Rule 59    addArgs -> epsilon
Rule 60    funcdef -> ID
Rule 61    tiposreturn -> tipo bloqueReturn
Rule 62    tiposreturn -> VOID bloque
Rule 63    functionCall -> funCall LPAREN funcArgs RPAREN
Rule 64    funCall -> ID
Rule 65    funcArgs -> checkArgs
Rule 66    funcArgs -> funcArgs COMA funcArgs
Rule 67    funcArgs -> epsilon
Rule 68    checkArgs -> ID EQUAL expresion
Rule 69    argumentos -> args
Rule 70    argumentos -> epsilon
Rule 71    args -> asignacion
Rule 72    args -> args COMA args
Rule 73    exp -> termino
Rule 74    exp -> termino signo exp
Rule 75    signo -> PLUS
Rule 76    signo -> MINUS
Rule 77    termino -> factor
Rule 78    termino -> factor operacion termino
Rule 79    operacion -> TIMES
Rule 80    operacion -> DIVIDE
Rule 81    operacion -> DIFF
Rule 82    operacion -> EXP
Rule 83    factor -> paren expresion paren
Rule 84    factor -> varcte
Rule 85    paren -> LPAREN
Rule 86    paren -> RPAREN
Rule 87    epsilon -> <empty>
Rule 88    varcte -> ID
Rule 89    varcte -> int
Rule 90    varcte -> float
Rule 91    varcte -> bool
Rule 92    varcte -> string
Rule 93    int -> INT
Rule 94    float -> FLOAT
Rule 95    bool -> BOOL
Rule 96    string -> STRING

Terminals, with rules where they appear

AND                  : 43
BOOL                 : 10 95
COLON                : 6 58
COMA                 : 13 31 66 72
CTEF                 : 
CTEL                 : 
DIFF                 : 81
DIVIDE               : 80
DO                   : 46
ELSE                 : 57
EQUAL                : 28 68
EXP                  : 82
FLOAT                : 9 94
FOR                  : 51
FUNCTION             : 58
ID                   : 7 12 13 28 60 64 68 88
IF                   : 52
INT                  : 8 93
ISEQUAL              : 41
LBRACKET             : 14
LCURLY               : 15 16
LESSTHAN             : 39
LPAREN               : 1 29 45 49 51 52 58 63 85
MINUS                : 76
MORETHAN             : 40
NOTEQUAL             : 42
OR                   : 44
PLUS                 : 75
PRINT                : 29
RBRACKET             : 14
RCURLY               : 15 16
RETURN               : 27
RPAREN               : 1 29 45 51 53 58 63 86
SEMICOLON            : 6 17 27 50 54
START                : 1
STRING               : 11 32 96
TIMES                : 79
VAR                  : 4
VOID                 : 62
WHILE                : 45 47
error                : 

Nonterminals, with rules where they appear

addArgs              : 58
addCheckBool         : 45 47 52
args                 : 69 72 72
argumentos           : 51
arreglo              : 36
asignacion           : 19 51 71
bloque               : 1 45 47 51 52 55 62
bloqueReturn         : 61
bool                 : 91
checkArgs            : 65
comparacion          : 38
condicion            : 20
condicionelse        : 52
condition            : 35
declaracion          : 15 16 58
do                   : 45
doWhile              : 22
else                 : 55
endCondition         : 47 51 52
epsilon              : 3 48 56 59 67 70
escrito              : 29
escritura            : 24
estatuto             : 17
estatutoExp          : 15 16 18 18
exp                  : 34 38 74
expresion            : 27 28 33 38 45 47 51 52 68 83
factor               : 77 78
float                : 90
forLoop              : 23
funCall              : 63
funcArgs             : 63 66 66
funcdef              : 58
funcion              : 25
functionCall         : 26 37
impr                 : 30 31 31
int                  : 89
lista                : 14
operacion            : 78
paren                : 83 83
programa             : 0
returnexp            : 16
signo                : 74
startCondition       : 47 51
string               : 92
termino              : 73 74 78
tipo                 : 6 61
tiposreturn          : 58
var                  : 4
varcte               : 84
vardef               : 6
vars                 : 2 5 5
whileLoop            : 21

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START LPAREN RPAREN bloque

    START           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> START . LPAREN RPAREN bloque

    LPAREN          shift and go to state 3


state 3

    (1) programa -> START LPAREN . RPAREN bloque

    RPAREN          shift and go to state 4


state 4

    (1) programa -> START LPAREN RPAREN . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 5

state 5

    (1) programa -> START LPAREN RPAREN bloque .

    $end            reduce using rule 1 (programa -> START LPAREN RPAREN bloque .)


state 6

    (15) bloque -> LCURLY . declaracion estatutoExp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (87) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 87 (epsilon -> .)
    IF              reduce using rule 87 (epsilon -> .)
    WHILE           reduce using rule 87 (epsilon -> .)
    FOR             reduce using rule 87 (epsilon -> .)
    PRINT           reduce using rule 87 (epsilon -> .)
    FUNCTION        reduce using rule 87 (epsilon -> .)
    DO              reduce using rule 87 (epsilon -> .)

    declaracion                    shift and go to state 7
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 7

    (15) bloque -> LCURLY declaracion . estatutoExp RCURLY
    (17) estatutoExp -> . estatuto SEMICOLON
    (18) estatutoExp -> . estatutoExp estatutoExp
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (28) asignacion -> . ID EQUAL expresion
    (52) condicion -> . IF LPAREN addCheckBool expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition addCheckBool expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN addCheckBool expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (29) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (46) do -> . DO
    (64) funCall -> . ID

    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 11
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 8

    (2) declaracion -> vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

    ID              reduce using rule 2 (declaracion -> vars .)
    IF              reduce using rule 2 (declaracion -> vars .)
    WHILE           reduce using rule 2 (declaracion -> vars .)
    FOR             reduce using rule 2 (declaracion -> vars .)
    PRINT           reduce using rule 2 (declaracion -> vars .)
    FUNCTION        reduce using rule 2 (declaracion -> vars .)
    DO              reduce using rule 2 (declaracion -> vars .)
    RPAREN          reduce using rule 2 (declaracion -> vars .)
    VAR             shift and go to state 10

    vars                           shift and go to state 30

state 9

    (3) declaracion -> epsilon .

    ID              reduce using rule 3 (declaracion -> epsilon .)
    IF              reduce using rule 3 (declaracion -> epsilon .)
    WHILE           reduce using rule 3 (declaracion -> epsilon .)
    FOR             reduce using rule 3 (declaracion -> epsilon .)
    PRINT           reduce using rule 3 (declaracion -> epsilon .)
    FUNCTION        reduce using rule 3 (declaracion -> epsilon .)
    DO              reduce using rule 3 (declaracion -> epsilon .)
    RPAREN          reduce using rule 3 (declaracion -> epsilon .)


state 10

    (4) vars -> VAR . var
    (6) var -> . vardef COLON tipo SEMICOLON
    (7) vardef -> . ID

    ID              shift and go to state 33

    var                            shift and go to state 31
    vardef                         shift and go to state 32

state 11

    (15) bloque -> LCURLY declaracion estatutoExp . RCURLY
    (18) estatutoExp -> estatutoExp . estatutoExp
    (17) estatutoExp -> . estatuto SEMICOLON
    (18) estatutoExp -> . estatutoExp estatutoExp
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (28) asignacion -> . ID EQUAL expresion
    (52) condicion -> . IF LPAREN addCheckBool expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition addCheckBool expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN addCheckBool expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (29) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (46) do -> . DO
    (64) funCall -> . ID

    RCURLY          shift and go to state 35
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 34
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 12

    (17) estatutoExp -> estatuto . SEMICOLON

    SEMICOLON       shift and go to state 36


state 13

    (19) estatuto -> asignacion .

    SEMICOLON       reduce using rule 19 (estatuto -> asignacion .)


state 14

    (20) estatuto -> condicion .

    SEMICOLON       reduce using rule 20 (estatuto -> condicion .)


state 15

    (21) estatuto -> whileLoop .

    SEMICOLON       reduce using rule 21 (estatuto -> whileLoop .)


state 16

    (22) estatuto -> doWhile .

    SEMICOLON       reduce using rule 22 (estatuto -> doWhile .)


state 17

    (23) estatuto -> forLoop .

    SEMICOLON       reduce using rule 23 (estatuto -> forLoop .)


state 18

    (24) estatuto -> escritura .

    SEMICOLON       reduce using rule 24 (estatuto -> escritura .)


state 19

    (25) estatuto -> funcion .

    SEMICOLON       reduce using rule 25 (estatuto -> funcion .)


state 20

    (26) estatuto -> functionCall .

    SEMICOLON       reduce using rule 26 (estatuto -> functionCall .)


state 21

    (28) asignacion -> ID . EQUAL expresion
    (64) funCall -> ID .

    EQUAL           shift and go to state 37
    LPAREN          reduce using rule 64 (funCall -> ID .)


state 22

    (52) condicion -> IF . LPAREN addCheckBool expresion endCondition bloque condicionelse

    LPAREN          shift and go to state 38


state 23

    (47) whileLoop -> WHILE . startCondition addCheckBool expresion endCondition bloque
    (49) startCondition -> . LPAREN
    (50) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 40
    SEMICOLON       shift and go to state 41

    startCondition                 shift and go to state 39

state 24

    (45) doWhile -> do . bloque WHILE LPAREN addCheckBool expresion RPAREN
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 42

state 25

    (51) forLoop -> FOR . LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque

    LPAREN          shift and go to state 43


state 26

    (29) escritura -> PRINT . LPAREN escrito RPAREN

    LPAREN          shift and go to state 44


state 27

    (58) funcion -> FUNCTION . funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (60) funcdef -> . ID

    ID              shift and go to state 46

    funcdef                        shift and go to state 45

state 28

    (63) functionCall -> funCall . LPAREN funcArgs RPAREN

    LPAREN          shift and go to state 47


state 29

    (46) do -> DO .

    LCURLY          reduce using rule 46 (do -> DO .)


state 30

    (5) vars -> vars vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 5 (vars -> vars vars .)
    IF              reduce using rule 5 (vars -> vars vars .)
    WHILE           reduce using rule 5 (vars -> vars vars .)
    FOR             reduce using rule 5 (vars -> vars vars .)
    PRINT           reduce using rule 5 (vars -> vars vars .)
    FUNCTION        reduce using rule 5 (vars -> vars vars .)
    DO              reduce using rule 5 (vars -> vars vars .)
    RPAREN          reduce using rule 5 (vars -> vars vars .)
    VAR             shift and go to state 10

  ! VAR             [ reduce using rule 5 (vars -> vars vars .) ]

    vars                           shift and go to state 30

state 31

    (4) vars -> VAR var .

    VAR             reduce using rule 4 (vars -> VAR var .)
    ID              reduce using rule 4 (vars -> VAR var .)
    IF              reduce using rule 4 (vars -> VAR var .)
    WHILE           reduce using rule 4 (vars -> VAR var .)
    FOR             reduce using rule 4 (vars -> VAR var .)
    PRINT           reduce using rule 4 (vars -> VAR var .)
    FUNCTION        reduce using rule 4 (vars -> VAR var .)
    DO              reduce using rule 4 (vars -> VAR var .)
    RPAREN          reduce using rule 4 (vars -> VAR var .)


state 32

    (6) var -> vardef . COLON tipo SEMICOLON

    COLON           shift and go to state 48


state 33

    (7) vardef -> ID .

    COLON           reduce using rule 7 (vardef -> ID .)


state 34

    (18) estatutoExp -> estatutoExp estatutoExp .
    (18) estatutoExp -> estatutoExp . estatutoExp
    (17) estatutoExp -> . estatuto SEMICOLON
    (18) estatutoExp -> . estatutoExp estatutoExp
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (28) asignacion -> . ID EQUAL expresion
    (52) condicion -> . IF LPAREN addCheckBool expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition addCheckBool expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN addCheckBool expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (29) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (46) do -> . DO
    (64) funCall -> . ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    RCURLY          reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .)
    RETURN          reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .)
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

  ! ID              [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! IF              [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! WHILE           [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FOR             [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! PRINT           [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FUNCTION        [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! DO              [ reduce using rule 18 (estatutoExp -> estatutoExp estatutoExp .) ]

    estatutoExp                    shift and go to state 34
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 35

    (15) bloque -> LCURLY declaracion estatutoExp RCURLY .

    $end            reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    WHILE           reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    ELSE            reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    SEMICOLON       reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)


state 36

    (17) estatutoExp -> estatuto SEMICOLON .

    RCURLY          reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    ID              reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    IF              reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    WHILE           reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    FOR             reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    PRINT           reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    FUNCTION        reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    DO              reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)
    RETURN          reduce using rule 17 (estatutoExp -> estatuto SEMICOLON .)


state 37

    (28) asignacion -> ID EQUAL . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 50
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 38

    (52) condicion -> IF LPAREN . addCheckBool expresion endCondition bloque condicionelse
    (48) addCheckBool -> . epsilon
    (87) epsilon -> .

    LBRACKET        reduce using rule 87 (epsilon -> .)
    ID              reduce using rule 87 (epsilon -> .)
    LPAREN          reduce using rule 87 (epsilon -> .)
    RPAREN          reduce using rule 87 (epsilon -> .)
    INT             reduce using rule 87 (epsilon -> .)
    FLOAT           reduce using rule 87 (epsilon -> .)
    BOOL            reduce using rule 87 (epsilon -> .)
    STRING          reduce using rule 87 (epsilon -> .)

    addCheckBool                   shift and go to state 70
    epsilon                        shift and go to state 71

state 39

    (47) whileLoop -> WHILE startCondition . addCheckBool expresion endCondition bloque
    (48) addCheckBool -> . epsilon
    (87) epsilon -> .

    LBRACKET        reduce using rule 87 (epsilon -> .)
    ID              reduce using rule 87 (epsilon -> .)
    LPAREN          reduce using rule 87 (epsilon -> .)
    RPAREN          reduce using rule 87 (epsilon -> .)
    INT             reduce using rule 87 (epsilon -> .)
    FLOAT           reduce using rule 87 (epsilon -> .)
    BOOL            reduce using rule 87 (epsilon -> .)
    STRING          reduce using rule 87 (epsilon -> .)

    addCheckBool                   shift and go to state 72
    epsilon                        shift and go to state 71

state 40

    (49) startCondition -> LPAREN .

    LBRACKET        reduce using rule 49 (startCondition -> LPAREN .)
    ID              reduce using rule 49 (startCondition -> LPAREN .)
    LPAREN          reduce using rule 49 (startCondition -> LPAREN .)
    RPAREN          reduce using rule 49 (startCondition -> LPAREN .)
    INT             reduce using rule 49 (startCondition -> LPAREN .)
    FLOAT           reduce using rule 49 (startCondition -> LPAREN .)
    BOOL            reduce using rule 49 (startCondition -> LPAREN .)
    STRING          reduce using rule 49 (startCondition -> LPAREN .)


state 41

    (50) startCondition -> SEMICOLON .

    LBRACKET        reduce using rule 50 (startCondition -> SEMICOLON .)
    ID              reduce using rule 50 (startCondition -> SEMICOLON .)
    LPAREN          reduce using rule 50 (startCondition -> SEMICOLON .)
    RPAREN          reduce using rule 50 (startCondition -> SEMICOLON .)
    INT             reduce using rule 50 (startCondition -> SEMICOLON .)
    FLOAT           reduce using rule 50 (startCondition -> SEMICOLON .)
    BOOL            reduce using rule 50 (startCondition -> SEMICOLON .)
    STRING          reduce using rule 50 (startCondition -> SEMICOLON .)


state 42

    (45) doWhile -> do bloque . WHILE LPAREN addCheckBool expresion RPAREN

    WHILE           shift and go to state 73


state 43

    (51) forLoop -> FOR LPAREN . argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (69) argumentos -> . args
    (70) argumentos -> . epsilon
    (71) args -> . asignacion
    (72) args -> . args COMA args
    (87) epsilon -> .
    (28) asignacion -> . ID EQUAL expresion

    LPAREN          reduce using rule 87 (epsilon -> .)
    SEMICOLON       reduce using rule 87 (epsilon -> .)
    ID              shift and go to state 78

    argumentos                     shift and go to state 74
    asignacion                     shift and go to state 75
    args                           shift and go to state 76
    epsilon                        shift and go to state 77

state 44

    (29) escritura -> PRINT LPAREN . escrito RPAREN
    (30) escrito -> . impr
    (31) escrito -> . impr COMA impr
    (32) impr -> . STRING
    (33) impr -> . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    STRING          shift and go to state 81
    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68

    escrito                        shift and go to state 79
    impr                           shift and go to state 80
    expresion                      shift and go to state 82
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 45

    (58) funcion -> FUNCTION funcdef . LPAREN declaracion addArgs RPAREN COLON tiposreturn

    LPAREN          shift and go to state 83


state 46

    (60) funcdef -> ID .

    LPAREN          reduce using rule 60 (funcdef -> ID .)


state 47

    (63) functionCall -> funCall LPAREN . funcArgs RPAREN
    (65) funcArgs -> . checkArgs
    (66) funcArgs -> . funcArgs COMA funcArgs
    (67) funcArgs -> . epsilon
    (68) checkArgs -> . ID EQUAL expresion
    (87) epsilon -> .

    ID              shift and go to state 87
    RPAREN          reduce using rule 87 (epsilon -> .)
    COMA            reduce using rule 87 (epsilon -> .)

    funcArgs                       shift and go to state 84
    checkArgs                      shift and go to state 85
    epsilon                        shift and go to state 86

state 48

    (6) var -> vardef COLON . tipo SEMICOLON
    (8) tipo -> . INT
    (9) tipo -> . FLOAT
    (10) tipo -> . BOOL
    (11) tipo -> . STRING

    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    BOOL            shift and go to state 91
    STRING          shift and go to state 92

    tipo                           shift and go to state 88

state 49

    (64) funCall -> ID .
    (88) varcte -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 64 (funCall -> ID .)
    LPAREN          reduce using rule 64 (funCall -> ID .)
    TIMES           reduce using rule 88 (varcte -> ID .)
    DIVIDE          reduce using rule 88 (varcte -> ID .)
    DIFF            reduce using rule 88 (varcte -> ID .)
    EXP             reduce using rule 88 (varcte -> ID .)
    PLUS            reduce using rule 88 (varcte -> ID .)
    MINUS           reduce using rule 88 (varcte -> ID .)
    LESSTHAN        reduce using rule 88 (varcte -> ID .)
    MORETHAN        reduce using rule 88 (varcte -> ID .)
    ISEQUAL         reduce using rule 88 (varcte -> ID .)
    NOTEQUAL        reduce using rule 88 (varcte -> ID .)
    AND             reduce using rule 88 (varcte -> ID .)
    OR              reduce using rule 88 (varcte -> ID .)
    SEMICOLON       reduce using rule 88 (varcte -> ID .)
    COMA            reduce using rule 88 (varcte -> ID .)
    RPAREN          reduce using rule 88 (varcte -> ID .)

  ! LPAREN          [ reduce using rule 88 (varcte -> ID .) ]


state 50

    (28) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 28 (asignacion -> ID EQUAL expresion .)
    COMA            reduce using rule 28 (asignacion -> ID EQUAL expresion .)
    LPAREN          reduce using rule 28 (asignacion -> ID EQUAL expresion .)
    RPAREN          reduce using rule 28 (asignacion -> ID EQUAL expresion .)


state 51

    (34) expresion -> exp .
    (38) condition -> exp . comparacion expresion
    (39) comparacion -> . LESSTHAN
    (40) comparacion -> . MORETHAN
    (41) comparacion -> . ISEQUAL
    (42) comparacion -> . NOTEQUAL
    (43) comparacion -> . AND
    (44) comparacion -> . OR

    SEMICOLON       reduce using rule 34 (expresion -> exp .)
    COMA            reduce using rule 34 (expresion -> exp .)
    LPAREN          reduce using rule 34 (expresion -> exp .)
    RPAREN          reduce using rule 34 (expresion -> exp .)
    LESSTHAN        shift and go to state 94
    MORETHAN        shift and go to state 95
    ISEQUAL         shift and go to state 96
    NOTEQUAL        shift and go to state 97
    AND             shift and go to state 98
    OR              shift and go to state 99

    comparacion                    shift and go to state 93

state 52

    (35) expresion -> condition .

    SEMICOLON       reduce using rule 35 (expresion -> condition .)
    COMA            reduce using rule 35 (expresion -> condition .)
    LPAREN          reduce using rule 35 (expresion -> condition .)
    RPAREN          reduce using rule 35 (expresion -> condition .)


state 53

    (36) expresion -> arreglo .

    SEMICOLON       reduce using rule 36 (expresion -> arreglo .)
    COMA            reduce using rule 36 (expresion -> arreglo .)
    LPAREN          reduce using rule 36 (expresion -> arreglo .)
    RPAREN          reduce using rule 36 (expresion -> arreglo .)


state 54

    (37) expresion -> functionCall .

    SEMICOLON       reduce using rule 37 (expresion -> functionCall .)
    COMA            reduce using rule 37 (expresion -> functionCall .)
    LPAREN          reduce using rule 37 (expresion -> functionCall .)
    RPAREN          reduce using rule 37 (expresion -> functionCall .)


state 55

    (73) exp -> termino .
    (74) exp -> termino . signo exp
    (75) signo -> . PLUS
    (76) signo -> . MINUS

    LESSTHAN        reduce using rule 73 (exp -> termino .)
    MORETHAN        reduce using rule 73 (exp -> termino .)
    ISEQUAL         reduce using rule 73 (exp -> termino .)
    NOTEQUAL        reduce using rule 73 (exp -> termino .)
    AND             reduce using rule 73 (exp -> termino .)
    OR              reduce using rule 73 (exp -> termino .)
    SEMICOLON       reduce using rule 73 (exp -> termino .)
    COMA            reduce using rule 73 (exp -> termino .)
    LPAREN          reduce using rule 73 (exp -> termino .)
    RPAREN          reduce using rule 73 (exp -> termino .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102

    signo                          shift and go to state 100

state 56

    (14) arreglo -> LBRACKET . lista RBRACKET
    (12) lista -> . ID
    (13) lista -> . ID COMA

    ID              shift and go to state 104

    lista                          shift and go to state 103

state 57

    (85) paren -> LPAREN .

    LBRACKET        reduce using rule 85 (paren -> LPAREN .)
    ID              reduce using rule 85 (paren -> LPAREN .)
    LPAREN          reduce using rule 85 (paren -> LPAREN .)
    RPAREN          reduce using rule 85 (paren -> LPAREN .)
    INT             reduce using rule 85 (paren -> LPAREN .)
    FLOAT           reduce using rule 85 (paren -> LPAREN .)
    BOOL            reduce using rule 85 (paren -> LPAREN .)
    STRING          reduce using rule 85 (paren -> LPAREN .)
    TIMES           reduce using rule 85 (paren -> LPAREN .)
    DIVIDE          reduce using rule 85 (paren -> LPAREN .)
    DIFF            reduce using rule 85 (paren -> LPAREN .)
    EXP             reduce using rule 85 (paren -> LPAREN .)
    PLUS            reduce using rule 85 (paren -> LPAREN .)
    MINUS           reduce using rule 85 (paren -> LPAREN .)
    LESSTHAN        reduce using rule 85 (paren -> LPAREN .)
    MORETHAN        reduce using rule 85 (paren -> LPAREN .)
    ISEQUAL         reduce using rule 85 (paren -> LPAREN .)
    NOTEQUAL        reduce using rule 85 (paren -> LPAREN .)
    AND             reduce using rule 85 (paren -> LPAREN .)
    OR              reduce using rule 85 (paren -> LPAREN .)
    SEMICOLON       reduce using rule 85 (paren -> LPAREN .)
    COMA            reduce using rule 85 (paren -> LPAREN .)


state 58

    (86) paren -> RPAREN .

    LBRACKET        reduce using rule 86 (paren -> RPAREN .)
    ID              reduce using rule 86 (paren -> RPAREN .)
    LPAREN          reduce using rule 86 (paren -> RPAREN .)
    RPAREN          reduce using rule 86 (paren -> RPAREN .)
    INT             reduce using rule 86 (paren -> RPAREN .)
    FLOAT           reduce using rule 86 (paren -> RPAREN .)
    BOOL            reduce using rule 86 (paren -> RPAREN .)
    STRING          reduce using rule 86 (paren -> RPAREN .)
    TIMES           reduce using rule 86 (paren -> RPAREN .)
    DIVIDE          reduce using rule 86 (paren -> RPAREN .)
    DIFF            reduce using rule 86 (paren -> RPAREN .)
    EXP             reduce using rule 86 (paren -> RPAREN .)
    PLUS            reduce using rule 86 (paren -> RPAREN .)
    MINUS           reduce using rule 86 (paren -> RPAREN .)
    LESSTHAN        reduce using rule 86 (paren -> RPAREN .)
    MORETHAN        reduce using rule 86 (paren -> RPAREN .)
    ISEQUAL         reduce using rule 86 (paren -> RPAREN .)
    NOTEQUAL        reduce using rule 86 (paren -> RPAREN .)
    AND             reduce using rule 86 (paren -> RPAREN .)
    OR              reduce using rule 86 (paren -> RPAREN .)
    SEMICOLON       reduce using rule 86 (paren -> RPAREN .)
    COMA            reduce using rule 86 (paren -> RPAREN .)


state 59

    (77) termino -> factor .
    (78) termino -> factor . operacion termino
    (79) operacion -> . TIMES
    (80) operacion -> . DIVIDE
    (81) operacion -> . DIFF
    (82) operacion -> . EXP

    PLUS            reduce using rule 77 (termino -> factor .)
    MINUS           reduce using rule 77 (termino -> factor .)
    LESSTHAN        reduce using rule 77 (termino -> factor .)
    MORETHAN        reduce using rule 77 (termino -> factor .)
    ISEQUAL         reduce using rule 77 (termino -> factor .)
    NOTEQUAL        reduce using rule 77 (termino -> factor .)
    AND             reduce using rule 77 (termino -> factor .)
    OR              reduce using rule 77 (termino -> factor .)
    SEMICOLON       reduce using rule 77 (termino -> factor .)
    COMA            reduce using rule 77 (termino -> factor .)
    LPAREN          reduce using rule 77 (termino -> factor .)
    RPAREN          reduce using rule 77 (termino -> factor .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107
    DIFF            shift and go to state 108
    EXP             shift and go to state 109

    operacion                      shift and go to state 105

state 60

    (83) factor -> paren . expresion paren
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    paren                          shift and go to state 60
    expresion                      shift and go to state 110
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 61

    (84) factor -> varcte .

    TIMES           reduce using rule 84 (factor -> varcte .)
    DIVIDE          reduce using rule 84 (factor -> varcte .)
    DIFF            reduce using rule 84 (factor -> varcte .)
    EXP             reduce using rule 84 (factor -> varcte .)
    PLUS            reduce using rule 84 (factor -> varcte .)
    MINUS           reduce using rule 84 (factor -> varcte .)
    LESSTHAN        reduce using rule 84 (factor -> varcte .)
    MORETHAN        reduce using rule 84 (factor -> varcte .)
    ISEQUAL         reduce using rule 84 (factor -> varcte .)
    NOTEQUAL        reduce using rule 84 (factor -> varcte .)
    AND             reduce using rule 84 (factor -> varcte .)
    OR              reduce using rule 84 (factor -> varcte .)
    SEMICOLON       reduce using rule 84 (factor -> varcte .)
    COMA            reduce using rule 84 (factor -> varcte .)
    LPAREN          reduce using rule 84 (factor -> varcte .)
    RPAREN          reduce using rule 84 (factor -> varcte .)


state 62

    (89) varcte -> int .

    TIMES           reduce using rule 89 (varcte -> int .)
    DIVIDE          reduce using rule 89 (varcte -> int .)
    DIFF            reduce using rule 89 (varcte -> int .)
    EXP             reduce using rule 89 (varcte -> int .)
    PLUS            reduce using rule 89 (varcte -> int .)
    MINUS           reduce using rule 89 (varcte -> int .)
    LESSTHAN        reduce using rule 89 (varcte -> int .)
    MORETHAN        reduce using rule 89 (varcte -> int .)
    ISEQUAL         reduce using rule 89 (varcte -> int .)
    NOTEQUAL        reduce using rule 89 (varcte -> int .)
    AND             reduce using rule 89 (varcte -> int .)
    OR              reduce using rule 89 (varcte -> int .)
    SEMICOLON       reduce using rule 89 (varcte -> int .)
    COMA            reduce using rule 89 (varcte -> int .)
    LPAREN          reduce using rule 89 (varcte -> int .)
    RPAREN          reduce using rule 89 (varcte -> int .)


state 63

    (90) varcte -> float .

    TIMES           reduce using rule 90 (varcte -> float .)
    DIVIDE          reduce using rule 90 (varcte -> float .)
    DIFF            reduce using rule 90 (varcte -> float .)
    EXP             reduce using rule 90 (varcte -> float .)
    PLUS            reduce using rule 90 (varcte -> float .)
    MINUS           reduce using rule 90 (varcte -> float .)
    LESSTHAN        reduce using rule 90 (varcte -> float .)
    MORETHAN        reduce using rule 90 (varcte -> float .)
    ISEQUAL         reduce using rule 90 (varcte -> float .)
    NOTEQUAL        reduce using rule 90 (varcte -> float .)
    AND             reduce using rule 90 (varcte -> float .)
    OR              reduce using rule 90 (varcte -> float .)
    SEMICOLON       reduce using rule 90 (varcte -> float .)
    COMA            reduce using rule 90 (varcte -> float .)
    LPAREN          reduce using rule 90 (varcte -> float .)
    RPAREN          reduce using rule 90 (varcte -> float .)


state 64

    (91) varcte -> bool .

    TIMES           reduce using rule 91 (varcte -> bool .)
    DIVIDE          reduce using rule 91 (varcte -> bool .)
    DIFF            reduce using rule 91 (varcte -> bool .)
    EXP             reduce using rule 91 (varcte -> bool .)
    PLUS            reduce using rule 91 (varcte -> bool .)
    MINUS           reduce using rule 91 (varcte -> bool .)
    LESSTHAN        reduce using rule 91 (varcte -> bool .)
    MORETHAN        reduce using rule 91 (varcte -> bool .)
    ISEQUAL         reduce using rule 91 (varcte -> bool .)
    NOTEQUAL        reduce using rule 91 (varcte -> bool .)
    AND             reduce using rule 91 (varcte -> bool .)
    OR              reduce using rule 91 (varcte -> bool .)
    SEMICOLON       reduce using rule 91 (varcte -> bool .)
    COMA            reduce using rule 91 (varcte -> bool .)
    LPAREN          reduce using rule 91 (varcte -> bool .)
    RPAREN          reduce using rule 91 (varcte -> bool .)


state 65

    (92) varcte -> string .

    TIMES           reduce using rule 92 (varcte -> string .)
    DIVIDE          reduce using rule 92 (varcte -> string .)
    DIFF            reduce using rule 92 (varcte -> string .)
    EXP             reduce using rule 92 (varcte -> string .)
    PLUS            reduce using rule 92 (varcte -> string .)
    MINUS           reduce using rule 92 (varcte -> string .)
    LESSTHAN        reduce using rule 92 (varcte -> string .)
    MORETHAN        reduce using rule 92 (varcte -> string .)
    ISEQUAL         reduce using rule 92 (varcte -> string .)
    NOTEQUAL        reduce using rule 92 (varcte -> string .)
    AND             reduce using rule 92 (varcte -> string .)
    OR              reduce using rule 92 (varcte -> string .)
    SEMICOLON       reduce using rule 92 (varcte -> string .)
    COMA            reduce using rule 92 (varcte -> string .)
    LPAREN          reduce using rule 92 (varcte -> string .)
    RPAREN          reduce using rule 92 (varcte -> string .)


state 66

    (93) int -> INT .

    TIMES           reduce using rule 93 (int -> INT .)
    DIVIDE          reduce using rule 93 (int -> INT .)
    DIFF            reduce using rule 93 (int -> INT .)
    EXP             reduce using rule 93 (int -> INT .)
    PLUS            reduce using rule 93 (int -> INT .)
    MINUS           reduce using rule 93 (int -> INT .)
    LESSTHAN        reduce using rule 93 (int -> INT .)
    MORETHAN        reduce using rule 93 (int -> INT .)
    ISEQUAL         reduce using rule 93 (int -> INT .)
    NOTEQUAL        reduce using rule 93 (int -> INT .)
    AND             reduce using rule 93 (int -> INT .)
    OR              reduce using rule 93 (int -> INT .)
    SEMICOLON       reduce using rule 93 (int -> INT .)
    COMA            reduce using rule 93 (int -> INT .)
    LPAREN          reduce using rule 93 (int -> INT .)
    RPAREN          reduce using rule 93 (int -> INT .)


state 67

    (94) float -> FLOAT .

    TIMES           reduce using rule 94 (float -> FLOAT .)
    DIVIDE          reduce using rule 94 (float -> FLOAT .)
    DIFF            reduce using rule 94 (float -> FLOAT .)
    EXP             reduce using rule 94 (float -> FLOAT .)
    PLUS            reduce using rule 94 (float -> FLOAT .)
    MINUS           reduce using rule 94 (float -> FLOAT .)
    LESSTHAN        reduce using rule 94 (float -> FLOAT .)
    MORETHAN        reduce using rule 94 (float -> FLOAT .)
    ISEQUAL         reduce using rule 94 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 94 (float -> FLOAT .)
    AND             reduce using rule 94 (float -> FLOAT .)
    OR              reduce using rule 94 (float -> FLOAT .)
    SEMICOLON       reduce using rule 94 (float -> FLOAT .)
    COMA            reduce using rule 94 (float -> FLOAT .)
    LPAREN          reduce using rule 94 (float -> FLOAT .)
    RPAREN          reduce using rule 94 (float -> FLOAT .)


state 68

    (95) bool -> BOOL .

    TIMES           reduce using rule 95 (bool -> BOOL .)
    DIVIDE          reduce using rule 95 (bool -> BOOL .)
    DIFF            reduce using rule 95 (bool -> BOOL .)
    EXP             reduce using rule 95 (bool -> BOOL .)
    PLUS            reduce using rule 95 (bool -> BOOL .)
    MINUS           reduce using rule 95 (bool -> BOOL .)
    LESSTHAN        reduce using rule 95 (bool -> BOOL .)
    MORETHAN        reduce using rule 95 (bool -> BOOL .)
    ISEQUAL         reduce using rule 95 (bool -> BOOL .)
    NOTEQUAL        reduce using rule 95 (bool -> BOOL .)
    AND             reduce using rule 95 (bool -> BOOL .)
    OR              reduce using rule 95 (bool -> BOOL .)
    SEMICOLON       reduce using rule 95 (bool -> BOOL .)
    COMA            reduce using rule 95 (bool -> BOOL .)
    LPAREN          reduce using rule 95 (bool -> BOOL .)
    RPAREN          reduce using rule 95 (bool -> BOOL .)


state 69

    (96) string -> STRING .

    TIMES           reduce using rule 96 (string -> STRING .)
    DIVIDE          reduce using rule 96 (string -> STRING .)
    DIFF            reduce using rule 96 (string -> STRING .)
    EXP             reduce using rule 96 (string -> STRING .)
    PLUS            reduce using rule 96 (string -> STRING .)
    MINUS           reduce using rule 96 (string -> STRING .)
    LESSTHAN        reduce using rule 96 (string -> STRING .)
    MORETHAN        reduce using rule 96 (string -> STRING .)
    ISEQUAL         reduce using rule 96 (string -> STRING .)
    NOTEQUAL        reduce using rule 96 (string -> STRING .)
    AND             reduce using rule 96 (string -> STRING .)
    OR              reduce using rule 96 (string -> STRING .)
    SEMICOLON       reduce using rule 96 (string -> STRING .)
    COMA            reduce using rule 96 (string -> STRING .)
    LPAREN          reduce using rule 96 (string -> STRING .)
    RPAREN          reduce using rule 96 (string -> STRING .)


state 70

    (52) condicion -> IF LPAREN addCheckBool . expresion endCondition bloque condicionelse
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 111
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 71

    (48) addCheckBool -> epsilon .

    LBRACKET        reduce using rule 48 (addCheckBool -> epsilon .)
    ID              reduce using rule 48 (addCheckBool -> epsilon .)
    LPAREN          reduce using rule 48 (addCheckBool -> epsilon .)
    RPAREN          reduce using rule 48 (addCheckBool -> epsilon .)
    INT             reduce using rule 48 (addCheckBool -> epsilon .)
    FLOAT           reduce using rule 48 (addCheckBool -> epsilon .)
    BOOL            reduce using rule 48 (addCheckBool -> epsilon .)
    STRING          reduce using rule 48 (addCheckBool -> epsilon .)


state 72

    (47) whileLoop -> WHILE startCondition addCheckBool . expresion endCondition bloque
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 112
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 73

    (45) doWhile -> do bloque WHILE . LPAREN addCheckBool expresion RPAREN

    LPAREN          shift and go to state 113


state 74

    (51) forLoop -> FOR LPAREN argumentos . startCondition expresion endCondition asignacion RPAREN bloque
    (49) startCondition -> . LPAREN
    (50) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 40
    SEMICOLON       shift and go to state 41

    startCondition                 shift and go to state 114

state 75

    (71) args -> asignacion .

    COMA            reduce using rule 71 (args -> asignacion .)
    LPAREN          reduce using rule 71 (args -> asignacion .)
    SEMICOLON       reduce using rule 71 (args -> asignacion .)


state 76

    (69) argumentos -> args .
    (72) args -> args . COMA args

    LPAREN          reduce using rule 69 (argumentos -> args .)
    SEMICOLON       reduce using rule 69 (argumentos -> args .)
    COMA            shift and go to state 115


state 77

    (70) argumentos -> epsilon .

    LPAREN          reduce using rule 70 (argumentos -> epsilon .)
    SEMICOLON       reduce using rule 70 (argumentos -> epsilon .)


state 78

    (28) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 37


state 79

    (29) escritura -> PRINT LPAREN escrito . RPAREN

    RPAREN          shift and go to state 116


state 80

    (30) escrito -> impr .
    (31) escrito -> impr . COMA impr

    RPAREN          reduce using rule 30 (escrito -> impr .)
    COMA            shift and go to state 117


state 81

    (32) impr -> STRING .
    (96) string -> STRING .

  ! reduce/reduce conflict for COMA resolved using rule 32 (impr -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (impr -> STRING .)
    COMA            reduce using rule 32 (impr -> STRING .)
    RPAREN          reduce using rule 32 (impr -> STRING .)
    TIMES           reduce using rule 96 (string -> STRING .)
    DIVIDE          reduce using rule 96 (string -> STRING .)
    DIFF            reduce using rule 96 (string -> STRING .)
    EXP             reduce using rule 96 (string -> STRING .)
    PLUS            reduce using rule 96 (string -> STRING .)
    MINUS           reduce using rule 96 (string -> STRING .)
    LESSTHAN        reduce using rule 96 (string -> STRING .)
    MORETHAN        reduce using rule 96 (string -> STRING .)
    ISEQUAL         reduce using rule 96 (string -> STRING .)
    NOTEQUAL        reduce using rule 96 (string -> STRING .)
    AND             reduce using rule 96 (string -> STRING .)
    OR              reduce using rule 96 (string -> STRING .)

  ! COMA            [ reduce using rule 96 (string -> STRING .) ]
  ! RPAREN          [ reduce using rule 96 (string -> STRING .) ]


state 82

    (33) impr -> expresion .

    COMA            reduce using rule 33 (impr -> expresion .)
    RPAREN          reduce using rule 33 (impr -> expresion .)


state 83

    (58) funcion -> FUNCTION funcdef LPAREN . declaracion addArgs RPAREN COLON tiposreturn
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (87) epsilon -> .

    VAR             shift and go to state 10
    RPAREN          reduce using rule 87 (epsilon -> .)

    declaracion                    shift and go to state 118
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 84

    (63) functionCall -> funCall LPAREN funcArgs . RPAREN
    (66) funcArgs -> funcArgs . COMA funcArgs

    RPAREN          shift and go to state 119
    COMA            shift and go to state 120


state 85

    (65) funcArgs -> checkArgs .

    RPAREN          reduce using rule 65 (funcArgs -> checkArgs .)
    COMA            reduce using rule 65 (funcArgs -> checkArgs .)


state 86

    (67) funcArgs -> epsilon .

    RPAREN          reduce using rule 67 (funcArgs -> epsilon .)
    COMA            reduce using rule 67 (funcArgs -> epsilon .)


state 87

    (68) checkArgs -> ID . EQUAL expresion

    EQUAL           shift and go to state 121


state 88

    (6) var -> vardef COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 122


state 89

    (8) tipo -> INT .

    SEMICOLON       reduce using rule 8 (tipo -> INT .)
    LCURLY          reduce using rule 8 (tipo -> INT .)


state 90

    (9) tipo -> FLOAT .

    SEMICOLON       reduce using rule 9 (tipo -> FLOAT .)
    LCURLY          reduce using rule 9 (tipo -> FLOAT .)


state 91

    (10) tipo -> BOOL .

    SEMICOLON       reduce using rule 10 (tipo -> BOOL .)
    LCURLY          reduce using rule 10 (tipo -> BOOL .)


state 92

    (11) tipo -> STRING .

    SEMICOLON       reduce using rule 11 (tipo -> STRING .)
    LCURLY          reduce using rule 11 (tipo -> STRING .)


state 93

    (38) condition -> exp comparacion . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    exp                            shift and go to state 51
    expresion                      shift and go to state 123
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 94

    (39) comparacion -> LESSTHAN .

    LBRACKET        reduce using rule 39 (comparacion -> LESSTHAN .)
    ID              reduce using rule 39 (comparacion -> LESSTHAN .)
    LPAREN          reduce using rule 39 (comparacion -> LESSTHAN .)
    RPAREN          reduce using rule 39 (comparacion -> LESSTHAN .)
    INT             reduce using rule 39 (comparacion -> LESSTHAN .)
    FLOAT           reduce using rule 39 (comparacion -> LESSTHAN .)
    BOOL            reduce using rule 39 (comparacion -> LESSTHAN .)
    STRING          reduce using rule 39 (comparacion -> LESSTHAN .)


state 95

    (40) comparacion -> MORETHAN .

    LBRACKET        reduce using rule 40 (comparacion -> MORETHAN .)
    ID              reduce using rule 40 (comparacion -> MORETHAN .)
    LPAREN          reduce using rule 40 (comparacion -> MORETHAN .)
    RPAREN          reduce using rule 40 (comparacion -> MORETHAN .)
    INT             reduce using rule 40 (comparacion -> MORETHAN .)
    FLOAT           reduce using rule 40 (comparacion -> MORETHAN .)
    BOOL            reduce using rule 40 (comparacion -> MORETHAN .)
    STRING          reduce using rule 40 (comparacion -> MORETHAN .)


state 96

    (41) comparacion -> ISEQUAL .

    LBRACKET        reduce using rule 41 (comparacion -> ISEQUAL .)
    ID              reduce using rule 41 (comparacion -> ISEQUAL .)
    LPAREN          reduce using rule 41 (comparacion -> ISEQUAL .)
    RPAREN          reduce using rule 41 (comparacion -> ISEQUAL .)
    INT             reduce using rule 41 (comparacion -> ISEQUAL .)
    FLOAT           reduce using rule 41 (comparacion -> ISEQUAL .)
    BOOL            reduce using rule 41 (comparacion -> ISEQUAL .)
    STRING          reduce using rule 41 (comparacion -> ISEQUAL .)


state 97

    (42) comparacion -> NOTEQUAL .

    LBRACKET        reduce using rule 42 (comparacion -> NOTEQUAL .)
    ID              reduce using rule 42 (comparacion -> NOTEQUAL .)
    LPAREN          reduce using rule 42 (comparacion -> NOTEQUAL .)
    RPAREN          reduce using rule 42 (comparacion -> NOTEQUAL .)
    INT             reduce using rule 42 (comparacion -> NOTEQUAL .)
    FLOAT           reduce using rule 42 (comparacion -> NOTEQUAL .)
    BOOL            reduce using rule 42 (comparacion -> NOTEQUAL .)
    STRING          reduce using rule 42 (comparacion -> NOTEQUAL .)


state 98

    (43) comparacion -> AND .

    LBRACKET        reduce using rule 43 (comparacion -> AND .)
    ID              reduce using rule 43 (comparacion -> AND .)
    LPAREN          reduce using rule 43 (comparacion -> AND .)
    RPAREN          reduce using rule 43 (comparacion -> AND .)
    INT             reduce using rule 43 (comparacion -> AND .)
    FLOAT           reduce using rule 43 (comparacion -> AND .)
    BOOL            reduce using rule 43 (comparacion -> AND .)
    STRING          reduce using rule 43 (comparacion -> AND .)


state 99

    (44) comparacion -> OR .

    LBRACKET        reduce using rule 44 (comparacion -> OR .)
    ID              reduce using rule 44 (comparacion -> OR .)
    LPAREN          reduce using rule 44 (comparacion -> OR .)
    RPAREN          reduce using rule 44 (comparacion -> OR .)
    INT             reduce using rule 44 (comparacion -> OR .)
    FLOAT           reduce using rule 44 (comparacion -> OR .)
    BOOL            reduce using rule 44 (comparacion -> OR .)
    STRING          reduce using rule 44 (comparacion -> OR .)


state 100

    (74) exp -> termino signo . exp
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    ID              shift and go to state 125
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    termino                        shift and go to state 55
    exp                            shift and go to state 124
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 101

    (75) signo -> PLUS .

    LPAREN          reduce using rule 75 (signo -> PLUS .)
    RPAREN          reduce using rule 75 (signo -> PLUS .)
    ID              reduce using rule 75 (signo -> PLUS .)
    INT             reduce using rule 75 (signo -> PLUS .)
    FLOAT           reduce using rule 75 (signo -> PLUS .)
    BOOL            reduce using rule 75 (signo -> PLUS .)
    STRING          reduce using rule 75 (signo -> PLUS .)


state 102

    (76) signo -> MINUS .

    LPAREN          reduce using rule 76 (signo -> MINUS .)
    RPAREN          reduce using rule 76 (signo -> MINUS .)
    ID              reduce using rule 76 (signo -> MINUS .)
    INT             reduce using rule 76 (signo -> MINUS .)
    FLOAT           reduce using rule 76 (signo -> MINUS .)
    BOOL            reduce using rule 76 (signo -> MINUS .)
    STRING          reduce using rule 76 (signo -> MINUS .)


state 103

    (14) arreglo -> LBRACKET lista . RBRACKET

    RBRACKET        shift and go to state 126


state 104

    (12) lista -> ID .
    (13) lista -> ID . COMA

    RBRACKET        reduce using rule 12 (lista -> ID .)
    COMA            shift and go to state 127


state 105

    (78) termino -> factor operacion . termino
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    ID              shift and go to state 125
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    factor                         shift and go to state 59
    termino                        shift and go to state 128
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 106

    (79) operacion -> TIMES .

    LPAREN          reduce using rule 79 (operacion -> TIMES .)
    RPAREN          reduce using rule 79 (operacion -> TIMES .)
    ID              reduce using rule 79 (operacion -> TIMES .)
    INT             reduce using rule 79 (operacion -> TIMES .)
    FLOAT           reduce using rule 79 (operacion -> TIMES .)
    BOOL            reduce using rule 79 (operacion -> TIMES .)
    STRING          reduce using rule 79 (operacion -> TIMES .)


state 107

    (80) operacion -> DIVIDE .

    LPAREN          reduce using rule 80 (operacion -> DIVIDE .)
    RPAREN          reduce using rule 80 (operacion -> DIVIDE .)
    ID              reduce using rule 80 (operacion -> DIVIDE .)
    INT             reduce using rule 80 (operacion -> DIVIDE .)
    FLOAT           reduce using rule 80 (operacion -> DIVIDE .)
    BOOL            reduce using rule 80 (operacion -> DIVIDE .)
    STRING          reduce using rule 80 (operacion -> DIVIDE .)


state 108

    (81) operacion -> DIFF .

    LPAREN          reduce using rule 81 (operacion -> DIFF .)
    RPAREN          reduce using rule 81 (operacion -> DIFF .)
    ID              reduce using rule 81 (operacion -> DIFF .)
    INT             reduce using rule 81 (operacion -> DIFF .)
    FLOAT           reduce using rule 81 (operacion -> DIFF .)
    BOOL            reduce using rule 81 (operacion -> DIFF .)
    STRING          reduce using rule 81 (operacion -> DIFF .)


state 109

    (82) operacion -> EXP .

    LPAREN          reduce using rule 82 (operacion -> EXP .)
    RPAREN          reduce using rule 82 (operacion -> EXP .)
    ID              reduce using rule 82 (operacion -> EXP .)
    INT             reduce using rule 82 (operacion -> EXP .)
    FLOAT           reduce using rule 82 (operacion -> EXP .)
    BOOL            reduce using rule 82 (operacion -> EXP .)
    STRING          reduce using rule 82 (operacion -> EXP .)


state 110

    (83) factor -> paren expresion . paren
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN

    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58

    paren                          shift and go to state 129

state 111

    (52) condicion -> IF LPAREN addCheckBool expresion . endCondition bloque condicionelse
    (53) endCondition -> . RPAREN
    (54) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 131
    SEMICOLON       shift and go to state 132

    endCondition                   shift and go to state 130

state 112

    (47) whileLoop -> WHILE startCondition addCheckBool expresion . endCondition bloque
    (53) endCondition -> . RPAREN
    (54) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 131
    SEMICOLON       shift and go to state 132

    endCondition                   shift and go to state 133

state 113

    (45) doWhile -> do bloque WHILE LPAREN . addCheckBool expresion RPAREN
    (48) addCheckBool -> . epsilon
    (87) epsilon -> .

    LBRACKET        reduce using rule 87 (epsilon -> .)
    ID              reduce using rule 87 (epsilon -> .)
    LPAREN          reduce using rule 87 (epsilon -> .)
    RPAREN          reduce using rule 87 (epsilon -> .)
    INT             reduce using rule 87 (epsilon -> .)
    FLOAT           reduce using rule 87 (epsilon -> .)
    BOOL            reduce using rule 87 (epsilon -> .)
    STRING          reduce using rule 87 (epsilon -> .)

    addCheckBool                   shift and go to state 134
    epsilon                        shift and go to state 71

state 114

    (51) forLoop -> FOR LPAREN argumentos startCondition . expresion endCondition asignacion RPAREN bloque
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 135
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 115

    (72) args -> args COMA . args
    (71) args -> . asignacion
    (72) args -> . args COMA args
    (28) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 78

    args                           shift and go to state 136
    asignacion                     shift and go to state 75

state 116

    (29) escritura -> PRINT LPAREN escrito RPAREN .

    SEMICOLON       reduce using rule 29 (escritura -> PRINT LPAREN escrito RPAREN .)


state 117

    (31) escrito -> impr COMA . impr
    (32) impr -> . STRING
    (33) impr -> . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    STRING          shift and go to state 81
    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68

    impr                           shift and go to state 137
    expresion                      shift and go to state 82
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 118

    (58) funcion -> FUNCTION funcdef LPAREN declaracion . addArgs RPAREN COLON tiposreturn
    (59) addArgs -> . epsilon
    (87) epsilon -> .

    RPAREN          reduce using rule 87 (epsilon -> .)

    addArgs                        shift and go to state 138
    epsilon                        shift and go to state 139

state 119

    (63) functionCall -> funCall LPAREN funcArgs RPAREN .

    SEMICOLON       reduce using rule 63 (functionCall -> funCall LPAREN funcArgs RPAREN .)
    COMA            reduce using rule 63 (functionCall -> funCall LPAREN funcArgs RPAREN .)
    LPAREN          reduce using rule 63 (functionCall -> funCall LPAREN funcArgs RPAREN .)
    RPAREN          reduce using rule 63 (functionCall -> funCall LPAREN funcArgs RPAREN .)


state 120

    (66) funcArgs -> funcArgs COMA . funcArgs
    (65) funcArgs -> . checkArgs
    (66) funcArgs -> . funcArgs COMA funcArgs
    (67) funcArgs -> . epsilon
    (68) checkArgs -> . ID EQUAL expresion
    (87) epsilon -> .

    ID              shift and go to state 87
    COMA            reduce using rule 87 (epsilon -> .)
    RPAREN          reduce using rule 87 (epsilon -> .)

    funcArgs                       shift and go to state 140
    checkArgs                      shift and go to state 85
    epsilon                        shift and go to state 86

state 121

    (68) checkArgs -> ID EQUAL . expresion
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 141
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 122

    (6) var -> vardef COLON tipo SEMICOLON .

    VAR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    ID              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    IF              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    WHILE           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FOR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    PRINT           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    DO              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)


state 123

    (38) condition -> exp comparacion expresion .

    SEMICOLON       reduce using rule 38 (condition -> exp comparacion expresion .)
    COMA            reduce using rule 38 (condition -> exp comparacion expresion .)
    LPAREN          reduce using rule 38 (condition -> exp comparacion expresion .)
    RPAREN          reduce using rule 38 (condition -> exp comparacion expresion .)


state 124

    (74) exp -> termino signo exp .

    LESSTHAN        reduce using rule 74 (exp -> termino signo exp .)
    MORETHAN        reduce using rule 74 (exp -> termino signo exp .)
    ISEQUAL         reduce using rule 74 (exp -> termino signo exp .)
    NOTEQUAL        reduce using rule 74 (exp -> termino signo exp .)
    AND             reduce using rule 74 (exp -> termino signo exp .)
    OR              reduce using rule 74 (exp -> termino signo exp .)
    SEMICOLON       reduce using rule 74 (exp -> termino signo exp .)
    COMA            reduce using rule 74 (exp -> termino signo exp .)
    LPAREN          reduce using rule 74 (exp -> termino signo exp .)
    RPAREN          reduce using rule 74 (exp -> termino signo exp .)


state 125

    (88) varcte -> ID .

    TIMES           reduce using rule 88 (varcte -> ID .)
    DIVIDE          reduce using rule 88 (varcte -> ID .)
    DIFF            reduce using rule 88 (varcte -> ID .)
    EXP             reduce using rule 88 (varcte -> ID .)
    PLUS            reduce using rule 88 (varcte -> ID .)
    MINUS           reduce using rule 88 (varcte -> ID .)
    LESSTHAN        reduce using rule 88 (varcte -> ID .)
    MORETHAN        reduce using rule 88 (varcte -> ID .)
    ISEQUAL         reduce using rule 88 (varcte -> ID .)
    NOTEQUAL        reduce using rule 88 (varcte -> ID .)
    AND             reduce using rule 88 (varcte -> ID .)
    OR              reduce using rule 88 (varcte -> ID .)
    SEMICOLON       reduce using rule 88 (varcte -> ID .)
    COMA            reduce using rule 88 (varcte -> ID .)
    LPAREN          reduce using rule 88 (varcte -> ID .)
    RPAREN          reduce using rule 88 (varcte -> ID .)


state 126

    (14) arreglo -> LBRACKET lista RBRACKET .

    SEMICOLON       reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)
    COMA            reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)
    LPAREN          reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)
    RPAREN          reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)


state 127

    (13) lista -> ID COMA .

    RBRACKET        reduce using rule 13 (lista -> ID COMA .)


state 128

    (78) termino -> factor operacion termino .

    PLUS            reduce using rule 78 (termino -> factor operacion termino .)
    MINUS           reduce using rule 78 (termino -> factor operacion termino .)
    LESSTHAN        reduce using rule 78 (termino -> factor operacion termino .)
    MORETHAN        reduce using rule 78 (termino -> factor operacion termino .)
    ISEQUAL         reduce using rule 78 (termino -> factor operacion termino .)
    NOTEQUAL        reduce using rule 78 (termino -> factor operacion termino .)
    AND             reduce using rule 78 (termino -> factor operacion termino .)
    OR              reduce using rule 78 (termino -> factor operacion termino .)
    SEMICOLON       reduce using rule 78 (termino -> factor operacion termino .)
    COMA            reduce using rule 78 (termino -> factor operacion termino .)
    LPAREN          reduce using rule 78 (termino -> factor operacion termino .)
    RPAREN          reduce using rule 78 (termino -> factor operacion termino .)


state 129

    (83) factor -> paren expresion paren .

    TIMES           reduce using rule 83 (factor -> paren expresion paren .)
    DIVIDE          reduce using rule 83 (factor -> paren expresion paren .)
    DIFF            reduce using rule 83 (factor -> paren expresion paren .)
    EXP             reduce using rule 83 (factor -> paren expresion paren .)
    PLUS            reduce using rule 83 (factor -> paren expresion paren .)
    MINUS           reduce using rule 83 (factor -> paren expresion paren .)
    LESSTHAN        reduce using rule 83 (factor -> paren expresion paren .)
    MORETHAN        reduce using rule 83 (factor -> paren expresion paren .)
    ISEQUAL         reduce using rule 83 (factor -> paren expresion paren .)
    NOTEQUAL        reduce using rule 83 (factor -> paren expresion paren .)
    AND             reduce using rule 83 (factor -> paren expresion paren .)
    OR              reduce using rule 83 (factor -> paren expresion paren .)
    SEMICOLON       reduce using rule 83 (factor -> paren expresion paren .)
    COMA            reduce using rule 83 (factor -> paren expresion paren .)
    LPAREN          reduce using rule 83 (factor -> paren expresion paren .)
    RPAREN          reduce using rule 83 (factor -> paren expresion paren .)


state 130

    (52) condicion -> IF LPAREN addCheckBool expresion endCondition . bloque condicionelse
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 142

state 131

    (53) endCondition -> RPAREN .

    LCURLY          reduce using rule 53 (endCondition -> RPAREN .)
    ID              reduce using rule 53 (endCondition -> RPAREN .)


state 132

    (54) endCondition -> SEMICOLON .

    LCURLY          reduce using rule 54 (endCondition -> SEMICOLON .)
    ID              reduce using rule 54 (endCondition -> SEMICOLON .)


state 133

    (47) whileLoop -> WHILE startCondition addCheckBool expresion endCondition . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 143

state 134

    (45) doWhile -> do bloque WHILE LPAREN addCheckBool . expresion RPAREN
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 144
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 135

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion . endCondition asignacion RPAREN bloque
    (53) endCondition -> . RPAREN
    (54) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 131
    SEMICOLON       shift and go to state 132

    endCondition                   shift and go to state 145

state 136

    (72) args -> args COMA args .
    (72) args -> args . COMA args

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 72 (args -> args COMA args .)
    SEMICOLON       reduce using rule 72 (args -> args COMA args .)
    COMA            shift and go to state 115

  ! COMA            [ reduce using rule 72 (args -> args COMA args .) ]


state 137

    (31) escrito -> impr COMA impr .

    RPAREN          reduce using rule 31 (escrito -> impr COMA impr .)


state 138

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs . RPAREN COLON tiposreturn

    RPAREN          shift and go to state 146


state 139

    (59) addArgs -> epsilon .

    RPAREN          reduce using rule 59 (addArgs -> epsilon .)


state 140

    (66) funcArgs -> funcArgs COMA funcArgs .
    (66) funcArgs -> funcArgs . COMA funcArgs

  ! shift/reduce conflict for COMA resolved as shift
    RPAREN          reduce using rule 66 (funcArgs -> funcArgs COMA funcArgs .)
    COMA            shift and go to state 120

  ! COMA            [ reduce using rule 66 (funcArgs -> funcArgs COMA funcArgs .) ]


state 141

    (68) checkArgs -> ID EQUAL expresion .

    RPAREN          reduce using rule 68 (checkArgs -> ID EQUAL expresion .)
    COMA            reduce using rule 68 (checkArgs -> ID EQUAL expresion .)


state 142

    (52) condicion -> IF LPAREN addCheckBool expresion endCondition bloque . condicionelse
    (55) condicionelse -> . else bloque
    (56) condicionelse -> . epsilon
    (57) else -> . ELSE
    (87) epsilon -> .

    ELSE            shift and go to state 150
    SEMICOLON       reduce using rule 87 (epsilon -> .)

    condicionelse                  shift and go to state 147
    else                           shift and go to state 148
    epsilon                        shift and go to state 149

state 143

    (47) whileLoop -> WHILE startCondition addCheckBool expresion endCondition bloque .

    SEMICOLON       reduce using rule 47 (whileLoop -> WHILE startCondition addCheckBool expresion endCondition bloque .)


state 144

    (45) doWhile -> do bloque WHILE LPAREN addCheckBool expresion . RPAREN

    RPAREN          shift and go to state 151


state 145

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition . asignacion RPAREN bloque
    (28) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 78

    asignacion                     shift and go to state 152

state 146

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN . COLON tiposreturn

    COLON           shift and go to state 153


state 147

    (52) condicion -> IF LPAREN addCheckBool expresion endCondition bloque condicionelse .

    SEMICOLON       reduce using rule 52 (condicion -> IF LPAREN addCheckBool expresion endCondition bloque condicionelse .)


state 148

    (55) condicionelse -> else . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 154

state 149

    (56) condicionelse -> epsilon .

    SEMICOLON       reduce using rule 56 (condicionelse -> epsilon .)


state 150

    (57) else -> ELSE .

    LCURLY          reduce using rule 57 (else -> ELSE .)


state 151

    (45) doWhile -> do bloque WHILE LPAREN addCheckBool expresion RPAREN .

    SEMICOLON       reduce using rule 45 (doWhile -> do bloque WHILE LPAREN addCheckBool expresion RPAREN .)


state 152

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion . RPAREN bloque

    RPAREN          shift and go to state 155


state 153

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON . tiposreturn
    (61) tiposreturn -> . tipo bloqueReturn
    (62) tiposreturn -> . VOID bloque
    (8) tipo -> . INT
    (9) tipo -> . FLOAT
    (10) tipo -> . BOOL
    (11) tipo -> . STRING

    VOID            shift and go to state 158
    INT             shift and go to state 89
    FLOAT           shift and go to state 90
    BOOL            shift and go to state 91
    STRING          shift and go to state 92

    tiposreturn                    shift and go to state 156
    tipo                           shift and go to state 157

state 154

    (55) condicionelse -> else bloque .

    SEMICOLON       reduce using rule 55 (condicionelse -> else bloque .)


state 155

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 159

state 156

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .

    SEMICOLON       reduce using rule 58 (funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .)


state 157

    (61) tiposreturn -> tipo . bloqueReturn
    (16) bloqueReturn -> . LCURLY declaracion estatutoExp returnexp RCURLY

    LCURLY          shift and go to state 161

    bloqueReturn                   shift and go to state 160

state 158

    (62) tiposreturn -> VOID . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 162

state 159

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .

    SEMICOLON       reduce using rule 51 (forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .)


state 160

    (61) tiposreturn -> tipo bloqueReturn .

    SEMICOLON       reduce using rule 61 (tiposreturn -> tipo bloqueReturn .)


state 161

    (16) bloqueReturn -> LCURLY . declaracion estatutoExp returnexp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (87) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 87 (epsilon -> .)
    IF              reduce using rule 87 (epsilon -> .)
    WHILE           reduce using rule 87 (epsilon -> .)
    FOR             reduce using rule 87 (epsilon -> .)
    PRINT           reduce using rule 87 (epsilon -> .)
    FUNCTION        reduce using rule 87 (epsilon -> .)
    DO              reduce using rule 87 (epsilon -> .)

    declaracion                    shift and go to state 163
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 162

    (62) tiposreturn -> VOID bloque .

    SEMICOLON       reduce using rule 62 (tiposreturn -> VOID bloque .)


state 163

    (16) bloqueReturn -> LCURLY declaracion . estatutoExp returnexp RCURLY
    (17) estatutoExp -> . estatuto SEMICOLON
    (18) estatutoExp -> . estatutoExp estatutoExp
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (28) asignacion -> . ID EQUAL expresion
    (52) condicion -> . IF LPAREN addCheckBool expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition addCheckBool expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN addCheckBool expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (29) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (46) do -> . DO
    (64) funCall -> . ID

    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 164
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 164

    (16) bloqueReturn -> LCURLY declaracion estatutoExp . returnexp RCURLY
    (18) estatutoExp -> estatutoExp . estatutoExp
    (27) returnexp -> . RETURN expresion SEMICOLON
    (17) estatutoExp -> . estatuto SEMICOLON
    (18) estatutoExp -> . estatutoExp estatutoExp
    (19) estatuto -> . asignacion
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (28) asignacion -> . ID EQUAL expresion
    (52) condicion -> . IF LPAREN addCheckBool expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition addCheckBool expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN addCheckBool expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (29) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (46) do -> . DO
    (64) funCall -> . ID

    RETURN          shift and go to state 166
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 34
    returnexp                      shift and go to state 165
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 165

    (16) bloqueReturn -> LCURLY declaracion estatutoExp returnexp . RCURLY

    RCURLY          shift and go to state 167


state 166

    (27) returnexp -> RETURN . expresion SEMICOLON
    (34) expresion -> . exp
    (35) expresion -> . condition
    (36) expresion -> . arreglo
    (37) expresion -> . functionCall
    (73) exp -> . termino
    (74) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (63) functionCall -> . funCall LPAREN funcArgs RPAREN
    (77) termino -> . factor
    (78) termino -> . factor operacion termino
    (64) funCall -> . ID
    (83) factor -> . paren expresion paren
    (84) factor -> . varcte
    (85) paren -> . LPAREN
    (86) paren -> . RPAREN
    (88) varcte -> . ID
    (89) varcte -> . int
    (90) varcte -> . float
    (91) varcte -> . bool
    (92) varcte -> . string
    (93) int -> . INT
    (94) float -> . FLOAT
    (95) bool -> . BOOL
    (96) string -> . STRING

    LBRACKET        shift and go to state 56
    ID              shift and go to state 49
    LPAREN          shift and go to state 57
    RPAREN          shift and go to state 58
    INT             shift and go to state 66
    FLOAT           shift and go to state 67
    BOOL            shift and go to state 68
    STRING          shift and go to state 69

    expresion                      shift and go to state 168
    exp                            shift and go to state 51
    condition                      shift and go to state 52
    arreglo                        shift and go to state 53
    functionCall                   shift and go to state 54
    termino                        shift and go to state 55
    funCall                        shift and go to state 28
    factor                         shift and go to state 59
    paren                          shift and go to state 60
    varcte                         shift and go to state 61
    int                            shift and go to state 62
    float                          shift and go to state 63
    bool                           shift and go to state 64
    string                         shift and go to state 65

state 167

    (16) bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .

    SEMICOLON       reduce using rule 16 (bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .)


state 168

    (27) returnexp -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 169


state 169

    (27) returnexp -> RETURN expresion SEMICOLON .

    RCURLY          reduce using rule 27 (returnexp -> RETURN expresion SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 34 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 34 resolved as shift
WARNING: shift/reduce conflict for DO in state 34 resolved as shift
WARNING: shift/reduce conflict for COMA in state 136 resolved as shift
WARNING: shift/reduce conflict for COMA in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 49 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 49
WARNING: reduce/reduce conflict in state 81 resolved using rule (impr -> STRING)
WARNING: rejected rule (string -> STRING) in state 81
