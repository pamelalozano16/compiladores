Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START LPAREN RPAREN bloque
Rule 2     declaracion -> vars
Rule 3     declaracion -> epsilon
Rule 4     vars -> VAR var
Rule 5     vars -> vars vars
Rule 6     var -> vardef COLON tipo SEMICOLON
Rule 7     var -> declaracionArr SEMICOLON
Rule 8     var -> declaracionMatrix SEMICOLON
Rule 9     vardef -> ID
Rule 10    tipo -> INT
Rule 11    tipo -> FLOAT
Rule 12    tipo -> BOOL
Rule 13    tipo -> STRING
Rule 14    bloque -> LCURLY declaracion estatutoExp RCURLY
Rule 15    bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY
Rule 16    estatutoExp -> estatuto SEMICOLON
Rule 17    estatutoExp -> estatutoExp estatutoExp
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> whileLoop
Rule 21    estatuto -> doWhile
Rule 22    estatuto -> forLoop
Rule 23    estatuto -> escritura
Rule 24    estatuto -> funcion
Rule 25    estatuto -> functionCall
Rule 26    estatuto -> break
Rule 27    break -> BREAK expresion
Rule 28    returnexp -> RETURN expresion SEMICOLON
Rule 29    asignacion -> ID EQUAL expresion
Rule 30    asignacion -> arr EQUAL expresion
Rule 31    escritura -> PRINT LPAREN escrito RPAREN
Rule 32    escrito -> impr
Rule 33    escrito -> impr COMA escrito
Rule 34    impr -> expresion
Rule 35    expresion -> exp
Rule 36    expresion -> condition
Rule 37    expresion -> functionCall
Rule 38    condition -> exp comparacion expresion
Rule 39    comparacion -> LESSTHAN
Rule 40    comparacion -> MORETHAN
Rule 41    comparacion -> ISEQUAL
Rule 42    comparacion -> NOTEQUAL
Rule 43    comparacion -> AND
Rule 44    comparacion -> OR
Rule 45    doWhile -> do bloque WHILE LPAREN expresion RPAREN
Rule 46    do -> DO
Rule 47    whileLoop -> WHILE startCondition expresion endCondition bloque
Rule 48    startCondition -> LPAREN
Rule 49    startCondition -> SEMICOLON
Rule 50    forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
Rule 51    condicion -> IF LPAREN expresion endCondition bloque condicionelse
Rule 52    endCondition -> RPAREN
Rule 53    endCondition -> SEMICOLON
Rule 54    condicionelse -> else bloque
Rule 55    condicionelse -> epsilon
Rule 56    else -> ELSE
Rule 57    funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
Rule 58    addArgs -> epsilon
Rule 59    funcdef -> ID
Rule 60    tiposreturn -> tiposFuncion bloqueReturn
Rule 61    tiposreturn -> VOID bloque
Rule 62    tiposFuncion -> INT
Rule 63    tiposFuncion -> FLOAT
Rule 64    tiposFuncion -> BOOL
Rule 65    tiposFuncion -> STRING
Rule 66    functionCall -> funCall lparen funcArgs rparen
Rule 67    funCall -> ID
Rule 68    funcArgs -> checkArgs
Rule 69    funcArgs -> funcArgs COMA funcArgs
Rule 70    funcArgs -> epsilon
Rule 71    checkArgs -> expresion
Rule 72    argumentos -> args
Rule 73    argumentos -> epsilon
Rule 74    args -> asignacion
Rule 75    args -> args COMA args
Rule 76    exp -> termino
Rule 77    exp -> termino signo exp
Rule 78    signo -> PLUS
Rule 79    signo -> MINUS
Rule 80    termino -> factor
Rule 81    termino -> factor operacion termino
Rule 82    operacion -> TIMES
Rule 83    operacion -> DIVIDE
Rule 84    operacion -> DIFF
Rule 85    operacion -> EXP
Rule 86    factor -> varcte
Rule 87    factor -> lparen expresion rparen
Rule 88    factor -> functionCall
Rule 89    lparen -> LPAREN
Rule 90    rparen -> RPAREN
Rule 91    epsilon -> <empty>
Rule 92    arrDef -> ID
Rule 93    declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo
Rule 94    declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
Rule 95    arr -> callArr openBracket expresion abracket matrix
Rule 96    arr -> callArr openBracket expresion abracket epsilon
Rule 97    callArr -> ID
Rule 98    matrix -> openBracket expresion mbracket
Rule 99    openBracket -> LBRACKET
Rule 100   closeBracket -> RBRACKET
Rule 101   abracket -> closeBracket
Rule 102   mbracket -> closeBracket
Rule 103   varcte -> ID
Rule 104   varcte -> int
Rule 105   varcte -> float
Rule 106   varcte -> bool
Rule 107   varcte -> string
Rule 108   varcte -> matrix
Rule 109   varcte -> arr
Rule 110   int -> INT
Rule 111   float -> FLOAT
Rule 112   bool -> BOOL
Rule 113   string -> STRING

Terminals, with rules where they appear

AND                  : 43
BOOL                 : 12 64 112
BREAK                : 27
COLON                : 6 57 93 94
COMA                 : 33 69 75
DIFF                 : 84
DIVIDE               : 83
DO                   : 46
ELSE                 : 56
EQUAL                : 29 30
EXP                  : 85
FLOAT                : 11 63 111
FOR                  : 50
FUNCTION             : 57
ID                   : 9 29 59 67 92 97 103
IF                   : 51
INT                  : 10 62 93 94 94 110
ISEQUAL              : 41
LBRACKET             : 93 94 94 99
LCURLY               : 14 15
LESSTHAN             : 39
LPAREN               : 1 31 45 48 50 51 57 89
MINUS                : 79
MORETHAN             : 40
NOTEQUAL             : 42
OR                   : 44
PLUS                 : 78
PRINT                : 31
RBRACKET             : 93 94 94 100
RCURLY               : 14 15
RETURN               : 28
RPAREN               : 1 31 45 50 52 57 90
SEMICOLON            : 6 7 8 16 28 49 53
START                : 1
STRING               : 13 65 113
TIMES                : 82
VAR                  : 4
VOID                 : 61
WHILE                : 45 47
error                : 

Nonterminals, with rules where they appear

abracket             : 95 96
addArgs              : 57
args                 : 72 75 75
argumentos           : 50
arr                  : 30 109
arrDef               : 93 94
asignacion           : 18 50 74
bloque               : 1 45 47 50 51 54 61
bloqueReturn         : 60
bool                 : 106
break                : 26
callArr              : 95 96
checkArgs            : 68
closeBracket         : 101 102
comparacion          : 38
condicion            : 19
condicionelse        : 51
condition            : 36
declaracion          : 14 15 57
declaracionArr       : 7
declaracionMatrix    : 8
do                   : 45
doWhile              : 21
else                 : 54
endCondition         : 47 50 51
epsilon              : 3 55 58 70 73 96
escrito              : 31 33
escritura            : 23
estatuto             : 16
estatutoExp          : 14 15 17 17
exp                  : 35 38 77
expresion            : 27 28 29 30 34 38 45 47 50 51 71 87 95 96 98
factor               : 80 81
float                : 105
forLoop              : 22
funCall              : 66
funcArgs             : 66 69 69
funcdef              : 57
funcion              : 24
functionCall         : 25 37 88
impr                 : 32 33
int                  : 104
lparen               : 66 87
matrix               : 95 108
mbracket             : 98
openBracket          : 95 96 98
operacion            : 81
programa             : 0
returnexp            : 15
rparen               : 66 87
signo                : 77
startCondition       : 47 50
string               : 107
termino              : 76 77 81
tipo                 : 6 93 94
tiposFuncion         : 60
tiposreturn          : 57
var                  : 4
varcte               : 86
vardef               : 6
vars                 : 2 5 5
whileLoop            : 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START LPAREN RPAREN bloque

    START           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> START . LPAREN RPAREN bloque

    LPAREN          shift and go to state 3


state 3

    (1) programa -> START LPAREN . RPAREN bloque

    RPAREN          shift and go to state 4


state 4

    (1) programa -> START LPAREN RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 5

state 5

    (1) programa -> START LPAREN RPAREN bloque .

    $end            reduce using rule 1 (programa -> START LPAREN RPAREN bloque .)


state 6

    (14) bloque -> LCURLY . declaracion estatutoExp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (91) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 91 (epsilon -> .)
    IF              reduce using rule 91 (epsilon -> .)
    WHILE           reduce using rule 91 (epsilon -> .)
    FOR             reduce using rule 91 (epsilon -> .)
    PRINT           reduce using rule 91 (epsilon -> .)
    FUNCTION        reduce using rule 91 (epsilon -> .)
    BREAK           reduce using rule 91 (epsilon -> .)
    DO              reduce using rule 91 (epsilon -> .)

    declaracion                    shift and go to state 7
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 7

    (14) bloque -> LCURLY declaracion . estatutoExp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (51) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (50) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (57) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (66) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (46) do -> . DO
    (67) funCall -> . ID
    (97) callArr -> . ID

    ID              shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 27
    PRINT           shift and go to state 28
    FUNCTION        shift and go to state 29
    BREAK           shift and go to state 31
    DO              shift and go to state 33

    estatutoExp                    shift and go to state 11
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    arr                            shift and go to state 23
    do                             shift and go to state 26
    funCall                        shift and go to state 30
    callArr                        shift and go to state 32

state 8

    (2) declaracion -> vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

    ID              reduce using rule 2 (declaracion -> vars .)
    IF              reduce using rule 2 (declaracion -> vars .)
    WHILE           reduce using rule 2 (declaracion -> vars .)
    FOR             reduce using rule 2 (declaracion -> vars .)
    PRINT           reduce using rule 2 (declaracion -> vars .)
    FUNCTION        reduce using rule 2 (declaracion -> vars .)
    BREAK           reduce using rule 2 (declaracion -> vars .)
    DO              reduce using rule 2 (declaracion -> vars .)
    RPAREN          reduce using rule 2 (declaracion -> vars .)
    VAR             shift and go to state 10

    vars                           shift and go to state 34

state 9

    (3) declaracion -> epsilon .

    ID              reduce using rule 3 (declaracion -> epsilon .)
    IF              reduce using rule 3 (declaracion -> epsilon .)
    WHILE           reduce using rule 3 (declaracion -> epsilon .)
    FOR             reduce using rule 3 (declaracion -> epsilon .)
    PRINT           reduce using rule 3 (declaracion -> epsilon .)
    FUNCTION        reduce using rule 3 (declaracion -> epsilon .)
    BREAK           reduce using rule 3 (declaracion -> epsilon .)
    DO              reduce using rule 3 (declaracion -> epsilon .)
    RPAREN          reduce using rule 3 (declaracion -> epsilon .)


state 10

    (4) vars -> VAR . var
    (6) var -> . vardef COLON tipo SEMICOLON
    (7) var -> . declaracionArr SEMICOLON
    (8) var -> . declaracionMatrix SEMICOLON
    (9) vardef -> . ID
    (93) declaracionArr -> . arrDef LBRACKET INT RBRACKET COLON tipo
    (94) declaracionMatrix -> . arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
    (92) arrDef -> . ID

    ID              shift and go to state 39

    var                            shift and go to state 35
    vardef                         shift and go to state 36
    declaracionArr                 shift and go to state 37
    declaracionMatrix              shift and go to state 38
    arrDef                         shift and go to state 40

state 11

    (14) bloque -> LCURLY declaracion estatutoExp . RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (51) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (50) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (57) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (66) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (46) do -> . DO
    (67) funCall -> . ID
    (97) callArr -> . ID

    RCURLY          shift and go to state 42
    ID              shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 27
    PRINT           shift and go to state 28
    FUNCTION        shift and go to state 29
    BREAK           shift and go to state 31
    DO              shift and go to state 33

    estatutoExp                    shift and go to state 41
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    arr                            shift and go to state 23
    do                             shift and go to state 26
    funCall                        shift and go to state 30
    callArr                        shift and go to state 32

state 12

    (16) estatutoExp -> estatuto . SEMICOLON

    SEMICOLON       shift and go to state 43


state 13

    (18) estatuto -> asignacion .

    SEMICOLON       reduce using rule 18 (estatuto -> asignacion .)


state 14

    (19) estatuto -> condicion .

    SEMICOLON       reduce using rule 19 (estatuto -> condicion .)


state 15

    (20) estatuto -> whileLoop .

    SEMICOLON       reduce using rule 20 (estatuto -> whileLoop .)


state 16

    (21) estatuto -> doWhile .

    SEMICOLON       reduce using rule 21 (estatuto -> doWhile .)


state 17

    (22) estatuto -> forLoop .

    SEMICOLON       reduce using rule 22 (estatuto -> forLoop .)


state 18

    (23) estatuto -> escritura .

    SEMICOLON       reduce using rule 23 (estatuto -> escritura .)


state 19

    (24) estatuto -> funcion .

    SEMICOLON       reduce using rule 24 (estatuto -> funcion .)


state 20

    (25) estatuto -> functionCall .

    SEMICOLON       reduce using rule 25 (estatuto -> functionCall .)


state 21

    (26) estatuto -> break .

    SEMICOLON       reduce using rule 26 (estatuto -> break .)


state 22

    (29) asignacion -> ID . EQUAL expresion
    (67) funCall -> ID .
    (97) callArr -> ID .

    EQUAL           shift and go to state 44
    LPAREN          reduce using rule 67 (funCall -> ID .)
    LBRACKET        reduce using rule 97 (callArr -> ID .)


state 23

    (30) asignacion -> arr . EQUAL expresion

    EQUAL           shift and go to state 45


state 24

    (51) condicion -> IF . LPAREN expresion endCondition bloque condicionelse

    LPAREN          shift and go to state 46


state 25

    (47) whileLoop -> WHILE . startCondition expresion endCondition bloque
    (48) startCondition -> . LPAREN
    (49) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 48
    SEMICOLON       shift and go to state 49

    startCondition                 shift and go to state 47

state 26

    (45) doWhile -> do . bloque WHILE LPAREN expresion RPAREN
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 50

state 27

    (50) forLoop -> FOR . LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque

    LPAREN          shift and go to state 51


state 28

    (31) escritura -> PRINT . LPAREN escrito RPAREN

    LPAREN          shift and go to state 52


state 29

    (57) funcion -> FUNCTION . funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (59) funcdef -> . ID

    ID              shift and go to state 54

    funcdef                        shift and go to state 53

state 30

    (66) functionCall -> funCall . lparen funcArgs rparen
    (89) lparen -> . LPAREN

    LPAREN          shift and go to state 56

    lparen                         shift and go to state 55

state 31

    (27) break -> BREAK . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 57
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 32

    (95) arr -> callArr . openBracket expresion abracket matrix
    (96) arr -> callArr . openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET

    LBRACKET        shift and go to state 77

    openBracket                    shift and go to state 78

state 33

    (46) do -> DO .

    LCURLY          reduce using rule 46 (do -> DO .)


state 34

    (5) vars -> vars vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 5 (vars -> vars vars .)
    IF              reduce using rule 5 (vars -> vars vars .)
    WHILE           reduce using rule 5 (vars -> vars vars .)
    FOR             reduce using rule 5 (vars -> vars vars .)
    PRINT           reduce using rule 5 (vars -> vars vars .)
    FUNCTION        reduce using rule 5 (vars -> vars vars .)
    BREAK           reduce using rule 5 (vars -> vars vars .)
    DO              reduce using rule 5 (vars -> vars vars .)
    RPAREN          reduce using rule 5 (vars -> vars vars .)
    VAR             shift and go to state 10

  ! VAR             [ reduce using rule 5 (vars -> vars vars .) ]

    vars                           shift and go to state 34

state 35

    (4) vars -> VAR var .

    VAR             reduce using rule 4 (vars -> VAR var .)
    ID              reduce using rule 4 (vars -> VAR var .)
    IF              reduce using rule 4 (vars -> VAR var .)
    WHILE           reduce using rule 4 (vars -> VAR var .)
    FOR             reduce using rule 4 (vars -> VAR var .)
    PRINT           reduce using rule 4 (vars -> VAR var .)
    FUNCTION        reduce using rule 4 (vars -> VAR var .)
    BREAK           reduce using rule 4 (vars -> VAR var .)
    DO              reduce using rule 4 (vars -> VAR var .)
    RPAREN          reduce using rule 4 (vars -> VAR var .)


state 36

    (6) var -> vardef . COLON tipo SEMICOLON

    COLON           shift and go to state 79


state 37

    (7) var -> declaracionArr . SEMICOLON

    SEMICOLON       shift and go to state 80


state 38

    (8) var -> declaracionMatrix . SEMICOLON

    SEMICOLON       shift and go to state 81


state 39

    (9) vardef -> ID .
    (92) arrDef -> ID .

    COLON           reduce using rule 9 (vardef -> ID .)
    LBRACKET        reduce using rule 92 (arrDef -> ID .)


state 40

    (93) declaracionArr -> arrDef . LBRACKET INT RBRACKET COLON tipo
    (94) declaracionMatrix -> arrDef . LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    LBRACKET        shift and go to state 82


state 41

    (17) estatutoExp -> estatutoExp estatutoExp .
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (51) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (50) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (57) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (66) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (46) do -> . DO
    (67) funCall -> . ID
    (97) callArr -> . ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    RCURLY          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    RETURN          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    ID              shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 27
    PRINT           shift and go to state 28
    FUNCTION        shift and go to state 29
    BREAK           shift and go to state 31
    DO              shift and go to state 33

  ! ID              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! IF              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! WHILE           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FOR             [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! PRINT           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FUNCTION        [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! BREAK           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! DO              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]

    estatutoExp                    shift and go to state 41
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    arr                            shift and go to state 23
    do                             shift and go to state 26
    funCall                        shift and go to state 30
    callArr                        shift and go to state 32

state 42

    (14) bloque -> LCURLY declaracion estatutoExp RCURLY .

    $end            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    WHILE           reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    ELSE            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    SEMICOLON       reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)


state 43

    (16) estatutoExp -> estatuto SEMICOLON .

    RCURLY          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    ID              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    IF              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    WHILE           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FOR             reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    PRINT           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FUNCTION        reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    BREAK           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    DO              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    RETURN          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)


state 44

    (29) asignacion -> ID EQUAL . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 83
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 45

    (30) asignacion -> arr EQUAL . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    arr                            shift and go to state 71
    expresion                      shift and go to state 84
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 46

    (51) condicion -> IF LPAREN . expresion endCondition bloque condicionelse
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 85
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 47

    (47) whileLoop -> WHILE startCondition . expresion endCondition bloque
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 86
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 48

    (48) startCondition -> LPAREN .

    ID              reduce using rule 48 (startCondition -> LPAREN .)
    LPAREN          reduce using rule 48 (startCondition -> LPAREN .)
    INT             reduce using rule 48 (startCondition -> LPAREN .)
    FLOAT           reduce using rule 48 (startCondition -> LPAREN .)
    BOOL            reduce using rule 48 (startCondition -> LPAREN .)
    STRING          reduce using rule 48 (startCondition -> LPAREN .)
    LBRACKET        reduce using rule 48 (startCondition -> LPAREN .)


state 49

    (49) startCondition -> SEMICOLON .

    ID              reduce using rule 49 (startCondition -> SEMICOLON .)
    LPAREN          reduce using rule 49 (startCondition -> SEMICOLON .)
    INT             reduce using rule 49 (startCondition -> SEMICOLON .)
    FLOAT           reduce using rule 49 (startCondition -> SEMICOLON .)
    BOOL            reduce using rule 49 (startCondition -> SEMICOLON .)
    STRING          reduce using rule 49 (startCondition -> SEMICOLON .)
    LBRACKET        reduce using rule 49 (startCondition -> SEMICOLON .)


state 50

    (45) doWhile -> do bloque . WHILE LPAREN expresion RPAREN

    WHILE           shift and go to state 87


state 51

    (50) forLoop -> FOR LPAREN . argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (72) argumentos -> . args
    (73) argumentos -> . epsilon
    (74) args -> . asignacion
    (75) args -> . args COMA args
    (91) epsilon -> .
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (97) callArr -> . ID

    LPAREN          reduce using rule 91 (epsilon -> .)
    SEMICOLON       reduce using rule 91 (epsilon -> .)
    ID              shift and go to state 92

    argumentos                     shift and go to state 88
    asignacion                     shift and go to state 89
    args                           shift and go to state 90
    epsilon                        shift and go to state 91
    arr                            shift and go to state 23
    callArr                        shift and go to state 32

state 52

    (31) escritura -> PRINT LPAREN . escrito RPAREN
    (32) escrito -> . impr
    (33) escrito -> . impr COMA escrito
    (34) impr -> . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    escrito                        shift and go to state 93
    impr                           shift and go to state 94
    expresion                      shift and go to state 95
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 53

    (57) funcion -> FUNCTION funcdef . LPAREN declaracion addArgs RPAREN COLON tiposreturn

    LPAREN          shift and go to state 96


state 54

    (59) funcdef -> ID .

    LPAREN          reduce using rule 59 (funcdef -> ID .)


state 55

    (66) functionCall -> funCall lparen . funcArgs rparen
    (68) funcArgs -> . checkArgs
    (69) funcArgs -> . funcArgs COMA funcArgs
    (70) funcArgs -> . epsilon
    (71) checkArgs -> . expresion
    (91) epsilon -> .
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    COMA            reduce using rule 91 (epsilon -> .)
    RPAREN          reduce using rule 91 (epsilon -> .)
    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    funcArgs                       shift and go to state 97
    checkArgs                      shift and go to state 98
    epsilon                        shift and go to state 99
    expresion                      shift and go to state 100
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 56

    (89) lparen -> LPAREN .

    ID              reduce using rule 89 (lparen -> LPAREN .)
    LPAREN          reduce using rule 89 (lparen -> LPAREN .)
    INT             reduce using rule 89 (lparen -> LPAREN .)
    FLOAT           reduce using rule 89 (lparen -> LPAREN .)
    BOOL            reduce using rule 89 (lparen -> LPAREN .)
    STRING          reduce using rule 89 (lparen -> LPAREN .)
    LBRACKET        reduce using rule 89 (lparen -> LPAREN .)
    COMA            reduce using rule 89 (lparen -> LPAREN .)
    RPAREN          reduce using rule 89 (lparen -> LPAREN .)


state 57

    (27) break -> BREAK expresion .

    SEMICOLON       reduce using rule 27 (break -> BREAK expresion .)


state 58

    (35) expresion -> exp .
    (38) condition -> exp . comparacion expresion
    (39) comparacion -> . LESSTHAN
    (40) comparacion -> . MORETHAN
    (41) comparacion -> . ISEQUAL
    (42) comparacion -> . NOTEQUAL
    (43) comparacion -> . AND
    (44) comparacion -> . OR

    SEMICOLON       reduce using rule 35 (expresion -> exp .)
    COMA            reduce using rule 35 (expresion -> exp .)
    LPAREN          reduce using rule 35 (expresion -> exp .)
    RPAREN          reduce using rule 35 (expresion -> exp .)
    RBRACKET        reduce using rule 35 (expresion -> exp .)
    LESSTHAN        shift and go to state 102
    MORETHAN        shift and go to state 103
    ISEQUAL         shift and go to state 104
    NOTEQUAL        shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107

    comparacion                    shift and go to state 101

state 59

    (36) expresion -> condition .

    SEMICOLON       reduce using rule 36 (expresion -> condition .)
    COMA            reduce using rule 36 (expresion -> condition .)
    LPAREN          reduce using rule 36 (expresion -> condition .)
    RPAREN          reduce using rule 36 (expresion -> condition .)
    RBRACKET        reduce using rule 36 (expresion -> condition .)


state 60

    (37) expresion -> functionCall .
    (88) factor -> functionCall .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for COMA resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 37 (expresion -> functionCall .)
    SEMICOLON       reduce using rule 37 (expresion -> functionCall .)
    COMA            reduce using rule 37 (expresion -> functionCall .)
    LPAREN          reduce using rule 37 (expresion -> functionCall .)
    RPAREN          reduce using rule 37 (expresion -> functionCall .)
    RBRACKET        reduce using rule 37 (expresion -> functionCall .)
    TIMES           reduce using rule 88 (factor -> functionCall .)
    DIVIDE          reduce using rule 88 (factor -> functionCall .)
    DIFF            reduce using rule 88 (factor -> functionCall .)
    EXP             reduce using rule 88 (factor -> functionCall .)
    PLUS            reduce using rule 88 (factor -> functionCall .)
    MINUS           reduce using rule 88 (factor -> functionCall .)
    LESSTHAN        reduce using rule 88 (factor -> functionCall .)
    MORETHAN        reduce using rule 88 (factor -> functionCall .)
    ISEQUAL         reduce using rule 88 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 88 (factor -> functionCall .)
    AND             reduce using rule 88 (factor -> functionCall .)
    OR              reduce using rule 88 (factor -> functionCall .)

  ! SEMICOLON       [ reduce using rule 88 (factor -> functionCall .) ]
  ! COMA            [ reduce using rule 88 (factor -> functionCall .) ]
  ! LPAREN          [ reduce using rule 88 (factor -> functionCall .) ]
  ! RPAREN          [ reduce using rule 88 (factor -> functionCall .) ]
  ! RBRACKET        [ reduce using rule 88 (factor -> functionCall .) ]


state 61

    (76) exp -> termino .
    (77) exp -> termino . signo exp
    (78) signo -> . PLUS
    (79) signo -> . MINUS

    LESSTHAN        reduce using rule 76 (exp -> termino .)
    MORETHAN        reduce using rule 76 (exp -> termino .)
    ISEQUAL         reduce using rule 76 (exp -> termino .)
    NOTEQUAL        reduce using rule 76 (exp -> termino .)
    AND             reduce using rule 76 (exp -> termino .)
    OR              reduce using rule 76 (exp -> termino .)
    SEMICOLON       reduce using rule 76 (exp -> termino .)
    COMA            reduce using rule 76 (exp -> termino .)
    LPAREN          reduce using rule 76 (exp -> termino .)
    RPAREN          reduce using rule 76 (exp -> termino .)
    RBRACKET        reduce using rule 76 (exp -> termino .)
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110

    signo                          shift and go to state 108

state 62

    (87) factor -> lparen . expresion rparen
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    lparen                         shift and go to state 62
    expresion                      shift and go to state 111
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 63

    (80) termino -> factor .
    (81) termino -> factor . operacion termino
    (82) operacion -> . TIMES
    (83) operacion -> . DIVIDE
    (84) operacion -> . DIFF
    (85) operacion -> . EXP

    PLUS            reduce using rule 80 (termino -> factor .)
    MINUS           reduce using rule 80 (termino -> factor .)
    LESSTHAN        reduce using rule 80 (termino -> factor .)
    MORETHAN        reduce using rule 80 (termino -> factor .)
    ISEQUAL         reduce using rule 80 (termino -> factor .)
    NOTEQUAL        reduce using rule 80 (termino -> factor .)
    AND             reduce using rule 80 (termino -> factor .)
    OR              reduce using rule 80 (termino -> factor .)
    SEMICOLON       reduce using rule 80 (termino -> factor .)
    COMA            reduce using rule 80 (termino -> factor .)
    LPAREN          reduce using rule 80 (termino -> factor .)
    RPAREN          reduce using rule 80 (termino -> factor .)
    RBRACKET        reduce using rule 80 (termino -> factor .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    DIFF            shift and go to state 115
    EXP             shift and go to state 116

    operacion                      shift and go to state 112

state 64

    (67) funCall -> ID .
    (103) varcte -> ID .
    (97) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 67 (funCall -> ID .)
    LPAREN          reduce using rule 67 (funCall -> ID .)
    TIMES           reduce using rule 103 (varcte -> ID .)
    DIVIDE          reduce using rule 103 (varcte -> ID .)
    DIFF            reduce using rule 103 (varcte -> ID .)
    EXP             reduce using rule 103 (varcte -> ID .)
    PLUS            reduce using rule 103 (varcte -> ID .)
    MINUS           reduce using rule 103 (varcte -> ID .)
    LESSTHAN        reduce using rule 103 (varcte -> ID .)
    MORETHAN        reduce using rule 103 (varcte -> ID .)
    ISEQUAL         reduce using rule 103 (varcte -> ID .)
    NOTEQUAL        reduce using rule 103 (varcte -> ID .)
    AND             reduce using rule 103 (varcte -> ID .)
    OR              reduce using rule 103 (varcte -> ID .)
    SEMICOLON       reduce using rule 103 (varcte -> ID .)
    COMA            reduce using rule 103 (varcte -> ID .)
    RPAREN          reduce using rule 103 (varcte -> ID .)
    RBRACKET        reduce using rule 103 (varcte -> ID .)
    LBRACKET        reduce using rule 97 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 103 (varcte -> ID .) ]


state 65

    (86) factor -> varcte .

    TIMES           reduce using rule 86 (factor -> varcte .)
    DIVIDE          reduce using rule 86 (factor -> varcte .)
    DIFF            reduce using rule 86 (factor -> varcte .)
    EXP             reduce using rule 86 (factor -> varcte .)
    PLUS            reduce using rule 86 (factor -> varcte .)
    MINUS           reduce using rule 86 (factor -> varcte .)
    LESSTHAN        reduce using rule 86 (factor -> varcte .)
    MORETHAN        reduce using rule 86 (factor -> varcte .)
    ISEQUAL         reduce using rule 86 (factor -> varcte .)
    NOTEQUAL        reduce using rule 86 (factor -> varcte .)
    AND             reduce using rule 86 (factor -> varcte .)
    OR              reduce using rule 86 (factor -> varcte .)
    SEMICOLON       reduce using rule 86 (factor -> varcte .)
    COMA            reduce using rule 86 (factor -> varcte .)
    LPAREN          reduce using rule 86 (factor -> varcte .)
    RPAREN          reduce using rule 86 (factor -> varcte .)
    RBRACKET        reduce using rule 86 (factor -> varcte .)


state 66

    (104) varcte -> int .

    TIMES           reduce using rule 104 (varcte -> int .)
    DIVIDE          reduce using rule 104 (varcte -> int .)
    DIFF            reduce using rule 104 (varcte -> int .)
    EXP             reduce using rule 104 (varcte -> int .)
    PLUS            reduce using rule 104 (varcte -> int .)
    MINUS           reduce using rule 104 (varcte -> int .)
    LESSTHAN        reduce using rule 104 (varcte -> int .)
    MORETHAN        reduce using rule 104 (varcte -> int .)
    ISEQUAL         reduce using rule 104 (varcte -> int .)
    NOTEQUAL        reduce using rule 104 (varcte -> int .)
    AND             reduce using rule 104 (varcte -> int .)
    OR              reduce using rule 104 (varcte -> int .)
    SEMICOLON       reduce using rule 104 (varcte -> int .)
    COMA            reduce using rule 104 (varcte -> int .)
    LPAREN          reduce using rule 104 (varcte -> int .)
    RPAREN          reduce using rule 104 (varcte -> int .)
    RBRACKET        reduce using rule 104 (varcte -> int .)


state 67

    (105) varcte -> float .

    TIMES           reduce using rule 105 (varcte -> float .)
    DIVIDE          reduce using rule 105 (varcte -> float .)
    DIFF            reduce using rule 105 (varcte -> float .)
    EXP             reduce using rule 105 (varcte -> float .)
    PLUS            reduce using rule 105 (varcte -> float .)
    MINUS           reduce using rule 105 (varcte -> float .)
    LESSTHAN        reduce using rule 105 (varcte -> float .)
    MORETHAN        reduce using rule 105 (varcte -> float .)
    ISEQUAL         reduce using rule 105 (varcte -> float .)
    NOTEQUAL        reduce using rule 105 (varcte -> float .)
    AND             reduce using rule 105 (varcte -> float .)
    OR              reduce using rule 105 (varcte -> float .)
    SEMICOLON       reduce using rule 105 (varcte -> float .)
    COMA            reduce using rule 105 (varcte -> float .)
    LPAREN          reduce using rule 105 (varcte -> float .)
    RPAREN          reduce using rule 105 (varcte -> float .)
    RBRACKET        reduce using rule 105 (varcte -> float .)


state 68

    (106) varcte -> bool .

    TIMES           reduce using rule 106 (varcte -> bool .)
    DIVIDE          reduce using rule 106 (varcte -> bool .)
    DIFF            reduce using rule 106 (varcte -> bool .)
    EXP             reduce using rule 106 (varcte -> bool .)
    PLUS            reduce using rule 106 (varcte -> bool .)
    MINUS           reduce using rule 106 (varcte -> bool .)
    LESSTHAN        reduce using rule 106 (varcte -> bool .)
    MORETHAN        reduce using rule 106 (varcte -> bool .)
    ISEQUAL         reduce using rule 106 (varcte -> bool .)
    NOTEQUAL        reduce using rule 106 (varcte -> bool .)
    AND             reduce using rule 106 (varcte -> bool .)
    OR              reduce using rule 106 (varcte -> bool .)
    SEMICOLON       reduce using rule 106 (varcte -> bool .)
    COMA            reduce using rule 106 (varcte -> bool .)
    LPAREN          reduce using rule 106 (varcte -> bool .)
    RPAREN          reduce using rule 106 (varcte -> bool .)
    RBRACKET        reduce using rule 106 (varcte -> bool .)


state 69

    (107) varcte -> string .

    TIMES           reduce using rule 107 (varcte -> string .)
    DIVIDE          reduce using rule 107 (varcte -> string .)
    DIFF            reduce using rule 107 (varcte -> string .)
    EXP             reduce using rule 107 (varcte -> string .)
    PLUS            reduce using rule 107 (varcte -> string .)
    MINUS           reduce using rule 107 (varcte -> string .)
    LESSTHAN        reduce using rule 107 (varcte -> string .)
    MORETHAN        reduce using rule 107 (varcte -> string .)
    ISEQUAL         reduce using rule 107 (varcte -> string .)
    NOTEQUAL        reduce using rule 107 (varcte -> string .)
    AND             reduce using rule 107 (varcte -> string .)
    OR              reduce using rule 107 (varcte -> string .)
    SEMICOLON       reduce using rule 107 (varcte -> string .)
    COMA            reduce using rule 107 (varcte -> string .)
    LPAREN          reduce using rule 107 (varcte -> string .)
    RPAREN          reduce using rule 107 (varcte -> string .)
    RBRACKET        reduce using rule 107 (varcte -> string .)


state 70

    (108) varcte -> matrix .

    TIMES           reduce using rule 108 (varcte -> matrix .)
    DIVIDE          reduce using rule 108 (varcte -> matrix .)
    DIFF            reduce using rule 108 (varcte -> matrix .)
    EXP             reduce using rule 108 (varcte -> matrix .)
    PLUS            reduce using rule 108 (varcte -> matrix .)
    MINUS           reduce using rule 108 (varcte -> matrix .)
    LESSTHAN        reduce using rule 108 (varcte -> matrix .)
    MORETHAN        reduce using rule 108 (varcte -> matrix .)
    ISEQUAL         reduce using rule 108 (varcte -> matrix .)
    NOTEQUAL        reduce using rule 108 (varcte -> matrix .)
    AND             reduce using rule 108 (varcte -> matrix .)
    OR              reduce using rule 108 (varcte -> matrix .)
    SEMICOLON       reduce using rule 108 (varcte -> matrix .)
    COMA            reduce using rule 108 (varcte -> matrix .)
    LPAREN          reduce using rule 108 (varcte -> matrix .)
    RPAREN          reduce using rule 108 (varcte -> matrix .)
    RBRACKET        reduce using rule 108 (varcte -> matrix .)


state 71

    (109) varcte -> arr .

    TIMES           reduce using rule 109 (varcte -> arr .)
    DIVIDE          reduce using rule 109 (varcte -> arr .)
    DIFF            reduce using rule 109 (varcte -> arr .)
    EXP             reduce using rule 109 (varcte -> arr .)
    PLUS            reduce using rule 109 (varcte -> arr .)
    MINUS           reduce using rule 109 (varcte -> arr .)
    LESSTHAN        reduce using rule 109 (varcte -> arr .)
    MORETHAN        reduce using rule 109 (varcte -> arr .)
    ISEQUAL         reduce using rule 109 (varcte -> arr .)
    NOTEQUAL        reduce using rule 109 (varcte -> arr .)
    AND             reduce using rule 109 (varcte -> arr .)
    OR              reduce using rule 109 (varcte -> arr .)
    SEMICOLON       reduce using rule 109 (varcte -> arr .)
    COMA            reduce using rule 109 (varcte -> arr .)
    LPAREN          reduce using rule 109 (varcte -> arr .)
    RPAREN          reduce using rule 109 (varcte -> arr .)
    RBRACKET        reduce using rule 109 (varcte -> arr .)


state 72

    (110) int -> INT .

    TIMES           reduce using rule 110 (int -> INT .)
    DIVIDE          reduce using rule 110 (int -> INT .)
    DIFF            reduce using rule 110 (int -> INT .)
    EXP             reduce using rule 110 (int -> INT .)
    PLUS            reduce using rule 110 (int -> INT .)
    MINUS           reduce using rule 110 (int -> INT .)
    LESSTHAN        reduce using rule 110 (int -> INT .)
    MORETHAN        reduce using rule 110 (int -> INT .)
    ISEQUAL         reduce using rule 110 (int -> INT .)
    NOTEQUAL        reduce using rule 110 (int -> INT .)
    AND             reduce using rule 110 (int -> INT .)
    OR              reduce using rule 110 (int -> INT .)
    SEMICOLON       reduce using rule 110 (int -> INT .)
    COMA            reduce using rule 110 (int -> INT .)
    LPAREN          reduce using rule 110 (int -> INT .)
    RPAREN          reduce using rule 110 (int -> INT .)
    RBRACKET        reduce using rule 110 (int -> INT .)


state 73

    (111) float -> FLOAT .

    TIMES           reduce using rule 111 (float -> FLOAT .)
    DIVIDE          reduce using rule 111 (float -> FLOAT .)
    DIFF            reduce using rule 111 (float -> FLOAT .)
    EXP             reduce using rule 111 (float -> FLOAT .)
    PLUS            reduce using rule 111 (float -> FLOAT .)
    MINUS           reduce using rule 111 (float -> FLOAT .)
    LESSTHAN        reduce using rule 111 (float -> FLOAT .)
    MORETHAN        reduce using rule 111 (float -> FLOAT .)
    ISEQUAL         reduce using rule 111 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 111 (float -> FLOAT .)
    AND             reduce using rule 111 (float -> FLOAT .)
    OR              reduce using rule 111 (float -> FLOAT .)
    SEMICOLON       reduce using rule 111 (float -> FLOAT .)
    COMA            reduce using rule 111 (float -> FLOAT .)
    LPAREN          reduce using rule 111 (float -> FLOAT .)
    RPAREN          reduce using rule 111 (float -> FLOAT .)
    RBRACKET        reduce using rule 111 (float -> FLOAT .)


state 74

    (112) bool -> BOOL .

    TIMES           reduce using rule 112 (bool -> BOOL .)
    DIVIDE          reduce using rule 112 (bool -> BOOL .)
    DIFF            reduce using rule 112 (bool -> BOOL .)
    EXP             reduce using rule 112 (bool -> BOOL .)
    PLUS            reduce using rule 112 (bool -> BOOL .)
    MINUS           reduce using rule 112 (bool -> BOOL .)
    LESSTHAN        reduce using rule 112 (bool -> BOOL .)
    MORETHAN        reduce using rule 112 (bool -> BOOL .)
    ISEQUAL         reduce using rule 112 (bool -> BOOL .)
    NOTEQUAL        reduce using rule 112 (bool -> BOOL .)
    AND             reduce using rule 112 (bool -> BOOL .)
    OR              reduce using rule 112 (bool -> BOOL .)
    SEMICOLON       reduce using rule 112 (bool -> BOOL .)
    COMA            reduce using rule 112 (bool -> BOOL .)
    LPAREN          reduce using rule 112 (bool -> BOOL .)
    RPAREN          reduce using rule 112 (bool -> BOOL .)
    RBRACKET        reduce using rule 112 (bool -> BOOL .)


state 75

    (113) string -> STRING .

    TIMES           reduce using rule 113 (string -> STRING .)
    DIVIDE          reduce using rule 113 (string -> STRING .)
    DIFF            reduce using rule 113 (string -> STRING .)
    EXP             reduce using rule 113 (string -> STRING .)
    PLUS            reduce using rule 113 (string -> STRING .)
    MINUS           reduce using rule 113 (string -> STRING .)
    LESSTHAN        reduce using rule 113 (string -> STRING .)
    MORETHAN        reduce using rule 113 (string -> STRING .)
    ISEQUAL         reduce using rule 113 (string -> STRING .)
    NOTEQUAL        reduce using rule 113 (string -> STRING .)
    AND             reduce using rule 113 (string -> STRING .)
    OR              reduce using rule 113 (string -> STRING .)
    SEMICOLON       reduce using rule 113 (string -> STRING .)
    COMA            reduce using rule 113 (string -> STRING .)
    LPAREN          reduce using rule 113 (string -> STRING .)
    RPAREN          reduce using rule 113 (string -> STRING .)
    RBRACKET        reduce using rule 113 (string -> STRING .)


state 76

    (98) matrix -> openBracket . expresion mbracket
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    openBracket                    shift and go to state 76
    expresion                      shift and go to state 117
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    callArr                        shift and go to state 32

state 77

    (99) openBracket -> LBRACKET .

    ID              reduce using rule 99 (openBracket -> LBRACKET .)
    LPAREN          reduce using rule 99 (openBracket -> LBRACKET .)
    INT             reduce using rule 99 (openBracket -> LBRACKET .)
    FLOAT           reduce using rule 99 (openBracket -> LBRACKET .)
    BOOL            reduce using rule 99 (openBracket -> LBRACKET .)
    STRING          reduce using rule 99 (openBracket -> LBRACKET .)
    LBRACKET        reduce using rule 99 (openBracket -> LBRACKET .)


state 78

    (95) arr -> callArr openBracket . expresion abracket matrix
    (96) arr -> callArr openBracket . expresion abracket epsilon
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    callArr                        shift and go to state 32
    openBracket                    shift and go to state 76
    expresion                      shift and go to state 118
    matrix                         shift and go to state 70
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    arr                            shift and go to state 71

state 79

    (6) var -> vardef COLON . tipo SEMICOLON
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 120
    FLOAT           shift and go to state 121
    BOOL            shift and go to state 122
    STRING          shift and go to state 123

    tipo                           shift and go to state 119

state 80

    (7) var -> declaracionArr SEMICOLON .

    VAR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    ID              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    IF              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    WHILE           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FOR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    PRINT           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FUNCTION        reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    BREAK           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    DO              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    RPAREN          reduce using rule 7 (var -> declaracionArr SEMICOLON .)


state 81

    (8) var -> declaracionMatrix SEMICOLON .

    VAR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    ID              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    IF              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    WHILE           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FOR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    PRINT           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FUNCTION        reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    BREAK           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    DO              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    RPAREN          reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)


state 82

    (93) declaracionArr -> arrDef LBRACKET . INT RBRACKET COLON tipo
    (94) declaracionMatrix -> arrDef LBRACKET . INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    INT             shift and go to state 124


state 83

    (29) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    COMA            reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    LPAREN          reduce using rule 29 (asignacion -> ID EQUAL expresion .)
    RPAREN          reduce using rule 29 (asignacion -> ID EQUAL expresion .)


state 84

    (30) asignacion -> arr EQUAL expresion .

    SEMICOLON       reduce using rule 30 (asignacion -> arr EQUAL expresion .)
    COMA            reduce using rule 30 (asignacion -> arr EQUAL expresion .)
    LPAREN          reduce using rule 30 (asignacion -> arr EQUAL expresion .)
    RPAREN          reduce using rule 30 (asignacion -> arr EQUAL expresion .)


state 85

    (51) condicion -> IF LPAREN expresion . endCondition bloque condicionelse
    (52) endCondition -> . RPAREN
    (53) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 126
    SEMICOLON       shift and go to state 127

    endCondition                   shift and go to state 125

state 86

    (47) whileLoop -> WHILE startCondition expresion . endCondition bloque
    (52) endCondition -> . RPAREN
    (53) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 126
    SEMICOLON       shift and go to state 127

    endCondition                   shift and go to state 128

state 87

    (45) doWhile -> do bloque WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 129


state 88

    (50) forLoop -> FOR LPAREN argumentos . startCondition expresion endCondition asignacion RPAREN bloque
    (48) startCondition -> . LPAREN
    (49) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 48
    SEMICOLON       shift and go to state 49

    startCondition                 shift and go to state 130

state 89

    (74) args -> asignacion .

    COMA            reduce using rule 74 (args -> asignacion .)
    LPAREN          reduce using rule 74 (args -> asignacion .)
    SEMICOLON       reduce using rule 74 (args -> asignacion .)


state 90

    (72) argumentos -> args .
    (75) args -> args . COMA args

    LPAREN          reduce using rule 72 (argumentos -> args .)
    SEMICOLON       reduce using rule 72 (argumentos -> args .)
    COMA            shift and go to state 131


state 91

    (73) argumentos -> epsilon .

    LPAREN          reduce using rule 73 (argumentos -> epsilon .)
    SEMICOLON       reduce using rule 73 (argumentos -> epsilon .)


state 92

    (29) asignacion -> ID . EQUAL expresion
    (97) callArr -> ID .

    EQUAL           shift and go to state 44
    LBRACKET        reduce using rule 97 (callArr -> ID .)


state 93

    (31) escritura -> PRINT LPAREN escrito . RPAREN

    RPAREN          shift and go to state 132


state 94

    (32) escrito -> impr .
    (33) escrito -> impr . COMA escrito

    RPAREN          reduce using rule 32 (escrito -> impr .)
    COMA            shift and go to state 133


state 95

    (34) impr -> expresion .

    COMA            reduce using rule 34 (impr -> expresion .)
    RPAREN          reduce using rule 34 (impr -> expresion .)


state 96

    (57) funcion -> FUNCTION funcdef LPAREN . declaracion addArgs RPAREN COLON tiposreturn
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (91) epsilon -> .

    VAR             shift and go to state 10
    RPAREN          reduce using rule 91 (epsilon -> .)

    declaracion                    shift and go to state 134
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 97

    (66) functionCall -> funCall lparen funcArgs . rparen
    (69) funcArgs -> funcArgs . COMA funcArgs
    (90) rparen -> . RPAREN

    COMA            shift and go to state 136
    RPAREN          shift and go to state 137

    rparen                         shift and go to state 135

state 98

    (68) funcArgs -> checkArgs .

    COMA            reduce using rule 68 (funcArgs -> checkArgs .)
    RPAREN          reduce using rule 68 (funcArgs -> checkArgs .)


state 99

    (70) funcArgs -> epsilon .

    COMA            reduce using rule 70 (funcArgs -> epsilon .)
    RPAREN          reduce using rule 70 (funcArgs -> epsilon .)


state 100

    (71) checkArgs -> expresion .

    COMA            reduce using rule 71 (checkArgs -> expresion .)
    RPAREN          reduce using rule 71 (checkArgs -> expresion .)


state 101

    (38) condition -> exp comparacion . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    exp                            shift and go to state 58
    expresion                      shift and go to state 138
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 102

    (39) comparacion -> LESSTHAN .

    ID              reduce using rule 39 (comparacion -> LESSTHAN .)
    LPAREN          reduce using rule 39 (comparacion -> LESSTHAN .)
    INT             reduce using rule 39 (comparacion -> LESSTHAN .)
    FLOAT           reduce using rule 39 (comparacion -> LESSTHAN .)
    BOOL            reduce using rule 39 (comparacion -> LESSTHAN .)
    STRING          reduce using rule 39 (comparacion -> LESSTHAN .)
    LBRACKET        reduce using rule 39 (comparacion -> LESSTHAN .)


state 103

    (40) comparacion -> MORETHAN .

    ID              reduce using rule 40 (comparacion -> MORETHAN .)
    LPAREN          reduce using rule 40 (comparacion -> MORETHAN .)
    INT             reduce using rule 40 (comparacion -> MORETHAN .)
    FLOAT           reduce using rule 40 (comparacion -> MORETHAN .)
    BOOL            reduce using rule 40 (comparacion -> MORETHAN .)
    STRING          reduce using rule 40 (comparacion -> MORETHAN .)
    LBRACKET        reduce using rule 40 (comparacion -> MORETHAN .)


state 104

    (41) comparacion -> ISEQUAL .

    ID              reduce using rule 41 (comparacion -> ISEQUAL .)
    LPAREN          reduce using rule 41 (comparacion -> ISEQUAL .)
    INT             reduce using rule 41 (comparacion -> ISEQUAL .)
    FLOAT           reduce using rule 41 (comparacion -> ISEQUAL .)
    BOOL            reduce using rule 41 (comparacion -> ISEQUAL .)
    STRING          reduce using rule 41 (comparacion -> ISEQUAL .)
    LBRACKET        reduce using rule 41 (comparacion -> ISEQUAL .)


state 105

    (42) comparacion -> NOTEQUAL .

    ID              reduce using rule 42 (comparacion -> NOTEQUAL .)
    LPAREN          reduce using rule 42 (comparacion -> NOTEQUAL .)
    INT             reduce using rule 42 (comparacion -> NOTEQUAL .)
    FLOAT           reduce using rule 42 (comparacion -> NOTEQUAL .)
    BOOL            reduce using rule 42 (comparacion -> NOTEQUAL .)
    STRING          reduce using rule 42 (comparacion -> NOTEQUAL .)
    LBRACKET        reduce using rule 42 (comparacion -> NOTEQUAL .)


state 106

    (43) comparacion -> AND .

    ID              reduce using rule 43 (comparacion -> AND .)
    LPAREN          reduce using rule 43 (comparacion -> AND .)
    INT             reduce using rule 43 (comparacion -> AND .)
    FLOAT           reduce using rule 43 (comparacion -> AND .)
    BOOL            reduce using rule 43 (comparacion -> AND .)
    STRING          reduce using rule 43 (comparacion -> AND .)
    LBRACKET        reduce using rule 43 (comparacion -> AND .)


state 107

    (44) comparacion -> OR .

    ID              reduce using rule 44 (comparacion -> OR .)
    LPAREN          reduce using rule 44 (comparacion -> OR .)
    INT             reduce using rule 44 (comparacion -> OR .)
    FLOAT           reduce using rule 44 (comparacion -> OR .)
    BOOL            reduce using rule 44 (comparacion -> OR .)
    STRING          reduce using rule 44 (comparacion -> OR .)
    LBRACKET        reduce using rule 44 (comparacion -> OR .)


state 108

    (77) exp -> termino signo . exp
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (66) functionCall -> . funCall lparen funcArgs rparen
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (67) funCall -> . ID
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 141
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    termino                        shift and go to state 61
    exp                            shift and go to state 139
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    lparen                         shift and go to state 62
    functionCall                   shift and go to state 140
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    funCall                        shift and go to state 30
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 109

    (78) signo -> PLUS .

    ID              reduce using rule 78 (signo -> PLUS .)
    LPAREN          reduce using rule 78 (signo -> PLUS .)
    INT             reduce using rule 78 (signo -> PLUS .)
    FLOAT           reduce using rule 78 (signo -> PLUS .)
    BOOL            reduce using rule 78 (signo -> PLUS .)
    STRING          reduce using rule 78 (signo -> PLUS .)
    LBRACKET        reduce using rule 78 (signo -> PLUS .)


state 110

    (79) signo -> MINUS .

    ID              reduce using rule 79 (signo -> MINUS .)
    LPAREN          reduce using rule 79 (signo -> MINUS .)
    INT             reduce using rule 79 (signo -> MINUS .)
    FLOAT           reduce using rule 79 (signo -> MINUS .)
    BOOL            reduce using rule 79 (signo -> MINUS .)
    STRING          reduce using rule 79 (signo -> MINUS .)
    LBRACKET        reduce using rule 79 (signo -> MINUS .)


state 111

    (87) factor -> lparen expresion . rparen
    (90) rparen -> . RPAREN

    RPAREN          shift and go to state 137

    rparen                         shift and go to state 142

state 112

    (81) termino -> factor operacion . termino
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (66) functionCall -> . funCall lparen funcArgs rparen
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (67) funCall -> . ID
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 141
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    factor                         shift and go to state 63
    termino                        shift and go to state 143
    varcte                         shift and go to state 65
    lparen                         shift and go to state 62
    functionCall                   shift and go to state 140
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    funCall                        shift and go to state 30
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 113

    (82) operacion -> TIMES .

    ID              reduce using rule 82 (operacion -> TIMES .)
    LPAREN          reduce using rule 82 (operacion -> TIMES .)
    INT             reduce using rule 82 (operacion -> TIMES .)
    FLOAT           reduce using rule 82 (operacion -> TIMES .)
    BOOL            reduce using rule 82 (operacion -> TIMES .)
    STRING          reduce using rule 82 (operacion -> TIMES .)
    LBRACKET        reduce using rule 82 (operacion -> TIMES .)


state 114

    (83) operacion -> DIVIDE .

    ID              reduce using rule 83 (operacion -> DIVIDE .)
    LPAREN          reduce using rule 83 (operacion -> DIVIDE .)
    INT             reduce using rule 83 (operacion -> DIVIDE .)
    FLOAT           reduce using rule 83 (operacion -> DIVIDE .)
    BOOL            reduce using rule 83 (operacion -> DIVIDE .)
    STRING          reduce using rule 83 (operacion -> DIVIDE .)
    LBRACKET        reduce using rule 83 (operacion -> DIVIDE .)


state 115

    (84) operacion -> DIFF .

    ID              reduce using rule 84 (operacion -> DIFF .)
    LPAREN          reduce using rule 84 (operacion -> DIFF .)
    INT             reduce using rule 84 (operacion -> DIFF .)
    FLOAT           reduce using rule 84 (operacion -> DIFF .)
    BOOL            reduce using rule 84 (operacion -> DIFF .)
    STRING          reduce using rule 84 (operacion -> DIFF .)
    LBRACKET        reduce using rule 84 (operacion -> DIFF .)


state 116

    (85) operacion -> EXP .

    ID              reduce using rule 85 (operacion -> EXP .)
    LPAREN          reduce using rule 85 (operacion -> EXP .)
    INT             reduce using rule 85 (operacion -> EXP .)
    FLOAT           reduce using rule 85 (operacion -> EXP .)
    BOOL            reduce using rule 85 (operacion -> EXP .)
    STRING          reduce using rule 85 (operacion -> EXP .)
    LBRACKET        reduce using rule 85 (operacion -> EXP .)


state 117

    (98) matrix -> openBracket expresion . mbracket
    (102) mbracket -> . closeBracket
    (100) closeBracket -> . RBRACKET

    RBRACKET        shift and go to state 146

    mbracket                       shift and go to state 144
    closeBracket                   shift and go to state 145

state 118

    (95) arr -> callArr openBracket expresion . abracket matrix
    (96) arr -> callArr openBracket expresion . abracket epsilon
    (101) abracket -> . closeBracket
    (100) closeBracket -> . RBRACKET

    RBRACKET        shift and go to state 146

    abracket                       shift and go to state 147
    closeBracket                   shift and go to state 148

state 119

    (6) var -> vardef COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 149


state 120

    (10) tipo -> INT .

    SEMICOLON       reduce using rule 10 (tipo -> INT .)


state 121

    (11) tipo -> FLOAT .

    SEMICOLON       reduce using rule 11 (tipo -> FLOAT .)


state 122

    (12) tipo -> BOOL .

    SEMICOLON       reduce using rule 12 (tipo -> BOOL .)


state 123

    (13) tipo -> STRING .

    SEMICOLON       reduce using rule 13 (tipo -> STRING .)


state 124

    (93) declaracionArr -> arrDef LBRACKET INT . RBRACKET COLON tipo
    (94) declaracionMatrix -> arrDef LBRACKET INT . RBRACKET LBRACKET INT RBRACKET COLON tipo

    RBRACKET        shift and go to state 150


state 125

    (51) condicion -> IF LPAREN expresion endCondition . bloque condicionelse
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 151

state 126

    (52) endCondition -> RPAREN .

    LCURLY          reduce using rule 52 (endCondition -> RPAREN .)
    ID              reduce using rule 52 (endCondition -> RPAREN .)


state 127

    (53) endCondition -> SEMICOLON .

    LCURLY          reduce using rule 53 (endCondition -> SEMICOLON .)
    ID              reduce using rule 53 (endCondition -> SEMICOLON .)


state 128

    (47) whileLoop -> WHILE startCondition expresion endCondition . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 152

state 129

    (45) doWhile -> do bloque WHILE LPAREN . expresion RPAREN
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 153
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 130

    (50) forLoop -> FOR LPAREN argumentos startCondition . expresion endCondition asignacion RPAREN bloque
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 154
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 131

    (75) args -> args COMA . args
    (74) args -> . asignacion
    (75) args -> . args COMA args
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (97) callArr -> . ID

    ID              shift and go to state 92

    args                           shift and go to state 155
    asignacion                     shift and go to state 89
    arr                            shift and go to state 23
    callArr                        shift and go to state 32

state 132

    (31) escritura -> PRINT LPAREN escrito RPAREN .

    SEMICOLON       reduce using rule 31 (escritura -> PRINT LPAREN escrito RPAREN .)


state 133

    (33) escrito -> impr COMA . escrito
    (32) escrito -> . impr
    (33) escrito -> . impr COMA escrito
    (34) impr -> . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    impr                           shift and go to state 94
    escrito                        shift and go to state 156
    expresion                      shift and go to state 95
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 134

    (57) funcion -> FUNCTION funcdef LPAREN declaracion . addArgs RPAREN COLON tiposreturn
    (58) addArgs -> . epsilon
    (91) epsilon -> .

    RPAREN          reduce using rule 91 (epsilon -> .)

    addArgs                        shift and go to state 157
    epsilon                        shift and go to state 158

state 135

    (66) functionCall -> funCall lparen funcArgs rparen .

    SEMICOLON       reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    TIMES           reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    DIVIDE          reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    DIFF            reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    EXP             reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    PLUS            reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    MINUS           reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    LESSTHAN        reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    MORETHAN        reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    ISEQUAL         reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    NOTEQUAL        reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    AND             reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    OR              reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    COMA            reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    LPAREN          reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    RPAREN          reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)
    RBRACKET        reduce using rule 66 (functionCall -> funCall lparen funcArgs rparen .)


state 136

    (69) funcArgs -> funcArgs COMA . funcArgs
    (68) funcArgs -> . checkArgs
    (69) funcArgs -> . funcArgs COMA funcArgs
    (70) funcArgs -> . epsilon
    (71) checkArgs -> . expresion
    (91) epsilon -> .
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    COMA            reduce using rule 91 (epsilon -> .)
    RPAREN          reduce using rule 91 (epsilon -> .)
    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    funcArgs                       shift and go to state 159
    checkArgs                      shift and go to state 98
    epsilon                        shift and go to state 99
    expresion                      shift and go to state 100
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 137

    (90) rparen -> RPAREN .

    SEMICOLON       reduce using rule 90 (rparen -> RPAREN .)
    TIMES           reduce using rule 90 (rparen -> RPAREN .)
    DIVIDE          reduce using rule 90 (rparen -> RPAREN .)
    DIFF            reduce using rule 90 (rparen -> RPAREN .)
    EXP             reduce using rule 90 (rparen -> RPAREN .)
    PLUS            reduce using rule 90 (rparen -> RPAREN .)
    MINUS           reduce using rule 90 (rparen -> RPAREN .)
    LESSTHAN        reduce using rule 90 (rparen -> RPAREN .)
    MORETHAN        reduce using rule 90 (rparen -> RPAREN .)
    ISEQUAL         reduce using rule 90 (rparen -> RPAREN .)
    NOTEQUAL        reduce using rule 90 (rparen -> RPAREN .)
    AND             reduce using rule 90 (rparen -> RPAREN .)
    OR              reduce using rule 90 (rparen -> RPAREN .)
    COMA            reduce using rule 90 (rparen -> RPAREN .)
    LPAREN          reduce using rule 90 (rparen -> RPAREN .)
    RPAREN          reduce using rule 90 (rparen -> RPAREN .)
    RBRACKET        reduce using rule 90 (rparen -> RPAREN .)


state 138

    (38) condition -> exp comparacion expresion .

    SEMICOLON       reduce using rule 38 (condition -> exp comparacion expresion .)
    COMA            reduce using rule 38 (condition -> exp comparacion expresion .)
    LPAREN          reduce using rule 38 (condition -> exp comparacion expresion .)
    RPAREN          reduce using rule 38 (condition -> exp comparacion expresion .)
    RBRACKET        reduce using rule 38 (condition -> exp comparacion expresion .)


state 139

    (77) exp -> termino signo exp .

    LESSTHAN        reduce using rule 77 (exp -> termino signo exp .)
    MORETHAN        reduce using rule 77 (exp -> termino signo exp .)
    ISEQUAL         reduce using rule 77 (exp -> termino signo exp .)
    NOTEQUAL        reduce using rule 77 (exp -> termino signo exp .)
    AND             reduce using rule 77 (exp -> termino signo exp .)
    OR              reduce using rule 77 (exp -> termino signo exp .)
    SEMICOLON       reduce using rule 77 (exp -> termino signo exp .)
    COMA            reduce using rule 77 (exp -> termino signo exp .)
    LPAREN          reduce using rule 77 (exp -> termino signo exp .)
    RPAREN          reduce using rule 77 (exp -> termino signo exp .)
    RBRACKET        reduce using rule 77 (exp -> termino signo exp .)


state 140

    (88) factor -> functionCall .

    TIMES           reduce using rule 88 (factor -> functionCall .)
    DIVIDE          reduce using rule 88 (factor -> functionCall .)
    DIFF            reduce using rule 88 (factor -> functionCall .)
    EXP             reduce using rule 88 (factor -> functionCall .)
    PLUS            reduce using rule 88 (factor -> functionCall .)
    MINUS           reduce using rule 88 (factor -> functionCall .)
    LESSTHAN        reduce using rule 88 (factor -> functionCall .)
    MORETHAN        reduce using rule 88 (factor -> functionCall .)
    ISEQUAL         reduce using rule 88 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 88 (factor -> functionCall .)
    AND             reduce using rule 88 (factor -> functionCall .)
    OR              reduce using rule 88 (factor -> functionCall .)
    SEMICOLON       reduce using rule 88 (factor -> functionCall .)
    COMA            reduce using rule 88 (factor -> functionCall .)
    LPAREN          reduce using rule 88 (factor -> functionCall .)
    RPAREN          reduce using rule 88 (factor -> functionCall .)
    RBRACKET        reduce using rule 88 (factor -> functionCall .)


state 141

    (103) varcte -> ID .
    (67) funCall -> ID .
    (97) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 67 (funCall -> ID .)
    TIMES           reduce using rule 103 (varcte -> ID .)
    DIVIDE          reduce using rule 103 (varcte -> ID .)
    DIFF            reduce using rule 103 (varcte -> ID .)
    EXP             reduce using rule 103 (varcte -> ID .)
    PLUS            reduce using rule 103 (varcte -> ID .)
    MINUS           reduce using rule 103 (varcte -> ID .)
    LESSTHAN        reduce using rule 103 (varcte -> ID .)
    MORETHAN        reduce using rule 103 (varcte -> ID .)
    ISEQUAL         reduce using rule 103 (varcte -> ID .)
    NOTEQUAL        reduce using rule 103 (varcte -> ID .)
    AND             reduce using rule 103 (varcte -> ID .)
    OR              reduce using rule 103 (varcte -> ID .)
    SEMICOLON       reduce using rule 103 (varcte -> ID .)
    COMA            reduce using rule 103 (varcte -> ID .)
    RPAREN          reduce using rule 103 (varcte -> ID .)
    RBRACKET        reduce using rule 103 (varcte -> ID .)
    LPAREN          reduce using rule 67 (funCall -> ID .)
    LBRACKET        reduce using rule 97 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 103 (varcte -> ID .) ]


state 142

    (87) factor -> lparen expresion rparen .

    TIMES           reduce using rule 87 (factor -> lparen expresion rparen .)
    DIVIDE          reduce using rule 87 (factor -> lparen expresion rparen .)
    DIFF            reduce using rule 87 (factor -> lparen expresion rparen .)
    EXP             reduce using rule 87 (factor -> lparen expresion rparen .)
    PLUS            reduce using rule 87 (factor -> lparen expresion rparen .)
    MINUS           reduce using rule 87 (factor -> lparen expresion rparen .)
    LESSTHAN        reduce using rule 87 (factor -> lparen expresion rparen .)
    MORETHAN        reduce using rule 87 (factor -> lparen expresion rparen .)
    ISEQUAL         reduce using rule 87 (factor -> lparen expresion rparen .)
    NOTEQUAL        reduce using rule 87 (factor -> lparen expresion rparen .)
    AND             reduce using rule 87 (factor -> lparen expresion rparen .)
    OR              reduce using rule 87 (factor -> lparen expresion rparen .)
    SEMICOLON       reduce using rule 87 (factor -> lparen expresion rparen .)
    COMA            reduce using rule 87 (factor -> lparen expresion rparen .)
    LPAREN          reduce using rule 87 (factor -> lparen expresion rparen .)
    RPAREN          reduce using rule 87 (factor -> lparen expresion rparen .)
    RBRACKET        reduce using rule 87 (factor -> lparen expresion rparen .)


state 143

    (81) termino -> factor operacion termino .

    PLUS            reduce using rule 81 (termino -> factor operacion termino .)
    MINUS           reduce using rule 81 (termino -> factor operacion termino .)
    LESSTHAN        reduce using rule 81 (termino -> factor operacion termino .)
    MORETHAN        reduce using rule 81 (termino -> factor operacion termino .)
    ISEQUAL         reduce using rule 81 (termino -> factor operacion termino .)
    NOTEQUAL        reduce using rule 81 (termino -> factor operacion termino .)
    AND             reduce using rule 81 (termino -> factor operacion termino .)
    OR              reduce using rule 81 (termino -> factor operacion termino .)
    SEMICOLON       reduce using rule 81 (termino -> factor operacion termino .)
    COMA            reduce using rule 81 (termino -> factor operacion termino .)
    LPAREN          reduce using rule 81 (termino -> factor operacion termino .)
    RPAREN          reduce using rule 81 (termino -> factor operacion termino .)
    RBRACKET        reduce using rule 81 (termino -> factor operacion termino .)


state 144

    (98) matrix -> openBracket expresion mbracket .

    TIMES           reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    DIVIDE          reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    DIFF            reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    EXP             reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    PLUS            reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    MINUS           reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    LESSTHAN        reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    MORETHAN        reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    ISEQUAL         reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    NOTEQUAL        reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    AND             reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    OR              reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    SEMICOLON       reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    COMA            reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    LPAREN          reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    RPAREN          reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    RBRACKET        reduce using rule 98 (matrix -> openBracket expresion mbracket .)
    EQUAL           reduce using rule 98 (matrix -> openBracket expresion mbracket .)


state 145

    (102) mbracket -> closeBracket .

    TIMES           reduce using rule 102 (mbracket -> closeBracket .)
    DIVIDE          reduce using rule 102 (mbracket -> closeBracket .)
    DIFF            reduce using rule 102 (mbracket -> closeBracket .)
    EXP             reduce using rule 102 (mbracket -> closeBracket .)
    PLUS            reduce using rule 102 (mbracket -> closeBracket .)
    MINUS           reduce using rule 102 (mbracket -> closeBracket .)
    LESSTHAN        reduce using rule 102 (mbracket -> closeBracket .)
    MORETHAN        reduce using rule 102 (mbracket -> closeBracket .)
    ISEQUAL         reduce using rule 102 (mbracket -> closeBracket .)
    NOTEQUAL        reduce using rule 102 (mbracket -> closeBracket .)
    AND             reduce using rule 102 (mbracket -> closeBracket .)
    OR              reduce using rule 102 (mbracket -> closeBracket .)
    SEMICOLON       reduce using rule 102 (mbracket -> closeBracket .)
    COMA            reduce using rule 102 (mbracket -> closeBracket .)
    LPAREN          reduce using rule 102 (mbracket -> closeBracket .)
    RPAREN          reduce using rule 102 (mbracket -> closeBracket .)
    RBRACKET        reduce using rule 102 (mbracket -> closeBracket .)
    EQUAL           reduce using rule 102 (mbracket -> closeBracket .)


state 146

    (100) closeBracket -> RBRACKET .

    TIMES           reduce using rule 100 (closeBracket -> RBRACKET .)
    DIVIDE          reduce using rule 100 (closeBracket -> RBRACKET .)
    DIFF            reduce using rule 100 (closeBracket -> RBRACKET .)
    EXP             reduce using rule 100 (closeBracket -> RBRACKET .)
    PLUS            reduce using rule 100 (closeBracket -> RBRACKET .)
    MINUS           reduce using rule 100 (closeBracket -> RBRACKET .)
    LESSTHAN        reduce using rule 100 (closeBracket -> RBRACKET .)
    MORETHAN        reduce using rule 100 (closeBracket -> RBRACKET .)
    ISEQUAL         reduce using rule 100 (closeBracket -> RBRACKET .)
    NOTEQUAL        reduce using rule 100 (closeBracket -> RBRACKET .)
    AND             reduce using rule 100 (closeBracket -> RBRACKET .)
    OR              reduce using rule 100 (closeBracket -> RBRACKET .)
    SEMICOLON       reduce using rule 100 (closeBracket -> RBRACKET .)
    COMA            reduce using rule 100 (closeBracket -> RBRACKET .)
    LPAREN          reduce using rule 100 (closeBracket -> RBRACKET .)
    RPAREN          reduce using rule 100 (closeBracket -> RBRACKET .)
    RBRACKET        reduce using rule 100 (closeBracket -> RBRACKET .)
    EQUAL           reduce using rule 100 (closeBracket -> RBRACKET .)
    LBRACKET        reduce using rule 100 (closeBracket -> RBRACKET .)


state 147

    (95) arr -> callArr openBracket expresion abracket . matrix
    (96) arr -> callArr openBracket expresion abracket . epsilon
    (98) matrix -> . openBracket expresion mbracket
    (91) epsilon -> .
    (99) openBracket -> . LBRACKET

    EQUAL           reduce using rule 91 (epsilon -> .)
    TIMES           reduce using rule 91 (epsilon -> .)
    DIVIDE          reduce using rule 91 (epsilon -> .)
    DIFF            reduce using rule 91 (epsilon -> .)
    EXP             reduce using rule 91 (epsilon -> .)
    PLUS            reduce using rule 91 (epsilon -> .)
    MINUS           reduce using rule 91 (epsilon -> .)
    LESSTHAN        reduce using rule 91 (epsilon -> .)
    MORETHAN        reduce using rule 91 (epsilon -> .)
    ISEQUAL         reduce using rule 91 (epsilon -> .)
    NOTEQUAL        reduce using rule 91 (epsilon -> .)
    AND             reduce using rule 91 (epsilon -> .)
    OR              reduce using rule 91 (epsilon -> .)
    SEMICOLON       reduce using rule 91 (epsilon -> .)
    COMA            reduce using rule 91 (epsilon -> .)
    LPAREN          reduce using rule 91 (epsilon -> .)
    RPAREN          reduce using rule 91 (epsilon -> .)
    RBRACKET        reduce using rule 91 (epsilon -> .)
    LBRACKET        shift and go to state 77

    openBracket                    shift and go to state 76
    matrix                         shift and go to state 160
    epsilon                        shift and go to state 161

state 148

    (101) abracket -> closeBracket .

    LBRACKET        reduce using rule 101 (abracket -> closeBracket .)
    EQUAL           reduce using rule 101 (abracket -> closeBracket .)
    TIMES           reduce using rule 101 (abracket -> closeBracket .)
    DIVIDE          reduce using rule 101 (abracket -> closeBracket .)
    DIFF            reduce using rule 101 (abracket -> closeBracket .)
    EXP             reduce using rule 101 (abracket -> closeBracket .)
    PLUS            reduce using rule 101 (abracket -> closeBracket .)
    MINUS           reduce using rule 101 (abracket -> closeBracket .)
    LESSTHAN        reduce using rule 101 (abracket -> closeBracket .)
    MORETHAN        reduce using rule 101 (abracket -> closeBracket .)
    ISEQUAL         reduce using rule 101 (abracket -> closeBracket .)
    NOTEQUAL        reduce using rule 101 (abracket -> closeBracket .)
    AND             reduce using rule 101 (abracket -> closeBracket .)
    OR              reduce using rule 101 (abracket -> closeBracket .)
    SEMICOLON       reduce using rule 101 (abracket -> closeBracket .)
    COMA            reduce using rule 101 (abracket -> closeBracket .)
    LPAREN          reduce using rule 101 (abracket -> closeBracket .)
    RPAREN          reduce using rule 101 (abracket -> closeBracket .)
    RBRACKET        reduce using rule 101 (abracket -> closeBracket .)


state 149

    (6) var -> vardef COLON tipo SEMICOLON .

    VAR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    ID              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    IF              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    WHILE           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FOR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    PRINT           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    BREAK           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    DO              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)


state 150

    (93) declaracionArr -> arrDef LBRACKET INT RBRACKET . COLON tipo
    (94) declaracionMatrix -> arrDef LBRACKET INT RBRACKET . LBRACKET INT RBRACKET COLON tipo

    COLON           shift and go to state 163
    LBRACKET        shift and go to state 162


state 151

    (51) condicion -> IF LPAREN expresion endCondition bloque . condicionelse
    (54) condicionelse -> . else bloque
    (55) condicionelse -> . epsilon
    (56) else -> . ELSE
    (91) epsilon -> .

    ELSE            shift and go to state 167
    SEMICOLON       reduce using rule 91 (epsilon -> .)

    condicionelse                  shift and go to state 164
    else                           shift and go to state 165
    epsilon                        shift and go to state 166

state 152

    (47) whileLoop -> WHILE startCondition expresion endCondition bloque .

    SEMICOLON       reduce using rule 47 (whileLoop -> WHILE startCondition expresion endCondition bloque .)


state 153

    (45) doWhile -> do bloque WHILE LPAREN expresion . RPAREN

    RPAREN          shift and go to state 168


state 154

    (50) forLoop -> FOR LPAREN argumentos startCondition expresion . endCondition asignacion RPAREN bloque
    (52) endCondition -> . RPAREN
    (53) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 126
    SEMICOLON       shift and go to state 127

    endCondition                   shift and go to state 169

state 155

    (75) args -> args COMA args .
    (75) args -> args . COMA args

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 75 (args -> args COMA args .)
    SEMICOLON       reduce using rule 75 (args -> args COMA args .)
    COMA            shift and go to state 131

  ! COMA            [ reduce using rule 75 (args -> args COMA args .) ]


state 156

    (33) escrito -> impr COMA escrito .

    RPAREN          reduce using rule 33 (escrito -> impr COMA escrito .)


state 157

    (57) funcion -> FUNCTION funcdef LPAREN declaracion addArgs . RPAREN COLON tiposreturn

    RPAREN          shift and go to state 170


state 158

    (58) addArgs -> epsilon .

    RPAREN          reduce using rule 58 (addArgs -> epsilon .)


state 159

    (69) funcArgs -> funcArgs COMA funcArgs .
    (69) funcArgs -> funcArgs . COMA funcArgs

  ! shift/reduce conflict for COMA resolved as shift
    RPAREN          reduce using rule 69 (funcArgs -> funcArgs COMA funcArgs .)
    COMA            shift and go to state 136

  ! COMA            [ reduce using rule 69 (funcArgs -> funcArgs COMA funcArgs .) ]


state 160

    (95) arr -> callArr openBracket expresion abracket matrix .

    EQUAL           reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    TIMES           reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    DIVIDE          reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    DIFF            reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    EXP             reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    PLUS            reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    MINUS           reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    LESSTHAN        reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    MORETHAN        reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    ISEQUAL         reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    NOTEQUAL        reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    AND             reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    OR              reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    SEMICOLON       reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    COMA            reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    LPAREN          reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    RPAREN          reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)
    RBRACKET        reduce using rule 95 (arr -> callArr openBracket expresion abracket matrix .)


state 161

    (96) arr -> callArr openBracket expresion abracket epsilon .

    EQUAL           reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    TIMES           reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    DIVIDE          reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    DIFF            reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    EXP             reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    PLUS            reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    MINUS           reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    LESSTHAN        reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    MORETHAN        reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    ISEQUAL         reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    NOTEQUAL        reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    AND             reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    OR              reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    SEMICOLON       reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    COMA            reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    LPAREN          reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    RPAREN          reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)
    RBRACKET        reduce using rule 96 (arr -> callArr openBracket expresion abracket epsilon .)


state 162

    (94) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET . INT RBRACKET COLON tipo

    INT             shift and go to state 171


state 163

    (93) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 120
    FLOAT           shift and go to state 121
    BOOL            shift and go to state 122
    STRING          shift and go to state 123

    tipo                           shift and go to state 172

state 164

    (51) condicion -> IF LPAREN expresion endCondition bloque condicionelse .

    SEMICOLON       reduce using rule 51 (condicion -> IF LPAREN expresion endCondition bloque condicionelse .)


state 165

    (54) condicionelse -> else . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 173

state 166

    (55) condicionelse -> epsilon .

    SEMICOLON       reduce using rule 55 (condicionelse -> epsilon .)


state 167

    (56) else -> ELSE .

    LCURLY          reduce using rule 56 (else -> ELSE .)


state 168

    (45) doWhile -> do bloque WHILE LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 45 (doWhile -> do bloque WHILE LPAREN expresion RPAREN .)


state 169

    (50) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition . asignacion RPAREN bloque
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (97) callArr -> . ID

    ID              shift and go to state 92

    asignacion                     shift and go to state 174
    arr                            shift and go to state 23
    callArr                        shift and go to state 32

state 170

    (57) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN . COLON tiposreturn

    COLON           shift and go to state 175


state 171

    (94) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT . RBRACKET COLON tipo

    RBRACKET        shift and go to state 176


state 172

    (93) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 93 (declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .)


state 173

    (54) condicionelse -> else bloque .

    SEMICOLON       reduce using rule 54 (condicionelse -> else bloque .)


state 174

    (50) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion . RPAREN bloque

    RPAREN          shift and go to state 177


state 175

    (57) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON . tiposreturn
    (60) tiposreturn -> . tiposFuncion bloqueReturn
    (61) tiposreturn -> . VOID bloque
    (62) tiposFuncion -> . INT
    (63) tiposFuncion -> . FLOAT
    (64) tiposFuncion -> . BOOL
    (65) tiposFuncion -> . STRING

    VOID            shift and go to state 180
    INT             shift and go to state 181
    FLOAT           shift and go to state 182
    BOOL            shift and go to state 183
    STRING          shift and go to state 184

    tiposreturn                    shift and go to state 178
    tiposFuncion                   shift and go to state 179

state 176

    (94) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET . COLON tipo

    COLON           shift and go to state 185


state 177

    (50) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 186

state 178

    (57) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .

    SEMICOLON       reduce using rule 57 (funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .)


state 179

    (60) tiposreturn -> tiposFuncion . bloqueReturn
    (15) bloqueReturn -> . LCURLY declaracion estatutoExp returnexp RCURLY

    LCURLY          shift and go to state 188

    bloqueReturn                   shift and go to state 187

state 180

    (61) tiposreturn -> VOID . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 189

state 181

    (62) tiposFuncion -> INT .

    LCURLY          reduce using rule 62 (tiposFuncion -> INT .)


state 182

    (63) tiposFuncion -> FLOAT .

    LCURLY          reduce using rule 63 (tiposFuncion -> FLOAT .)


state 183

    (64) tiposFuncion -> BOOL .

    LCURLY          reduce using rule 64 (tiposFuncion -> BOOL .)


state 184

    (65) tiposFuncion -> STRING .

    LCURLY          reduce using rule 65 (tiposFuncion -> STRING .)


state 185

    (94) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 120
    FLOAT           shift and go to state 121
    BOOL            shift and go to state 122
    STRING          shift and go to state 123

    tipo                           shift and go to state 190

state 186

    (50) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .

    SEMICOLON       reduce using rule 50 (forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .)


state 187

    (60) tiposreturn -> tiposFuncion bloqueReturn .

    SEMICOLON       reduce using rule 60 (tiposreturn -> tiposFuncion bloqueReturn .)


state 188

    (15) bloqueReturn -> LCURLY . declaracion estatutoExp returnexp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (91) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 91 (epsilon -> .)
    IF              reduce using rule 91 (epsilon -> .)
    WHILE           reduce using rule 91 (epsilon -> .)
    FOR             reduce using rule 91 (epsilon -> .)
    PRINT           reduce using rule 91 (epsilon -> .)
    FUNCTION        reduce using rule 91 (epsilon -> .)
    BREAK           reduce using rule 91 (epsilon -> .)
    DO              reduce using rule 91 (epsilon -> .)

    declaracion                    shift and go to state 191
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 189

    (61) tiposreturn -> VOID bloque .

    SEMICOLON       reduce using rule 61 (tiposreturn -> VOID bloque .)


state 190

    (94) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 94 (declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .)


state 191

    (15) bloqueReturn -> LCURLY declaracion . estatutoExp returnexp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (51) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (50) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (57) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (66) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (46) do -> . DO
    (67) funCall -> . ID
    (97) callArr -> . ID

    ID              shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 27
    PRINT           shift and go to state 28
    FUNCTION        shift and go to state 29
    BREAK           shift and go to state 31
    DO              shift and go to state 33

    estatutoExp                    shift and go to state 192
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    arr                            shift and go to state 23
    do                             shift and go to state 26
    funCall                        shift and go to state 30
    callArr                        shift and go to state 32

state 192

    (15) bloqueReturn -> LCURLY declaracion estatutoExp . returnexp RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (28) returnexp -> . RETURN expresion SEMICOLON
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (26) estatuto -> . break
    (29) asignacion -> . ID EQUAL expresion
    (30) asignacion -> . arr EQUAL expresion
    (51) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (47) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (45) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (50) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (57) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (66) functionCall -> . funCall lparen funcArgs rparen
    (27) break -> . BREAK expresion
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (46) do -> . DO
    (67) funCall -> . ID
    (97) callArr -> . ID

    RETURN          shift and go to state 194
    ID              shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 27
    PRINT           shift and go to state 28
    FUNCTION        shift and go to state 29
    BREAK           shift and go to state 31
    DO              shift and go to state 33

    estatutoExp                    shift and go to state 41
    returnexp                      shift and go to state 193
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    break                          shift and go to state 21
    arr                            shift and go to state 23
    do                             shift and go to state 26
    funCall                        shift and go to state 30
    callArr                        shift and go to state 32

state 193

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp . RCURLY

    RCURLY          shift and go to state 195


state 194

    (28) returnexp -> RETURN . expresion SEMICOLON
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (76) exp -> . termino
    (77) exp -> . termino signo exp
    (38) condition -> . exp comparacion expresion
    (66) functionCall -> . funCall lparen funcArgs rparen
    (80) termino -> . factor
    (81) termino -> . factor operacion termino
    (67) funCall -> . ID
    (86) factor -> . varcte
    (87) factor -> . lparen expresion rparen
    (88) factor -> . functionCall
    (103) varcte -> . ID
    (104) varcte -> . int
    (105) varcte -> . float
    (106) varcte -> . bool
    (107) varcte -> . string
    (108) varcte -> . matrix
    (109) varcte -> . arr
    (89) lparen -> . LPAREN
    (110) int -> . INT
    (111) float -> . FLOAT
    (112) bool -> . BOOL
    (113) string -> . STRING
    (98) matrix -> . openBracket expresion mbracket
    (95) arr -> . callArr openBracket expresion abracket matrix
    (96) arr -> . callArr openBracket expresion abracket epsilon
    (99) openBracket -> . LBRACKET
    (97) callArr -> . ID

    ID              shift and go to state 64
    LPAREN          shift and go to state 56
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 77

    expresion                      shift and go to state 196
    exp                            shift and go to state 58
    condition                      shift and go to state 59
    functionCall                   shift and go to state 60
    termino                        shift and go to state 61
    funCall                        shift and go to state 30
    lparen                         shift and go to state 62
    factor                         shift and go to state 63
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    openBracket                    shift and go to state 76
    callArr                        shift and go to state 32

state 195

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .

    SEMICOLON       reduce using rule 15 (bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .)


state 196

    (28) returnexp -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 197


state 197

    (28) returnexp -> RETURN expresion SEMICOLON .

    RCURLY          reduce using rule 28 (returnexp -> RETURN expresion SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 41 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 41 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 41 resolved as shift
WARNING: shift/reduce conflict for DO in state 41 resolved as shift
WARNING: shift/reduce conflict for COMA in state 155 resolved as shift
WARNING: shift/reduce conflict for COMA in state 159 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (expresion -> functionCall)
WARNING: rejected rule (factor -> functionCall) in state 60
WARNING: reduce/reduce conflict in state 64 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 64
WARNING: reduce/reduce conflict in state 141 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 141
