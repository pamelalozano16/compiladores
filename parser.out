Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START LPAREN RPAREN bloque
Rule 2     declaracion -> vars
Rule 3     declaracion -> epsilon
Rule 4     vars -> VAR var
Rule 5     vars -> vars vars
Rule 6     var -> vardef COLON tipo SEMICOLON
Rule 7     var -> declaracionArr SEMICOLON
Rule 8     var -> declaracionMatrix SEMICOLON
Rule 9     vardef -> ID
Rule 10    tipo -> INT
Rule 11    tipo -> FLOAT
Rule 12    tipo -> BOOL
Rule 13    tipo -> STRING
Rule 14    bloque -> LCURLY declaracion estatutoExp RCURLY
Rule 15    bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY
Rule 16    estatutoExp -> estatuto SEMICOLON
Rule 17    estatutoExp -> estatutoExp estatutoExp
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> asignacionArr
Rule 20    estatuto -> condicion
Rule 21    estatuto -> whileLoop
Rule 22    estatuto -> doWhile
Rule 23    estatuto -> forLoop
Rule 24    estatuto -> escritura
Rule 25    estatuto -> funcion
Rule 26    estatuto -> functionCall
Rule 27    estatuto -> break
Rule 28    break -> BREAK expresion
Rule 29    returnexp -> RETURN expresion SEMICOLON
Rule 30    asignacion -> ID EQUAL expresion
Rule 31    escritura -> PRINT LPAREN escrito RPAREN
Rule 32    escrito -> impr
Rule 33    escrito -> impr COMA escrito
Rule 34    impr -> expresion
Rule 35    expresion -> exp
Rule 36    expresion -> condition
Rule 37    expresion -> functionCall
Rule 38    expresion -> arr
Rule 39    condition -> exp comparacion expresion
Rule 40    comparacion -> LESSTHAN
Rule 41    comparacion -> MORETHAN
Rule 42    comparacion -> ISEQUAL
Rule 43    comparacion -> NOTEQUAL
Rule 44    comparacion -> AND
Rule 45    comparacion -> OR
Rule 46    doWhile -> do bloque WHILE LPAREN expresion RPAREN
Rule 47    do -> DO
Rule 48    whileLoop -> WHILE startCondition expresion endCondition bloque
Rule 49    startCondition -> LPAREN
Rule 50    startCondition -> SEMICOLON
Rule 51    forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
Rule 52    condicion -> IF LPAREN expresion endCondition bloque condicionelse
Rule 53    endCondition -> RPAREN
Rule 54    endCondition -> SEMICOLON
Rule 55    condicionelse -> else bloque
Rule 56    condicionelse -> epsilon
Rule 57    else -> ELSE
Rule 58    funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
Rule 59    addArgs -> epsilon
Rule 60    funcdef -> ID
Rule 61    tiposreturn -> tiposFuncion bloqueReturn
Rule 62    tiposreturn -> VOID bloque
Rule 63    tiposFuncion -> INT
Rule 64    tiposFuncion -> FLOAT
Rule 65    tiposFuncion -> BOOL
Rule 66    tiposFuncion -> STRING
Rule 67    functionCall -> funCall lparen funcArgs rparen
Rule 68    funCall -> ID
Rule 69    funcArgs -> checkArgs
Rule 70    funcArgs -> funcArgs COMA funcArgs
Rule 71    funcArgs -> epsilon
Rule 72    checkArgs -> expresion
Rule 73    argumentos -> args
Rule 74    argumentos -> epsilon
Rule 75    args -> asignacion
Rule 76    args -> args COMA args
Rule 77    exp -> termino
Rule 78    exp -> termino signo exp
Rule 79    signo -> PLUS
Rule 80    signo -> MINUS
Rule 81    termino -> factor
Rule 82    termino -> factor operacion termino
Rule 83    operacion -> TIMES
Rule 84    operacion -> DIVIDE
Rule 85    operacion -> DIFF
Rule 86    operacion -> EXP
Rule 87    factor -> varcte
Rule 88    factor -> lparen expresion rparen
Rule 89    factor -> functionCall
Rule 90    lparen -> LPAREN
Rule 91    rparen -> RPAREN
Rule 92    epsilon -> <empty>
Rule 93    arrDef -> ID
Rule 94    declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo
Rule 95    declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
Rule 96    asignacionArr -> arr arrayEqual expresion
Rule 97    arrayEqual -> EQUAL
Rule 98    arr -> callArr openBracket expresion abracket matrix
Rule 99    arr -> callArr openBracket expresion abracket epsilon
Rule 100   callArr -> ID
Rule 101   matrix -> openBracket expresion mbracket
Rule 102   openBracket -> LBRACKET
Rule 103   closeBracket -> RBRACKET
Rule 104   abracket -> closeBracket
Rule 105   mbracket -> closeBracket
Rule 106   varcte -> ID
Rule 107   varcte -> int
Rule 108   varcte -> float
Rule 109   varcte -> bool
Rule 110   varcte -> string
Rule 111   varcte -> matrix
Rule 112   varcte -> arr
Rule 113   int -> INT
Rule 114   float -> FLOAT
Rule 115   bool -> BOOL
Rule 116   string -> STRING

Terminals, with rules where they appear

AND                  : 44
BOOL                 : 12 65 115
BREAK                : 28
COLON                : 6 58 94 95
COMA                 : 33 70 76
DIFF                 : 85
DIVIDE               : 84
DO                   : 47
ELSE                 : 57
EQUAL                : 30 97
EXP                  : 86
FLOAT                : 11 64 114
FOR                  : 51
FUNCTION             : 58
ID                   : 9 30 60 68 93 100 106
IF                   : 52
INT                  : 10 63 94 95 95 113
ISEQUAL              : 42
LBRACKET             : 94 95 95 102
LCURLY               : 14 15
LESSTHAN             : 40
LPAREN               : 1 31 46 49 51 52 58 90
MINUS                : 80
MORETHAN             : 41
NOTEQUAL             : 43
OR                   : 45
PLUS                 : 79
PRINT                : 31
RBRACKET             : 94 95 95 103
RCURLY               : 14 15
RETURN               : 29
RPAREN               : 1 31 46 51 53 58 91
SEMICOLON            : 6 7 8 16 29 50 54
START                : 1
STRING               : 13 66 116
TIMES                : 83
VAR                  : 4
VOID                 : 62
WHILE                : 46 48
error                : 

Nonterminals, with rules where they appear

abracket             : 98 99
addArgs              : 58
args                 : 73 76 76
argumentos           : 51
arr                  : 38 96 112
arrDef               : 94 95
arrayEqual           : 96
asignacion           : 18 51 75
asignacionArr        : 19
bloque               : 1 46 48 51 52 55 62
bloqueReturn         : 61
bool                 : 109
break                : 27
callArr              : 98 99
checkArgs            : 69
closeBracket         : 104 105
comparacion          : 39
condicion            : 20
condicionelse        : 52
condition            : 36
declaracion          : 14 15 58
declaracionArr       : 7
declaracionMatrix    : 8
do                   : 46
doWhile              : 22
else                 : 55
endCondition         : 48 51 52
epsilon              : 3 56 59 71 74 99
escrito              : 31 33
escritura            : 24
estatuto             : 16
estatutoExp          : 14 15 17 17
exp                  : 35 39 78
expresion            : 28 29 30 34 39 46 48 51 52 72 88 96 98 99 101
factor               : 81 82
float                : 108
forLoop              : 23
funCall              : 67
funcArgs             : 67 70 70
funcdef              : 58
funcion              : 25
functionCall         : 26 37 89
impr                 : 32 33
int                  : 107
lparen               : 67 88
matrix               : 98 111
mbracket             : 101
openBracket          : 98 99 101
operacion            : 82
programa             : 0
returnexp            : 15
rparen               : 67 88
signo                : 78
startCondition       : 48 51
string               : 110
termino              : 77 78 82
tipo                 : 6 94 95
tiposFuncion         : 61
tiposreturn          : 58
var                  : 4
varcte               : 87
vardef               : 6
vars                 : 2 5 5
whileLoop            : 21

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START LPAREN RPAREN bloque

    START           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> START . LPAREN RPAREN bloque

    LPAREN          shift and go to state 3


state 3

    (1) programa -> START LPAREN . RPAREN bloque

    RPAREN          shift and go to state 4


state 4

    (1) programa -> START LPAREN RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 5

state 5

    (1) programa -> START LPAREN RPAREN bloque .

    $end            reduce using rule 1 (programa -> START LPAREN RPAREN bloque .)


state 6

    (14) bloque -> LCURLY . declaracion estatutoExp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (92) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 92 (epsilon -> .)
    IF              reduce using rule 92 (epsilon -> .)
    WHILE           reduce using rule 92 (epsilon -> .)
    FOR             reduce using rule 92 (epsilon -> .)
    PRINT           reduce using rule 92 (epsilon -> .)
    FUNCTION        reduce using rule 92 (epsilon -> .)
    BREAK           reduce using rule 92 (epsilon -> .)
    DO              reduce using rule 92 (epsilon -> .)

    declaracion                    shift and go to state 7
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 7

    (14) bloque -> LCURLY declaracion . estatutoExp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . asignacionArr
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (27) estatuto -> . break
    (30) asignacion -> . ID EQUAL expresion
    (96) asignacionArr -> . arr arrayEqual expresion
    (52) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (48) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (46) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (67) functionCall -> . funCall lparen funcArgs rparen
    (28) break -> . BREAK expresion
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (47) do -> . DO
    (68) funCall -> . ID
    (100) callArr -> . ID

    ID              shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    FUNCTION        shift and go to state 30
    BREAK           shift and go to state 32
    DO              shift and go to state 34

    estatutoExp                    shift and go to state 11
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    asignacionArr                  shift and go to state 14
    condicion                      shift and go to state 15
    whileLoop                      shift and go to state 16
    doWhile                        shift and go to state 17
    forLoop                        shift and go to state 18
    escritura                      shift and go to state 19
    funcion                        shift and go to state 20
    functionCall                   shift and go to state 21
    break                          shift and go to state 22
    arr                            shift and go to state 24
    do                             shift and go to state 27
    funCall                        shift and go to state 31
    callArr                        shift and go to state 33

state 8

    (2) declaracion -> vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

    ID              reduce using rule 2 (declaracion -> vars .)
    IF              reduce using rule 2 (declaracion -> vars .)
    WHILE           reduce using rule 2 (declaracion -> vars .)
    FOR             reduce using rule 2 (declaracion -> vars .)
    PRINT           reduce using rule 2 (declaracion -> vars .)
    FUNCTION        reduce using rule 2 (declaracion -> vars .)
    BREAK           reduce using rule 2 (declaracion -> vars .)
    DO              reduce using rule 2 (declaracion -> vars .)
    RPAREN          reduce using rule 2 (declaracion -> vars .)
    VAR             shift and go to state 10

    vars                           shift and go to state 35

state 9

    (3) declaracion -> epsilon .

    ID              reduce using rule 3 (declaracion -> epsilon .)
    IF              reduce using rule 3 (declaracion -> epsilon .)
    WHILE           reduce using rule 3 (declaracion -> epsilon .)
    FOR             reduce using rule 3 (declaracion -> epsilon .)
    PRINT           reduce using rule 3 (declaracion -> epsilon .)
    FUNCTION        reduce using rule 3 (declaracion -> epsilon .)
    BREAK           reduce using rule 3 (declaracion -> epsilon .)
    DO              reduce using rule 3 (declaracion -> epsilon .)
    RPAREN          reduce using rule 3 (declaracion -> epsilon .)


state 10

    (4) vars -> VAR . var
    (6) var -> . vardef COLON tipo SEMICOLON
    (7) var -> . declaracionArr SEMICOLON
    (8) var -> . declaracionMatrix SEMICOLON
    (9) vardef -> . ID
    (94) declaracionArr -> . arrDef LBRACKET INT RBRACKET COLON tipo
    (95) declaracionMatrix -> . arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
    (93) arrDef -> . ID

    ID              shift and go to state 40

    var                            shift and go to state 36
    vardef                         shift and go to state 37
    declaracionArr                 shift and go to state 38
    declaracionMatrix              shift and go to state 39
    arrDef                         shift and go to state 41

state 11

    (14) bloque -> LCURLY declaracion estatutoExp . RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . asignacionArr
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (27) estatuto -> . break
    (30) asignacion -> . ID EQUAL expresion
    (96) asignacionArr -> . arr arrayEqual expresion
    (52) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (48) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (46) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (67) functionCall -> . funCall lparen funcArgs rparen
    (28) break -> . BREAK expresion
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (47) do -> . DO
    (68) funCall -> . ID
    (100) callArr -> . ID

    RCURLY          shift and go to state 43
    ID              shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    FUNCTION        shift and go to state 30
    BREAK           shift and go to state 32
    DO              shift and go to state 34

    estatutoExp                    shift and go to state 42
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    asignacionArr                  shift and go to state 14
    condicion                      shift and go to state 15
    whileLoop                      shift and go to state 16
    doWhile                        shift and go to state 17
    forLoop                        shift and go to state 18
    escritura                      shift and go to state 19
    funcion                        shift and go to state 20
    functionCall                   shift and go to state 21
    break                          shift and go to state 22
    arr                            shift and go to state 24
    do                             shift and go to state 27
    funCall                        shift and go to state 31
    callArr                        shift and go to state 33

state 12

    (16) estatutoExp -> estatuto . SEMICOLON

    SEMICOLON       shift and go to state 44


state 13

    (18) estatuto -> asignacion .

    SEMICOLON       reduce using rule 18 (estatuto -> asignacion .)


state 14

    (19) estatuto -> asignacionArr .

    SEMICOLON       reduce using rule 19 (estatuto -> asignacionArr .)


state 15

    (20) estatuto -> condicion .

    SEMICOLON       reduce using rule 20 (estatuto -> condicion .)


state 16

    (21) estatuto -> whileLoop .

    SEMICOLON       reduce using rule 21 (estatuto -> whileLoop .)


state 17

    (22) estatuto -> doWhile .

    SEMICOLON       reduce using rule 22 (estatuto -> doWhile .)


state 18

    (23) estatuto -> forLoop .

    SEMICOLON       reduce using rule 23 (estatuto -> forLoop .)


state 19

    (24) estatuto -> escritura .

    SEMICOLON       reduce using rule 24 (estatuto -> escritura .)


state 20

    (25) estatuto -> funcion .

    SEMICOLON       reduce using rule 25 (estatuto -> funcion .)


state 21

    (26) estatuto -> functionCall .

    SEMICOLON       reduce using rule 26 (estatuto -> functionCall .)


state 22

    (27) estatuto -> break .

    SEMICOLON       reduce using rule 27 (estatuto -> break .)


state 23

    (30) asignacion -> ID . EQUAL expresion
    (68) funCall -> ID .
    (100) callArr -> ID .

    EQUAL           shift and go to state 45
    LPAREN          reduce using rule 68 (funCall -> ID .)
    LBRACKET        reduce using rule 100 (callArr -> ID .)


state 24

    (96) asignacionArr -> arr . arrayEqual expresion
    (97) arrayEqual -> . EQUAL

    EQUAL           shift and go to state 47

    arrayEqual                     shift and go to state 46

state 25

    (52) condicion -> IF . LPAREN expresion endCondition bloque condicionelse

    LPAREN          shift and go to state 48


state 26

    (48) whileLoop -> WHILE . startCondition expresion endCondition bloque
    (49) startCondition -> . LPAREN
    (50) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 50
    SEMICOLON       shift and go to state 51

    startCondition                 shift and go to state 49

state 27

    (46) doWhile -> do . bloque WHILE LPAREN expresion RPAREN
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 52

state 28

    (51) forLoop -> FOR . LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque

    LPAREN          shift and go to state 53


state 29

    (31) escritura -> PRINT . LPAREN escrito RPAREN

    LPAREN          shift and go to state 54


state 30

    (58) funcion -> FUNCTION . funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (60) funcdef -> . ID

    ID              shift and go to state 56

    funcdef                        shift and go to state 55

state 31

    (67) functionCall -> funCall . lparen funcArgs rparen
    (90) lparen -> . LPAREN

    LPAREN          shift and go to state 58

    lparen                         shift and go to state 57

state 32

    (28) break -> BREAK . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 59
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 33

    (98) arr -> callArr . openBracket expresion abracket matrix
    (99) arr -> callArr . openBracket expresion abracket epsilon
    (102) openBracket -> . LBRACKET

    LBRACKET        shift and go to state 79

    openBracket                    shift and go to state 80

state 34

    (47) do -> DO .

    LCURLY          reduce using rule 47 (do -> DO .)


state 35

    (5) vars -> vars vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 5 (vars -> vars vars .)
    IF              reduce using rule 5 (vars -> vars vars .)
    WHILE           reduce using rule 5 (vars -> vars vars .)
    FOR             reduce using rule 5 (vars -> vars vars .)
    PRINT           reduce using rule 5 (vars -> vars vars .)
    FUNCTION        reduce using rule 5 (vars -> vars vars .)
    BREAK           reduce using rule 5 (vars -> vars vars .)
    DO              reduce using rule 5 (vars -> vars vars .)
    RPAREN          reduce using rule 5 (vars -> vars vars .)
    VAR             shift and go to state 10

  ! VAR             [ reduce using rule 5 (vars -> vars vars .) ]

    vars                           shift and go to state 35

state 36

    (4) vars -> VAR var .

    VAR             reduce using rule 4 (vars -> VAR var .)
    ID              reduce using rule 4 (vars -> VAR var .)
    IF              reduce using rule 4 (vars -> VAR var .)
    WHILE           reduce using rule 4 (vars -> VAR var .)
    FOR             reduce using rule 4 (vars -> VAR var .)
    PRINT           reduce using rule 4 (vars -> VAR var .)
    FUNCTION        reduce using rule 4 (vars -> VAR var .)
    BREAK           reduce using rule 4 (vars -> VAR var .)
    DO              reduce using rule 4 (vars -> VAR var .)
    RPAREN          reduce using rule 4 (vars -> VAR var .)


state 37

    (6) var -> vardef . COLON tipo SEMICOLON

    COLON           shift and go to state 81


state 38

    (7) var -> declaracionArr . SEMICOLON

    SEMICOLON       shift and go to state 82


state 39

    (8) var -> declaracionMatrix . SEMICOLON

    SEMICOLON       shift and go to state 83


state 40

    (9) vardef -> ID .
    (93) arrDef -> ID .

    COLON           reduce using rule 9 (vardef -> ID .)
    LBRACKET        reduce using rule 93 (arrDef -> ID .)


state 41

    (94) declaracionArr -> arrDef . LBRACKET INT RBRACKET COLON tipo
    (95) declaracionMatrix -> arrDef . LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    LBRACKET        shift and go to state 84


state 42

    (17) estatutoExp -> estatutoExp estatutoExp .
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . asignacionArr
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (27) estatuto -> . break
    (30) asignacion -> . ID EQUAL expresion
    (96) asignacionArr -> . arr arrayEqual expresion
    (52) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (48) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (46) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (67) functionCall -> . funCall lparen funcArgs rparen
    (28) break -> . BREAK expresion
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (47) do -> . DO
    (68) funCall -> . ID
    (100) callArr -> . ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    RCURLY          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    RETURN          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    ID              shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    FUNCTION        shift and go to state 30
    BREAK           shift and go to state 32
    DO              shift and go to state 34

  ! ID              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! IF              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! WHILE           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FOR             [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! PRINT           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FUNCTION        [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! BREAK           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! DO              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]

    estatutoExp                    shift and go to state 42
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    asignacionArr                  shift and go to state 14
    condicion                      shift and go to state 15
    whileLoop                      shift and go to state 16
    doWhile                        shift and go to state 17
    forLoop                        shift and go to state 18
    escritura                      shift and go to state 19
    funcion                        shift and go to state 20
    functionCall                   shift and go to state 21
    break                          shift and go to state 22
    arr                            shift and go to state 24
    do                             shift and go to state 27
    funCall                        shift and go to state 31
    callArr                        shift and go to state 33

state 43

    (14) bloque -> LCURLY declaracion estatutoExp RCURLY .

    $end            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    WHILE           reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    ELSE            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    SEMICOLON       reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)


state 44

    (16) estatutoExp -> estatuto SEMICOLON .

    RCURLY          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    ID              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    IF              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    WHILE           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FOR             reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    PRINT           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FUNCTION        reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    BREAK           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    DO              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    RETURN          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)


state 45

    (30) asignacion -> ID EQUAL . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 85
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 46

    (96) asignacionArr -> arr arrayEqual . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    arr                            shift and go to state 63
    expresion                      shift and go to state 86
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 47

    (97) arrayEqual -> EQUAL .

    ID              reduce using rule 97 (arrayEqual -> EQUAL .)
    LPAREN          reduce using rule 97 (arrayEqual -> EQUAL .)
    INT             reduce using rule 97 (arrayEqual -> EQUAL .)
    FLOAT           reduce using rule 97 (arrayEqual -> EQUAL .)
    BOOL            reduce using rule 97 (arrayEqual -> EQUAL .)
    STRING          reduce using rule 97 (arrayEqual -> EQUAL .)
    LBRACKET        reduce using rule 97 (arrayEqual -> EQUAL .)


state 48

    (52) condicion -> IF LPAREN . expresion endCondition bloque condicionelse
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 87
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 49

    (48) whileLoop -> WHILE startCondition . expresion endCondition bloque
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 88
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 50

    (49) startCondition -> LPAREN .

    ID              reduce using rule 49 (startCondition -> LPAREN .)
    LPAREN          reduce using rule 49 (startCondition -> LPAREN .)
    INT             reduce using rule 49 (startCondition -> LPAREN .)
    FLOAT           reduce using rule 49 (startCondition -> LPAREN .)
    BOOL            reduce using rule 49 (startCondition -> LPAREN .)
    STRING          reduce using rule 49 (startCondition -> LPAREN .)
    LBRACKET        reduce using rule 49 (startCondition -> LPAREN .)


state 51

    (50) startCondition -> SEMICOLON .

    ID              reduce using rule 50 (startCondition -> SEMICOLON .)
    LPAREN          reduce using rule 50 (startCondition -> SEMICOLON .)
    INT             reduce using rule 50 (startCondition -> SEMICOLON .)
    FLOAT           reduce using rule 50 (startCondition -> SEMICOLON .)
    BOOL            reduce using rule 50 (startCondition -> SEMICOLON .)
    STRING          reduce using rule 50 (startCondition -> SEMICOLON .)
    LBRACKET        reduce using rule 50 (startCondition -> SEMICOLON .)


state 52

    (46) doWhile -> do bloque . WHILE LPAREN expresion RPAREN

    WHILE           shift and go to state 89


state 53

    (51) forLoop -> FOR LPAREN . argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (73) argumentos -> . args
    (74) argumentos -> . epsilon
    (75) args -> . asignacion
    (76) args -> . args COMA args
    (92) epsilon -> .
    (30) asignacion -> . ID EQUAL expresion

    LPAREN          reduce using rule 92 (epsilon -> .)
    SEMICOLON       reduce using rule 92 (epsilon -> .)
    ID              shift and go to state 94

    argumentos                     shift and go to state 90
    asignacion                     shift and go to state 91
    args                           shift and go to state 92
    epsilon                        shift and go to state 93

state 54

    (31) escritura -> PRINT LPAREN . escrito RPAREN
    (32) escrito -> . impr
    (33) escrito -> . impr COMA escrito
    (34) impr -> . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    escrito                        shift and go to state 95
    impr                           shift and go to state 96
    expresion                      shift and go to state 97
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 55

    (58) funcion -> FUNCTION funcdef . LPAREN declaracion addArgs RPAREN COLON tiposreturn

    LPAREN          shift and go to state 98


state 56

    (60) funcdef -> ID .

    LPAREN          reduce using rule 60 (funcdef -> ID .)


state 57

    (67) functionCall -> funCall lparen . funcArgs rparen
    (69) funcArgs -> . checkArgs
    (70) funcArgs -> . funcArgs COMA funcArgs
    (71) funcArgs -> . epsilon
    (72) checkArgs -> . expresion
    (92) epsilon -> .
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    COMA            reduce using rule 92 (epsilon -> .)
    RPAREN          reduce using rule 92 (epsilon -> .)
    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    funcArgs                       shift and go to state 99
    checkArgs                      shift and go to state 100
    epsilon                        shift and go to state 101
    expresion                      shift and go to state 102
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 58

    (90) lparen -> LPAREN .

    ID              reduce using rule 90 (lparen -> LPAREN .)
    LPAREN          reduce using rule 90 (lparen -> LPAREN .)
    INT             reduce using rule 90 (lparen -> LPAREN .)
    FLOAT           reduce using rule 90 (lparen -> LPAREN .)
    BOOL            reduce using rule 90 (lparen -> LPAREN .)
    STRING          reduce using rule 90 (lparen -> LPAREN .)
    LBRACKET        reduce using rule 90 (lparen -> LPAREN .)
    COMA            reduce using rule 90 (lparen -> LPAREN .)
    RPAREN          reduce using rule 90 (lparen -> LPAREN .)


state 59

    (28) break -> BREAK expresion .

    SEMICOLON       reduce using rule 28 (break -> BREAK expresion .)


state 60

    (35) expresion -> exp .
    (39) condition -> exp . comparacion expresion
    (40) comparacion -> . LESSTHAN
    (41) comparacion -> . MORETHAN
    (42) comparacion -> . ISEQUAL
    (43) comparacion -> . NOTEQUAL
    (44) comparacion -> . AND
    (45) comparacion -> . OR

    SEMICOLON       reduce using rule 35 (expresion -> exp .)
    COMA            reduce using rule 35 (expresion -> exp .)
    LPAREN          reduce using rule 35 (expresion -> exp .)
    RPAREN          reduce using rule 35 (expresion -> exp .)
    RBRACKET        reduce using rule 35 (expresion -> exp .)
    LESSTHAN        shift and go to state 104
    MORETHAN        shift and go to state 105
    ISEQUAL         shift and go to state 106
    NOTEQUAL        shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109

    comparacion                    shift and go to state 103

state 61

    (36) expresion -> condition .

    SEMICOLON       reduce using rule 36 (expresion -> condition .)
    COMA            reduce using rule 36 (expresion -> condition .)
    LPAREN          reduce using rule 36 (expresion -> condition .)
    RPAREN          reduce using rule 36 (expresion -> condition .)
    RBRACKET        reduce using rule 36 (expresion -> condition .)


state 62

    (37) expresion -> functionCall .
    (89) factor -> functionCall .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for COMA resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (expresion -> functionCall .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 37 (expresion -> functionCall .)
    SEMICOLON       reduce using rule 37 (expresion -> functionCall .)
    COMA            reduce using rule 37 (expresion -> functionCall .)
    LPAREN          reduce using rule 37 (expresion -> functionCall .)
    RPAREN          reduce using rule 37 (expresion -> functionCall .)
    RBRACKET        reduce using rule 37 (expresion -> functionCall .)
    TIMES           reduce using rule 89 (factor -> functionCall .)
    DIVIDE          reduce using rule 89 (factor -> functionCall .)
    DIFF            reduce using rule 89 (factor -> functionCall .)
    EXP             reduce using rule 89 (factor -> functionCall .)
    PLUS            reduce using rule 89 (factor -> functionCall .)
    MINUS           reduce using rule 89 (factor -> functionCall .)
    LESSTHAN        reduce using rule 89 (factor -> functionCall .)
    MORETHAN        reduce using rule 89 (factor -> functionCall .)
    ISEQUAL         reduce using rule 89 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 89 (factor -> functionCall .)
    AND             reduce using rule 89 (factor -> functionCall .)
    OR              reduce using rule 89 (factor -> functionCall .)

  ! SEMICOLON       [ reduce using rule 89 (factor -> functionCall .) ]
  ! COMA            [ reduce using rule 89 (factor -> functionCall .) ]
  ! LPAREN          [ reduce using rule 89 (factor -> functionCall .) ]
  ! RPAREN          [ reduce using rule 89 (factor -> functionCall .) ]
  ! RBRACKET        [ reduce using rule 89 (factor -> functionCall .) ]


state 63

    (38) expresion -> arr .
    (112) varcte -> arr .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 38 (expresion -> arr .)
  ! reduce/reduce conflict for COMA resolved using rule 38 (expresion -> arr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 38 (expresion -> arr .)
  ! reduce/reduce conflict for RPAREN resolved using rule 38 (expresion -> arr .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 38 (expresion -> arr .)
    SEMICOLON       reduce using rule 38 (expresion -> arr .)
    COMA            reduce using rule 38 (expresion -> arr .)
    LPAREN          reduce using rule 38 (expresion -> arr .)
    RPAREN          reduce using rule 38 (expresion -> arr .)
    RBRACKET        reduce using rule 38 (expresion -> arr .)
    TIMES           reduce using rule 112 (varcte -> arr .)
    DIVIDE          reduce using rule 112 (varcte -> arr .)
    DIFF            reduce using rule 112 (varcte -> arr .)
    EXP             reduce using rule 112 (varcte -> arr .)
    PLUS            reduce using rule 112 (varcte -> arr .)
    MINUS           reduce using rule 112 (varcte -> arr .)
    LESSTHAN        reduce using rule 112 (varcte -> arr .)
    MORETHAN        reduce using rule 112 (varcte -> arr .)
    ISEQUAL         reduce using rule 112 (varcte -> arr .)
    NOTEQUAL        reduce using rule 112 (varcte -> arr .)
    AND             reduce using rule 112 (varcte -> arr .)
    OR              reduce using rule 112 (varcte -> arr .)

  ! SEMICOLON       [ reduce using rule 112 (varcte -> arr .) ]
  ! COMA            [ reduce using rule 112 (varcte -> arr .) ]
  ! LPAREN          [ reduce using rule 112 (varcte -> arr .) ]
  ! RPAREN          [ reduce using rule 112 (varcte -> arr .) ]
  ! RBRACKET        [ reduce using rule 112 (varcte -> arr .) ]


state 64

    (77) exp -> termino .
    (78) exp -> termino . signo exp
    (79) signo -> . PLUS
    (80) signo -> . MINUS

    LESSTHAN        reduce using rule 77 (exp -> termino .)
    MORETHAN        reduce using rule 77 (exp -> termino .)
    ISEQUAL         reduce using rule 77 (exp -> termino .)
    NOTEQUAL        reduce using rule 77 (exp -> termino .)
    AND             reduce using rule 77 (exp -> termino .)
    OR              reduce using rule 77 (exp -> termino .)
    SEMICOLON       reduce using rule 77 (exp -> termino .)
    COMA            reduce using rule 77 (exp -> termino .)
    LPAREN          reduce using rule 77 (exp -> termino .)
    RPAREN          reduce using rule 77 (exp -> termino .)
    RBRACKET        reduce using rule 77 (exp -> termino .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

    signo                          shift and go to state 110

state 65

    (88) factor -> lparen . expresion rparen
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    lparen                         shift and go to state 65
    expresion                      shift and go to state 113
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 66

    (101) matrix -> openBracket . expresion mbracket
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    openBracket                    shift and go to state 66
    expresion                      shift and go to state 114
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 67

    (111) varcte -> matrix .

    TIMES           reduce using rule 111 (varcte -> matrix .)
    DIVIDE          reduce using rule 111 (varcte -> matrix .)
    DIFF            reduce using rule 111 (varcte -> matrix .)
    EXP             reduce using rule 111 (varcte -> matrix .)
    PLUS            reduce using rule 111 (varcte -> matrix .)
    MINUS           reduce using rule 111 (varcte -> matrix .)
    LESSTHAN        reduce using rule 111 (varcte -> matrix .)
    MORETHAN        reduce using rule 111 (varcte -> matrix .)
    ISEQUAL         reduce using rule 111 (varcte -> matrix .)
    NOTEQUAL        reduce using rule 111 (varcte -> matrix .)
    AND             reduce using rule 111 (varcte -> matrix .)
    OR              reduce using rule 111 (varcte -> matrix .)
    SEMICOLON       reduce using rule 111 (varcte -> matrix .)
    COMA            reduce using rule 111 (varcte -> matrix .)
    LPAREN          reduce using rule 111 (varcte -> matrix .)
    RPAREN          reduce using rule 111 (varcte -> matrix .)
    RBRACKET        reduce using rule 111 (varcte -> matrix .)


state 68

    (81) termino -> factor .
    (82) termino -> factor . operacion termino
    (83) operacion -> . TIMES
    (84) operacion -> . DIVIDE
    (85) operacion -> . DIFF
    (86) operacion -> . EXP

    PLUS            reduce using rule 81 (termino -> factor .)
    MINUS           reduce using rule 81 (termino -> factor .)
    LESSTHAN        reduce using rule 81 (termino -> factor .)
    MORETHAN        reduce using rule 81 (termino -> factor .)
    ISEQUAL         reduce using rule 81 (termino -> factor .)
    NOTEQUAL        reduce using rule 81 (termino -> factor .)
    AND             reduce using rule 81 (termino -> factor .)
    OR              reduce using rule 81 (termino -> factor .)
    SEMICOLON       reduce using rule 81 (termino -> factor .)
    COMA            reduce using rule 81 (termino -> factor .)
    LPAREN          reduce using rule 81 (termino -> factor .)
    RPAREN          reduce using rule 81 (termino -> factor .)
    RBRACKET        reduce using rule 81 (termino -> factor .)
    TIMES           shift and go to state 116
    DIVIDE          shift and go to state 117
    DIFF            shift and go to state 118
    EXP             shift and go to state 119

    operacion                      shift and go to state 115

state 69

    (68) funCall -> ID .
    (100) callArr -> ID .
    (106) varcte -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 68 (funCall -> ID .)
    LPAREN          reduce using rule 68 (funCall -> ID .)
    LBRACKET        reduce using rule 100 (callArr -> ID .)
    TIMES           reduce using rule 106 (varcte -> ID .)
    DIVIDE          reduce using rule 106 (varcte -> ID .)
    DIFF            reduce using rule 106 (varcte -> ID .)
    EXP             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    LESSTHAN        reduce using rule 106 (varcte -> ID .)
    MORETHAN        reduce using rule 106 (varcte -> ID .)
    ISEQUAL         reduce using rule 106 (varcte -> ID .)
    NOTEQUAL        reduce using rule 106 (varcte -> ID .)
    AND             reduce using rule 106 (varcte -> ID .)
    OR              reduce using rule 106 (varcte -> ID .)
    SEMICOLON       reduce using rule 106 (varcte -> ID .)
    COMA            reduce using rule 106 (varcte -> ID .)
    RPAREN          reduce using rule 106 (varcte -> ID .)
    RBRACKET        reduce using rule 106 (varcte -> ID .)

  ! LPAREN          [ reduce using rule 106 (varcte -> ID .) ]


state 70

    (87) factor -> varcte .

    TIMES           reduce using rule 87 (factor -> varcte .)
    DIVIDE          reduce using rule 87 (factor -> varcte .)
    DIFF            reduce using rule 87 (factor -> varcte .)
    EXP             reduce using rule 87 (factor -> varcte .)
    PLUS            reduce using rule 87 (factor -> varcte .)
    MINUS           reduce using rule 87 (factor -> varcte .)
    LESSTHAN        reduce using rule 87 (factor -> varcte .)
    MORETHAN        reduce using rule 87 (factor -> varcte .)
    ISEQUAL         reduce using rule 87 (factor -> varcte .)
    NOTEQUAL        reduce using rule 87 (factor -> varcte .)
    AND             reduce using rule 87 (factor -> varcte .)
    OR              reduce using rule 87 (factor -> varcte .)
    SEMICOLON       reduce using rule 87 (factor -> varcte .)
    COMA            reduce using rule 87 (factor -> varcte .)
    LPAREN          reduce using rule 87 (factor -> varcte .)
    RPAREN          reduce using rule 87 (factor -> varcte .)
    RBRACKET        reduce using rule 87 (factor -> varcte .)


state 71

    (107) varcte -> int .

    TIMES           reduce using rule 107 (varcte -> int .)
    DIVIDE          reduce using rule 107 (varcte -> int .)
    DIFF            reduce using rule 107 (varcte -> int .)
    EXP             reduce using rule 107 (varcte -> int .)
    PLUS            reduce using rule 107 (varcte -> int .)
    MINUS           reduce using rule 107 (varcte -> int .)
    LESSTHAN        reduce using rule 107 (varcte -> int .)
    MORETHAN        reduce using rule 107 (varcte -> int .)
    ISEQUAL         reduce using rule 107 (varcte -> int .)
    NOTEQUAL        reduce using rule 107 (varcte -> int .)
    AND             reduce using rule 107 (varcte -> int .)
    OR              reduce using rule 107 (varcte -> int .)
    SEMICOLON       reduce using rule 107 (varcte -> int .)
    COMA            reduce using rule 107 (varcte -> int .)
    LPAREN          reduce using rule 107 (varcte -> int .)
    RPAREN          reduce using rule 107 (varcte -> int .)
    RBRACKET        reduce using rule 107 (varcte -> int .)


state 72

    (108) varcte -> float .

    TIMES           reduce using rule 108 (varcte -> float .)
    DIVIDE          reduce using rule 108 (varcte -> float .)
    DIFF            reduce using rule 108 (varcte -> float .)
    EXP             reduce using rule 108 (varcte -> float .)
    PLUS            reduce using rule 108 (varcte -> float .)
    MINUS           reduce using rule 108 (varcte -> float .)
    LESSTHAN        reduce using rule 108 (varcte -> float .)
    MORETHAN        reduce using rule 108 (varcte -> float .)
    ISEQUAL         reduce using rule 108 (varcte -> float .)
    NOTEQUAL        reduce using rule 108 (varcte -> float .)
    AND             reduce using rule 108 (varcte -> float .)
    OR              reduce using rule 108 (varcte -> float .)
    SEMICOLON       reduce using rule 108 (varcte -> float .)
    COMA            reduce using rule 108 (varcte -> float .)
    LPAREN          reduce using rule 108 (varcte -> float .)
    RPAREN          reduce using rule 108 (varcte -> float .)
    RBRACKET        reduce using rule 108 (varcte -> float .)


state 73

    (109) varcte -> bool .

    TIMES           reduce using rule 109 (varcte -> bool .)
    DIVIDE          reduce using rule 109 (varcte -> bool .)
    DIFF            reduce using rule 109 (varcte -> bool .)
    EXP             reduce using rule 109 (varcte -> bool .)
    PLUS            reduce using rule 109 (varcte -> bool .)
    MINUS           reduce using rule 109 (varcte -> bool .)
    LESSTHAN        reduce using rule 109 (varcte -> bool .)
    MORETHAN        reduce using rule 109 (varcte -> bool .)
    ISEQUAL         reduce using rule 109 (varcte -> bool .)
    NOTEQUAL        reduce using rule 109 (varcte -> bool .)
    AND             reduce using rule 109 (varcte -> bool .)
    OR              reduce using rule 109 (varcte -> bool .)
    SEMICOLON       reduce using rule 109 (varcte -> bool .)
    COMA            reduce using rule 109 (varcte -> bool .)
    LPAREN          reduce using rule 109 (varcte -> bool .)
    RPAREN          reduce using rule 109 (varcte -> bool .)
    RBRACKET        reduce using rule 109 (varcte -> bool .)


state 74

    (110) varcte -> string .

    TIMES           reduce using rule 110 (varcte -> string .)
    DIVIDE          reduce using rule 110 (varcte -> string .)
    DIFF            reduce using rule 110 (varcte -> string .)
    EXP             reduce using rule 110 (varcte -> string .)
    PLUS            reduce using rule 110 (varcte -> string .)
    MINUS           reduce using rule 110 (varcte -> string .)
    LESSTHAN        reduce using rule 110 (varcte -> string .)
    MORETHAN        reduce using rule 110 (varcte -> string .)
    ISEQUAL         reduce using rule 110 (varcte -> string .)
    NOTEQUAL        reduce using rule 110 (varcte -> string .)
    AND             reduce using rule 110 (varcte -> string .)
    OR              reduce using rule 110 (varcte -> string .)
    SEMICOLON       reduce using rule 110 (varcte -> string .)
    COMA            reduce using rule 110 (varcte -> string .)
    LPAREN          reduce using rule 110 (varcte -> string .)
    RPAREN          reduce using rule 110 (varcte -> string .)
    RBRACKET        reduce using rule 110 (varcte -> string .)


state 75

    (113) int -> INT .

    TIMES           reduce using rule 113 (int -> INT .)
    DIVIDE          reduce using rule 113 (int -> INT .)
    DIFF            reduce using rule 113 (int -> INT .)
    EXP             reduce using rule 113 (int -> INT .)
    PLUS            reduce using rule 113 (int -> INT .)
    MINUS           reduce using rule 113 (int -> INT .)
    LESSTHAN        reduce using rule 113 (int -> INT .)
    MORETHAN        reduce using rule 113 (int -> INT .)
    ISEQUAL         reduce using rule 113 (int -> INT .)
    NOTEQUAL        reduce using rule 113 (int -> INT .)
    AND             reduce using rule 113 (int -> INT .)
    OR              reduce using rule 113 (int -> INT .)
    SEMICOLON       reduce using rule 113 (int -> INT .)
    COMA            reduce using rule 113 (int -> INT .)
    LPAREN          reduce using rule 113 (int -> INT .)
    RPAREN          reduce using rule 113 (int -> INT .)
    RBRACKET        reduce using rule 113 (int -> INT .)


state 76

    (114) float -> FLOAT .

    TIMES           reduce using rule 114 (float -> FLOAT .)
    DIVIDE          reduce using rule 114 (float -> FLOAT .)
    DIFF            reduce using rule 114 (float -> FLOAT .)
    EXP             reduce using rule 114 (float -> FLOAT .)
    PLUS            reduce using rule 114 (float -> FLOAT .)
    MINUS           reduce using rule 114 (float -> FLOAT .)
    LESSTHAN        reduce using rule 114 (float -> FLOAT .)
    MORETHAN        reduce using rule 114 (float -> FLOAT .)
    ISEQUAL         reduce using rule 114 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 114 (float -> FLOAT .)
    AND             reduce using rule 114 (float -> FLOAT .)
    OR              reduce using rule 114 (float -> FLOAT .)
    SEMICOLON       reduce using rule 114 (float -> FLOAT .)
    COMA            reduce using rule 114 (float -> FLOAT .)
    LPAREN          reduce using rule 114 (float -> FLOAT .)
    RPAREN          reduce using rule 114 (float -> FLOAT .)
    RBRACKET        reduce using rule 114 (float -> FLOAT .)


state 77

    (115) bool -> BOOL .

    TIMES           reduce using rule 115 (bool -> BOOL .)
    DIVIDE          reduce using rule 115 (bool -> BOOL .)
    DIFF            reduce using rule 115 (bool -> BOOL .)
    EXP             reduce using rule 115 (bool -> BOOL .)
    PLUS            reduce using rule 115 (bool -> BOOL .)
    MINUS           reduce using rule 115 (bool -> BOOL .)
    LESSTHAN        reduce using rule 115 (bool -> BOOL .)
    MORETHAN        reduce using rule 115 (bool -> BOOL .)
    ISEQUAL         reduce using rule 115 (bool -> BOOL .)
    NOTEQUAL        reduce using rule 115 (bool -> BOOL .)
    AND             reduce using rule 115 (bool -> BOOL .)
    OR              reduce using rule 115 (bool -> BOOL .)
    SEMICOLON       reduce using rule 115 (bool -> BOOL .)
    COMA            reduce using rule 115 (bool -> BOOL .)
    LPAREN          reduce using rule 115 (bool -> BOOL .)
    RPAREN          reduce using rule 115 (bool -> BOOL .)
    RBRACKET        reduce using rule 115 (bool -> BOOL .)


state 78

    (116) string -> STRING .

    TIMES           reduce using rule 116 (string -> STRING .)
    DIVIDE          reduce using rule 116 (string -> STRING .)
    DIFF            reduce using rule 116 (string -> STRING .)
    EXP             reduce using rule 116 (string -> STRING .)
    PLUS            reduce using rule 116 (string -> STRING .)
    MINUS           reduce using rule 116 (string -> STRING .)
    LESSTHAN        reduce using rule 116 (string -> STRING .)
    MORETHAN        reduce using rule 116 (string -> STRING .)
    ISEQUAL         reduce using rule 116 (string -> STRING .)
    NOTEQUAL        reduce using rule 116 (string -> STRING .)
    AND             reduce using rule 116 (string -> STRING .)
    OR              reduce using rule 116 (string -> STRING .)
    SEMICOLON       reduce using rule 116 (string -> STRING .)
    COMA            reduce using rule 116 (string -> STRING .)
    LPAREN          reduce using rule 116 (string -> STRING .)
    RPAREN          reduce using rule 116 (string -> STRING .)
    RBRACKET        reduce using rule 116 (string -> STRING .)


state 79

    (102) openBracket -> LBRACKET .

    ID              reduce using rule 102 (openBracket -> LBRACKET .)
    LPAREN          reduce using rule 102 (openBracket -> LBRACKET .)
    INT             reduce using rule 102 (openBracket -> LBRACKET .)
    FLOAT           reduce using rule 102 (openBracket -> LBRACKET .)
    BOOL            reduce using rule 102 (openBracket -> LBRACKET .)
    STRING          reduce using rule 102 (openBracket -> LBRACKET .)
    LBRACKET        reduce using rule 102 (openBracket -> LBRACKET .)


state 80

    (98) arr -> callArr openBracket . expresion abracket matrix
    (99) arr -> callArr openBracket . expresion abracket epsilon
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    expresion                      shift and go to state 120
    matrix                         shift and go to state 67
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 81

    (6) var -> vardef COLON . tipo SEMICOLON
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 122
    FLOAT           shift and go to state 123
    BOOL            shift and go to state 124
    STRING          shift and go to state 125

    tipo                           shift and go to state 121

state 82

    (7) var -> declaracionArr SEMICOLON .

    VAR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    ID              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    IF              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    WHILE           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FOR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    PRINT           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FUNCTION        reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    BREAK           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    DO              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    RPAREN          reduce using rule 7 (var -> declaracionArr SEMICOLON .)


state 83

    (8) var -> declaracionMatrix SEMICOLON .

    VAR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    ID              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    IF              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    WHILE           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FOR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    PRINT           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FUNCTION        reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    BREAK           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    DO              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    RPAREN          reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)


state 84

    (94) declaracionArr -> arrDef LBRACKET . INT RBRACKET COLON tipo
    (95) declaracionMatrix -> arrDef LBRACKET . INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    INT             shift and go to state 126


state 85

    (30) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 30 (asignacion -> ID EQUAL expresion .)
    COMA            reduce using rule 30 (asignacion -> ID EQUAL expresion .)
    LPAREN          reduce using rule 30 (asignacion -> ID EQUAL expresion .)
    RPAREN          reduce using rule 30 (asignacion -> ID EQUAL expresion .)


state 86

    (96) asignacionArr -> arr arrayEqual expresion .

    SEMICOLON       reduce using rule 96 (asignacionArr -> arr arrayEqual expresion .)


state 87

    (52) condicion -> IF LPAREN expresion . endCondition bloque condicionelse
    (53) endCondition -> . RPAREN
    (54) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 128
    SEMICOLON       shift and go to state 129

    endCondition                   shift and go to state 127

state 88

    (48) whileLoop -> WHILE startCondition expresion . endCondition bloque
    (53) endCondition -> . RPAREN
    (54) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 128
    SEMICOLON       shift and go to state 129

    endCondition                   shift and go to state 130

state 89

    (46) doWhile -> do bloque WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 131


state 90

    (51) forLoop -> FOR LPAREN argumentos . startCondition expresion endCondition asignacion RPAREN bloque
    (49) startCondition -> . LPAREN
    (50) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 50
    SEMICOLON       shift and go to state 51

    startCondition                 shift and go to state 132

state 91

    (75) args -> asignacion .

    COMA            reduce using rule 75 (args -> asignacion .)
    LPAREN          reduce using rule 75 (args -> asignacion .)
    SEMICOLON       reduce using rule 75 (args -> asignacion .)


state 92

    (73) argumentos -> args .
    (76) args -> args . COMA args

    LPAREN          reduce using rule 73 (argumentos -> args .)
    SEMICOLON       reduce using rule 73 (argumentos -> args .)
    COMA            shift and go to state 133


state 93

    (74) argumentos -> epsilon .

    LPAREN          reduce using rule 74 (argumentos -> epsilon .)
    SEMICOLON       reduce using rule 74 (argumentos -> epsilon .)


state 94

    (30) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 45


state 95

    (31) escritura -> PRINT LPAREN escrito . RPAREN

    RPAREN          shift and go to state 134


state 96

    (32) escrito -> impr .
    (33) escrito -> impr . COMA escrito

    RPAREN          reduce using rule 32 (escrito -> impr .)
    COMA            shift and go to state 135


state 97

    (34) impr -> expresion .

    COMA            reduce using rule 34 (impr -> expresion .)
    RPAREN          reduce using rule 34 (impr -> expresion .)


state 98

    (58) funcion -> FUNCTION funcdef LPAREN . declaracion addArgs RPAREN COLON tiposreturn
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (92) epsilon -> .

    VAR             shift and go to state 10
    RPAREN          reduce using rule 92 (epsilon -> .)

    declaracion                    shift and go to state 136
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 99

    (67) functionCall -> funCall lparen funcArgs . rparen
    (70) funcArgs -> funcArgs . COMA funcArgs
    (91) rparen -> . RPAREN

    COMA            shift and go to state 138
    RPAREN          shift and go to state 139

    rparen                         shift and go to state 137

state 100

    (69) funcArgs -> checkArgs .

    COMA            reduce using rule 69 (funcArgs -> checkArgs .)
    RPAREN          reduce using rule 69 (funcArgs -> checkArgs .)


state 101

    (71) funcArgs -> epsilon .

    COMA            reduce using rule 71 (funcArgs -> epsilon .)
    RPAREN          reduce using rule 71 (funcArgs -> epsilon .)


state 102

    (72) checkArgs -> expresion .

    COMA            reduce using rule 72 (checkArgs -> expresion .)
    RPAREN          reduce using rule 72 (checkArgs -> expresion .)


state 103

    (39) condition -> exp comparacion . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    exp                            shift and go to state 60
    expresion                      shift and go to state 140
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 104

    (40) comparacion -> LESSTHAN .

    ID              reduce using rule 40 (comparacion -> LESSTHAN .)
    LPAREN          reduce using rule 40 (comparacion -> LESSTHAN .)
    INT             reduce using rule 40 (comparacion -> LESSTHAN .)
    FLOAT           reduce using rule 40 (comparacion -> LESSTHAN .)
    BOOL            reduce using rule 40 (comparacion -> LESSTHAN .)
    STRING          reduce using rule 40 (comparacion -> LESSTHAN .)
    LBRACKET        reduce using rule 40 (comparacion -> LESSTHAN .)


state 105

    (41) comparacion -> MORETHAN .

    ID              reduce using rule 41 (comparacion -> MORETHAN .)
    LPAREN          reduce using rule 41 (comparacion -> MORETHAN .)
    INT             reduce using rule 41 (comparacion -> MORETHAN .)
    FLOAT           reduce using rule 41 (comparacion -> MORETHAN .)
    BOOL            reduce using rule 41 (comparacion -> MORETHAN .)
    STRING          reduce using rule 41 (comparacion -> MORETHAN .)
    LBRACKET        reduce using rule 41 (comparacion -> MORETHAN .)


state 106

    (42) comparacion -> ISEQUAL .

    ID              reduce using rule 42 (comparacion -> ISEQUAL .)
    LPAREN          reduce using rule 42 (comparacion -> ISEQUAL .)
    INT             reduce using rule 42 (comparacion -> ISEQUAL .)
    FLOAT           reduce using rule 42 (comparacion -> ISEQUAL .)
    BOOL            reduce using rule 42 (comparacion -> ISEQUAL .)
    STRING          reduce using rule 42 (comparacion -> ISEQUAL .)
    LBRACKET        reduce using rule 42 (comparacion -> ISEQUAL .)


state 107

    (43) comparacion -> NOTEQUAL .

    ID              reduce using rule 43 (comparacion -> NOTEQUAL .)
    LPAREN          reduce using rule 43 (comparacion -> NOTEQUAL .)
    INT             reduce using rule 43 (comparacion -> NOTEQUAL .)
    FLOAT           reduce using rule 43 (comparacion -> NOTEQUAL .)
    BOOL            reduce using rule 43 (comparacion -> NOTEQUAL .)
    STRING          reduce using rule 43 (comparacion -> NOTEQUAL .)
    LBRACKET        reduce using rule 43 (comparacion -> NOTEQUAL .)


state 108

    (44) comparacion -> AND .

    ID              reduce using rule 44 (comparacion -> AND .)
    LPAREN          reduce using rule 44 (comparacion -> AND .)
    INT             reduce using rule 44 (comparacion -> AND .)
    FLOAT           reduce using rule 44 (comparacion -> AND .)
    BOOL            reduce using rule 44 (comparacion -> AND .)
    STRING          reduce using rule 44 (comparacion -> AND .)
    LBRACKET        reduce using rule 44 (comparacion -> AND .)


state 109

    (45) comparacion -> OR .

    ID              reduce using rule 45 (comparacion -> OR .)
    LPAREN          reduce using rule 45 (comparacion -> OR .)
    INT             reduce using rule 45 (comparacion -> OR .)
    FLOAT           reduce using rule 45 (comparacion -> OR .)
    BOOL            reduce using rule 45 (comparacion -> OR .)
    STRING          reduce using rule 45 (comparacion -> OR .)
    LBRACKET        reduce using rule 45 (comparacion -> OR .)


state 110

    (78) exp -> termino signo . exp
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (67) functionCall -> . funCall lparen funcArgs rparen
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (68) funCall -> . ID
    (102) openBracket -> . LBRACKET
    (100) callArr -> . ID

    ID              shift and go to state 143
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    termino                        shift and go to state 64
    exp                            shift and go to state 141
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    lparen                         shift and go to state 65
    functionCall                   shift and go to state 142
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74
    matrix                         shift and go to state 67
    arr                            shift and go to state 144
    funCall                        shift and go to state 31
    openBracket                    shift and go to state 66
    callArr                        shift and go to state 33

state 111

    (79) signo -> PLUS .

    ID              reduce using rule 79 (signo -> PLUS .)
    LPAREN          reduce using rule 79 (signo -> PLUS .)
    INT             reduce using rule 79 (signo -> PLUS .)
    FLOAT           reduce using rule 79 (signo -> PLUS .)
    BOOL            reduce using rule 79 (signo -> PLUS .)
    STRING          reduce using rule 79 (signo -> PLUS .)
    LBRACKET        reduce using rule 79 (signo -> PLUS .)


state 112

    (80) signo -> MINUS .

    ID              reduce using rule 80 (signo -> MINUS .)
    LPAREN          reduce using rule 80 (signo -> MINUS .)
    INT             reduce using rule 80 (signo -> MINUS .)
    FLOAT           reduce using rule 80 (signo -> MINUS .)
    BOOL            reduce using rule 80 (signo -> MINUS .)
    STRING          reduce using rule 80 (signo -> MINUS .)
    LBRACKET        reduce using rule 80 (signo -> MINUS .)


state 113

    (88) factor -> lparen expresion . rparen
    (91) rparen -> . RPAREN

    RPAREN          shift and go to state 139

    rparen                         shift and go to state 145

state 114

    (101) matrix -> openBracket expresion . mbracket
    (105) mbracket -> . closeBracket
    (103) closeBracket -> . RBRACKET

    RBRACKET        shift and go to state 148

    mbracket                       shift and go to state 146
    closeBracket                   shift and go to state 147

state 115

    (82) termino -> factor operacion . termino
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (67) functionCall -> . funCall lparen funcArgs rparen
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (68) funCall -> . ID
    (102) openBracket -> . LBRACKET
    (100) callArr -> . ID

    ID              shift and go to state 143
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    factor                         shift and go to state 68
    termino                        shift and go to state 149
    varcte                         shift and go to state 70
    lparen                         shift and go to state 65
    functionCall                   shift and go to state 142
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74
    matrix                         shift and go to state 67
    arr                            shift and go to state 144
    funCall                        shift and go to state 31
    openBracket                    shift and go to state 66
    callArr                        shift and go to state 33

state 116

    (83) operacion -> TIMES .

    ID              reduce using rule 83 (operacion -> TIMES .)
    LPAREN          reduce using rule 83 (operacion -> TIMES .)
    INT             reduce using rule 83 (operacion -> TIMES .)
    FLOAT           reduce using rule 83 (operacion -> TIMES .)
    BOOL            reduce using rule 83 (operacion -> TIMES .)
    STRING          reduce using rule 83 (operacion -> TIMES .)
    LBRACKET        reduce using rule 83 (operacion -> TIMES .)


state 117

    (84) operacion -> DIVIDE .

    ID              reduce using rule 84 (operacion -> DIVIDE .)
    LPAREN          reduce using rule 84 (operacion -> DIVIDE .)
    INT             reduce using rule 84 (operacion -> DIVIDE .)
    FLOAT           reduce using rule 84 (operacion -> DIVIDE .)
    BOOL            reduce using rule 84 (operacion -> DIVIDE .)
    STRING          reduce using rule 84 (operacion -> DIVIDE .)
    LBRACKET        reduce using rule 84 (operacion -> DIVIDE .)


state 118

    (85) operacion -> DIFF .

    ID              reduce using rule 85 (operacion -> DIFF .)
    LPAREN          reduce using rule 85 (operacion -> DIFF .)
    INT             reduce using rule 85 (operacion -> DIFF .)
    FLOAT           reduce using rule 85 (operacion -> DIFF .)
    BOOL            reduce using rule 85 (operacion -> DIFF .)
    STRING          reduce using rule 85 (operacion -> DIFF .)
    LBRACKET        reduce using rule 85 (operacion -> DIFF .)


state 119

    (86) operacion -> EXP .

    ID              reduce using rule 86 (operacion -> EXP .)
    LPAREN          reduce using rule 86 (operacion -> EXP .)
    INT             reduce using rule 86 (operacion -> EXP .)
    FLOAT           reduce using rule 86 (operacion -> EXP .)
    BOOL            reduce using rule 86 (operacion -> EXP .)
    STRING          reduce using rule 86 (operacion -> EXP .)
    LBRACKET        reduce using rule 86 (operacion -> EXP .)


state 120

    (98) arr -> callArr openBracket expresion . abracket matrix
    (99) arr -> callArr openBracket expresion . abracket epsilon
    (104) abracket -> . closeBracket
    (103) closeBracket -> . RBRACKET

    RBRACKET        shift and go to state 148

    abracket                       shift and go to state 150
    closeBracket                   shift and go to state 151

state 121

    (6) var -> vardef COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 152


state 122

    (10) tipo -> INT .

    SEMICOLON       reduce using rule 10 (tipo -> INT .)


state 123

    (11) tipo -> FLOAT .

    SEMICOLON       reduce using rule 11 (tipo -> FLOAT .)


state 124

    (12) tipo -> BOOL .

    SEMICOLON       reduce using rule 12 (tipo -> BOOL .)


state 125

    (13) tipo -> STRING .

    SEMICOLON       reduce using rule 13 (tipo -> STRING .)


state 126

    (94) declaracionArr -> arrDef LBRACKET INT . RBRACKET COLON tipo
    (95) declaracionMatrix -> arrDef LBRACKET INT . RBRACKET LBRACKET INT RBRACKET COLON tipo

    RBRACKET        shift and go to state 153


state 127

    (52) condicion -> IF LPAREN expresion endCondition . bloque condicionelse
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 154

state 128

    (53) endCondition -> RPAREN .

    LCURLY          reduce using rule 53 (endCondition -> RPAREN .)
    ID              reduce using rule 53 (endCondition -> RPAREN .)


state 129

    (54) endCondition -> SEMICOLON .

    LCURLY          reduce using rule 54 (endCondition -> SEMICOLON .)
    ID              reduce using rule 54 (endCondition -> SEMICOLON .)


state 130

    (48) whileLoop -> WHILE startCondition expresion endCondition . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 155

state 131

    (46) doWhile -> do bloque WHILE LPAREN . expresion RPAREN
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 156
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 132

    (51) forLoop -> FOR LPAREN argumentos startCondition . expresion endCondition asignacion RPAREN bloque
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 157
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 133

    (76) args -> args COMA . args
    (75) args -> . asignacion
    (76) args -> . args COMA args
    (30) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 94

    args                           shift and go to state 158
    asignacion                     shift and go to state 91

state 134

    (31) escritura -> PRINT LPAREN escrito RPAREN .

    SEMICOLON       reduce using rule 31 (escritura -> PRINT LPAREN escrito RPAREN .)


state 135

    (33) escrito -> impr COMA . escrito
    (32) escrito -> . impr
    (33) escrito -> . impr COMA escrito
    (34) impr -> . expresion
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    impr                           shift and go to state 96
    escrito                        shift and go to state 159
    expresion                      shift and go to state 97
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 136

    (58) funcion -> FUNCTION funcdef LPAREN declaracion . addArgs RPAREN COLON tiposreturn
    (59) addArgs -> . epsilon
    (92) epsilon -> .

    RPAREN          reduce using rule 92 (epsilon -> .)

    addArgs                        shift and go to state 160
    epsilon                        shift and go to state 161

state 137

    (67) functionCall -> funCall lparen funcArgs rparen .

    SEMICOLON       reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    TIMES           reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    DIVIDE          reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    DIFF            reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    EXP             reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    PLUS            reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    MINUS           reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    LESSTHAN        reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    MORETHAN        reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    ISEQUAL         reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    NOTEQUAL        reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    AND             reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    OR              reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    COMA            reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    LPAREN          reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    RPAREN          reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)
    RBRACKET        reduce using rule 67 (functionCall -> funCall lparen funcArgs rparen .)


state 138

    (70) funcArgs -> funcArgs COMA . funcArgs
    (69) funcArgs -> . checkArgs
    (70) funcArgs -> . funcArgs COMA funcArgs
    (71) funcArgs -> . epsilon
    (72) checkArgs -> . expresion
    (92) epsilon -> .
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    COMA            reduce using rule 92 (epsilon -> .)
    RPAREN          reduce using rule 92 (epsilon -> .)
    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    funcArgs                       shift and go to state 162
    checkArgs                      shift and go to state 100
    epsilon                        shift and go to state 101
    expresion                      shift and go to state 102
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 139

    (91) rparen -> RPAREN .

    SEMICOLON       reduce using rule 91 (rparen -> RPAREN .)
    TIMES           reduce using rule 91 (rparen -> RPAREN .)
    DIVIDE          reduce using rule 91 (rparen -> RPAREN .)
    DIFF            reduce using rule 91 (rparen -> RPAREN .)
    EXP             reduce using rule 91 (rparen -> RPAREN .)
    PLUS            reduce using rule 91 (rparen -> RPAREN .)
    MINUS           reduce using rule 91 (rparen -> RPAREN .)
    LESSTHAN        reduce using rule 91 (rparen -> RPAREN .)
    MORETHAN        reduce using rule 91 (rparen -> RPAREN .)
    ISEQUAL         reduce using rule 91 (rparen -> RPAREN .)
    NOTEQUAL        reduce using rule 91 (rparen -> RPAREN .)
    AND             reduce using rule 91 (rparen -> RPAREN .)
    OR              reduce using rule 91 (rparen -> RPAREN .)
    COMA            reduce using rule 91 (rparen -> RPAREN .)
    LPAREN          reduce using rule 91 (rparen -> RPAREN .)
    RPAREN          reduce using rule 91 (rparen -> RPAREN .)
    RBRACKET        reduce using rule 91 (rparen -> RPAREN .)


state 140

    (39) condition -> exp comparacion expresion .

    SEMICOLON       reduce using rule 39 (condition -> exp comparacion expresion .)
    COMA            reduce using rule 39 (condition -> exp comparacion expresion .)
    LPAREN          reduce using rule 39 (condition -> exp comparacion expresion .)
    RPAREN          reduce using rule 39 (condition -> exp comparacion expresion .)
    RBRACKET        reduce using rule 39 (condition -> exp comparacion expresion .)


state 141

    (78) exp -> termino signo exp .

    LESSTHAN        reduce using rule 78 (exp -> termino signo exp .)
    MORETHAN        reduce using rule 78 (exp -> termino signo exp .)
    ISEQUAL         reduce using rule 78 (exp -> termino signo exp .)
    NOTEQUAL        reduce using rule 78 (exp -> termino signo exp .)
    AND             reduce using rule 78 (exp -> termino signo exp .)
    OR              reduce using rule 78 (exp -> termino signo exp .)
    SEMICOLON       reduce using rule 78 (exp -> termino signo exp .)
    COMA            reduce using rule 78 (exp -> termino signo exp .)
    LPAREN          reduce using rule 78 (exp -> termino signo exp .)
    RPAREN          reduce using rule 78 (exp -> termino signo exp .)
    RBRACKET        reduce using rule 78 (exp -> termino signo exp .)


state 142

    (89) factor -> functionCall .

    TIMES           reduce using rule 89 (factor -> functionCall .)
    DIVIDE          reduce using rule 89 (factor -> functionCall .)
    DIFF            reduce using rule 89 (factor -> functionCall .)
    EXP             reduce using rule 89 (factor -> functionCall .)
    PLUS            reduce using rule 89 (factor -> functionCall .)
    MINUS           reduce using rule 89 (factor -> functionCall .)
    LESSTHAN        reduce using rule 89 (factor -> functionCall .)
    MORETHAN        reduce using rule 89 (factor -> functionCall .)
    ISEQUAL         reduce using rule 89 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 89 (factor -> functionCall .)
    AND             reduce using rule 89 (factor -> functionCall .)
    OR              reduce using rule 89 (factor -> functionCall .)
    SEMICOLON       reduce using rule 89 (factor -> functionCall .)
    COMA            reduce using rule 89 (factor -> functionCall .)
    LPAREN          reduce using rule 89 (factor -> functionCall .)
    RPAREN          reduce using rule 89 (factor -> functionCall .)
    RBRACKET        reduce using rule 89 (factor -> functionCall .)


state 143

    (106) varcte -> ID .
    (68) funCall -> ID .
    (100) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 68 (funCall -> ID .)
    TIMES           reduce using rule 106 (varcte -> ID .)
    DIVIDE          reduce using rule 106 (varcte -> ID .)
    DIFF            reduce using rule 106 (varcte -> ID .)
    EXP             reduce using rule 106 (varcte -> ID .)
    PLUS            reduce using rule 106 (varcte -> ID .)
    MINUS           reduce using rule 106 (varcte -> ID .)
    LESSTHAN        reduce using rule 106 (varcte -> ID .)
    MORETHAN        reduce using rule 106 (varcte -> ID .)
    ISEQUAL         reduce using rule 106 (varcte -> ID .)
    NOTEQUAL        reduce using rule 106 (varcte -> ID .)
    AND             reduce using rule 106 (varcte -> ID .)
    OR              reduce using rule 106 (varcte -> ID .)
    SEMICOLON       reduce using rule 106 (varcte -> ID .)
    COMA            reduce using rule 106 (varcte -> ID .)
    RPAREN          reduce using rule 106 (varcte -> ID .)
    RBRACKET        reduce using rule 106 (varcte -> ID .)
    LPAREN          reduce using rule 68 (funCall -> ID .)
    LBRACKET        reduce using rule 100 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 106 (varcte -> ID .) ]


state 144

    (112) varcte -> arr .

    TIMES           reduce using rule 112 (varcte -> arr .)
    DIVIDE          reduce using rule 112 (varcte -> arr .)
    DIFF            reduce using rule 112 (varcte -> arr .)
    EXP             reduce using rule 112 (varcte -> arr .)
    PLUS            reduce using rule 112 (varcte -> arr .)
    MINUS           reduce using rule 112 (varcte -> arr .)
    LESSTHAN        reduce using rule 112 (varcte -> arr .)
    MORETHAN        reduce using rule 112 (varcte -> arr .)
    ISEQUAL         reduce using rule 112 (varcte -> arr .)
    NOTEQUAL        reduce using rule 112 (varcte -> arr .)
    AND             reduce using rule 112 (varcte -> arr .)
    OR              reduce using rule 112 (varcte -> arr .)
    SEMICOLON       reduce using rule 112 (varcte -> arr .)
    COMA            reduce using rule 112 (varcte -> arr .)
    LPAREN          reduce using rule 112 (varcte -> arr .)
    RPAREN          reduce using rule 112 (varcte -> arr .)
    RBRACKET        reduce using rule 112 (varcte -> arr .)


state 145

    (88) factor -> lparen expresion rparen .

    TIMES           reduce using rule 88 (factor -> lparen expresion rparen .)
    DIVIDE          reduce using rule 88 (factor -> lparen expresion rparen .)
    DIFF            reduce using rule 88 (factor -> lparen expresion rparen .)
    EXP             reduce using rule 88 (factor -> lparen expresion rparen .)
    PLUS            reduce using rule 88 (factor -> lparen expresion rparen .)
    MINUS           reduce using rule 88 (factor -> lparen expresion rparen .)
    LESSTHAN        reduce using rule 88 (factor -> lparen expresion rparen .)
    MORETHAN        reduce using rule 88 (factor -> lparen expresion rparen .)
    ISEQUAL         reduce using rule 88 (factor -> lparen expresion rparen .)
    NOTEQUAL        reduce using rule 88 (factor -> lparen expresion rparen .)
    AND             reduce using rule 88 (factor -> lparen expresion rparen .)
    OR              reduce using rule 88 (factor -> lparen expresion rparen .)
    SEMICOLON       reduce using rule 88 (factor -> lparen expresion rparen .)
    COMA            reduce using rule 88 (factor -> lparen expresion rparen .)
    LPAREN          reduce using rule 88 (factor -> lparen expresion rparen .)
    RPAREN          reduce using rule 88 (factor -> lparen expresion rparen .)
    RBRACKET        reduce using rule 88 (factor -> lparen expresion rparen .)


state 146

    (101) matrix -> openBracket expresion mbracket .

    TIMES           reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    DIVIDE          reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    DIFF            reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    EXP             reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    PLUS            reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    MINUS           reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    LESSTHAN        reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    MORETHAN        reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    ISEQUAL         reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    NOTEQUAL        reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    AND             reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    OR              reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    SEMICOLON       reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    COMA            reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    LPAREN          reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    RPAREN          reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    RBRACKET        reduce using rule 101 (matrix -> openBracket expresion mbracket .)
    EQUAL           reduce using rule 101 (matrix -> openBracket expresion mbracket .)


state 147

    (105) mbracket -> closeBracket .

    TIMES           reduce using rule 105 (mbracket -> closeBracket .)
    DIVIDE          reduce using rule 105 (mbracket -> closeBracket .)
    DIFF            reduce using rule 105 (mbracket -> closeBracket .)
    EXP             reduce using rule 105 (mbracket -> closeBracket .)
    PLUS            reduce using rule 105 (mbracket -> closeBracket .)
    MINUS           reduce using rule 105 (mbracket -> closeBracket .)
    LESSTHAN        reduce using rule 105 (mbracket -> closeBracket .)
    MORETHAN        reduce using rule 105 (mbracket -> closeBracket .)
    ISEQUAL         reduce using rule 105 (mbracket -> closeBracket .)
    NOTEQUAL        reduce using rule 105 (mbracket -> closeBracket .)
    AND             reduce using rule 105 (mbracket -> closeBracket .)
    OR              reduce using rule 105 (mbracket -> closeBracket .)
    SEMICOLON       reduce using rule 105 (mbracket -> closeBracket .)
    COMA            reduce using rule 105 (mbracket -> closeBracket .)
    LPAREN          reduce using rule 105 (mbracket -> closeBracket .)
    RPAREN          reduce using rule 105 (mbracket -> closeBracket .)
    RBRACKET        reduce using rule 105 (mbracket -> closeBracket .)
    EQUAL           reduce using rule 105 (mbracket -> closeBracket .)


state 148

    (103) closeBracket -> RBRACKET .

    TIMES           reduce using rule 103 (closeBracket -> RBRACKET .)
    DIVIDE          reduce using rule 103 (closeBracket -> RBRACKET .)
    DIFF            reduce using rule 103 (closeBracket -> RBRACKET .)
    EXP             reduce using rule 103 (closeBracket -> RBRACKET .)
    PLUS            reduce using rule 103 (closeBracket -> RBRACKET .)
    MINUS           reduce using rule 103 (closeBracket -> RBRACKET .)
    LESSTHAN        reduce using rule 103 (closeBracket -> RBRACKET .)
    MORETHAN        reduce using rule 103 (closeBracket -> RBRACKET .)
    ISEQUAL         reduce using rule 103 (closeBracket -> RBRACKET .)
    NOTEQUAL        reduce using rule 103 (closeBracket -> RBRACKET .)
    AND             reduce using rule 103 (closeBracket -> RBRACKET .)
    OR              reduce using rule 103 (closeBracket -> RBRACKET .)
    SEMICOLON       reduce using rule 103 (closeBracket -> RBRACKET .)
    COMA            reduce using rule 103 (closeBracket -> RBRACKET .)
    LPAREN          reduce using rule 103 (closeBracket -> RBRACKET .)
    RPAREN          reduce using rule 103 (closeBracket -> RBRACKET .)
    RBRACKET        reduce using rule 103 (closeBracket -> RBRACKET .)
    EQUAL           reduce using rule 103 (closeBracket -> RBRACKET .)
    LBRACKET        reduce using rule 103 (closeBracket -> RBRACKET .)


state 149

    (82) termino -> factor operacion termino .

    PLUS            reduce using rule 82 (termino -> factor operacion termino .)
    MINUS           reduce using rule 82 (termino -> factor operacion termino .)
    LESSTHAN        reduce using rule 82 (termino -> factor operacion termino .)
    MORETHAN        reduce using rule 82 (termino -> factor operacion termino .)
    ISEQUAL         reduce using rule 82 (termino -> factor operacion termino .)
    NOTEQUAL        reduce using rule 82 (termino -> factor operacion termino .)
    AND             reduce using rule 82 (termino -> factor operacion termino .)
    OR              reduce using rule 82 (termino -> factor operacion termino .)
    SEMICOLON       reduce using rule 82 (termino -> factor operacion termino .)
    COMA            reduce using rule 82 (termino -> factor operacion termino .)
    LPAREN          reduce using rule 82 (termino -> factor operacion termino .)
    RPAREN          reduce using rule 82 (termino -> factor operacion termino .)
    RBRACKET        reduce using rule 82 (termino -> factor operacion termino .)


state 150

    (98) arr -> callArr openBracket expresion abracket . matrix
    (99) arr -> callArr openBracket expresion abracket . epsilon
    (101) matrix -> . openBracket expresion mbracket
    (92) epsilon -> .
    (102) openBracket -> . LBRACKET

    EQUAL           reduce using rule 92 (epsilon -> .)
    SEMICOLON       reduce using rule 92 (epsilon -> .)
    TIMES           reduce using rule 92 (epsilon -> .)
    DIVIDE          reduce using rule 92 (epsilon -> .)
    DIFF            reduce using rule 92 (epsilon -> .)
    EXP             reduce using rule 92 (epsilon -> .)
    PLUS            reduce using rule 92 (epsilon -> .)
    MINUS           reduce using rule 92 (epsilon -> .)
    LESSTHAN        reduce using rule 92 (epsilon -> .)
    MORETHAN        reduce using rule 92 (epsilon -> .)
    ISEQUAL         reduce using rule 92 (epsilon -> .)
    NOTEQUAL        reduce using rule 92 (epsilon -> .)
    AND             reduce using rule 92 (epsilon -> .)
    OR              reduce using rule 92 (epsilon -> .)
    COMA            reduce using rule 92 (epsilon -> .)
    LPAREN          reduce using rule 92 (epsilon -> .)
    RPAREN          reduce using rule 92 (epsilon -> .)
    RBRACKET        reduce using rule 92 (epsilon -> .)
    LBRACKET        shift and go to state 79

    openBracket                    shift and go to state 66
    matrix                         shift and go to state 163
    epsilon                        shift and go to state 164

state 151

    (104) abracket -> closeBracket .

    LBRACKET        reduce using rule 104 (abracket -> closeBracket .)
    EQUAL           reduce using rule 104 (abracket -> closeBracket .)
    SEMICOLON       reduce using rule 104 (abracket -> closeBracket .)
    TIMES           reduce using rule 104 (abracket -> closeBracket .)
    DIVIDE          reduce using rule 104 (abracket -> closeBracket .)
    DIFF            reduce using rule 104 (abracket -> closeBracket .)
    EXP             reduce using rule 104 (abracket -> closeBracket .)
    PLUS            reduce using rule 104 (abracket -> closeBracket .)
    MINUS           reduce using rule 104 (abracket -> closeBracket .)
    LESSTHAN        reduce using rule 104 (abracket -> closeBracket .)
    MORETHAN        reduce using rule 104 (abracket -> closeBracket .)
    ISEQUAL         reduce using rule 104 (abracket -> closeBracket .)
    NOTEQUAL        reduce using rule 104 (abracket -> closeBracket .)
    AND             reduce using rule 104 (abracket -> closeBracket .)
    OR              reduce using rule 104 (abracket -> closeBracket .)
    COMA            reduce using rule 104 (abracket -> closeBracket .)
    LPAREN          reduce using rule 104 (abracket -> closeBracket .)
    RPAREN          reduce using rule 104 (abracket -> closeBracket .)
    RBRACKET        reduce using rule 104 (abracket -> closeBracket .)


state 152

    (6) var -> vardef COLON tipo SEMICOLON .

    VAR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    ID              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    IF              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    WHILE           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FOR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    PRINT           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    BREAK           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    DO              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)


state 153

    (94) declaracionArr -> arrDef LBRACKET INT RBRACKET . COLON tipo
    (95) declaracionMatrix -> arrDef LBRACKET INT RBRACKET . LBRACKET INT RBRACKET COLON tipo

    COLON           shift and go to state 166
    LBRACKET        shift and go to state 165


state 154

    (52) condicion -> IF LPAREN expresion endCondition bloque . condicionelse
    (55) condicionelse -> . else bloque
    (56) condicionelse -> . epsilon
    (57) else -> . ELSE
    (92) epsilon -> .

    ELSE            shift and go to state 170
    SEMICOLON       reduce using rule 92 (epsilon -> .)

    condicionelse                  shift and go to state 167
    else                           shift and go to state 168
    epsilon                        shift and go to state 169

state 155

    (48) whileLoop -> WHILE startCondition expresion endCondition bloque .

    SEMICOLON       reduce using rule 48 (whileLoop -> WHILE startCondition expresion endCondition bloque .)


state 156

    (46) doWhile -> do bloque WHILE LPAREN expresion . RPAREN

    RPAREN          shift and go to state 171


state 157

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion . endCondition asignacion RPAREN bloque
    (53) endCondition -> . RPAREN
    (54) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 128
    SEMICOLON       shift and go to state 129

    endCondition                   shift and go to state 172

state 158

    (76) args -> args COMA args .
    (76) args -> args . COMA args

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 76 (args -> args COMA args .)
    SEMICOLON       reduce using rule 76 (args -> args COMA args .)
    COMA            shift and go to state 133

  ! COMA            [ reduce using rule 76 (args -> args COMA args .) ]


state 159

    (33) escrito -> impr COMA escrito .

    RPAREN          reduce using rule 33 (escrito -> impr COMA escrito .)


state 160

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs . RPAREN COLON tiposreturn

    RPAREN          shift and go to state 173


state 161

    (59) addArgs -> epsilon .

    RPAREN          reduce using rule 59 (addArgs -> epsilon .)


state 162

    (70) funcArgs -> funcArgs COMA funcArgs .
    (70) funcArgs -> funcArgs . COMA funcArgs

  ! shift/reduce conflict for COMA resolved as shift
    RPAREN          reduce using rule 70 (funcArgs -> funcArgs COMA funcArgs .)
    COMA            shift and go to state 138

  ! COMA            [ reduce using rule 70 (funcArgs -> funcArgs COMA funcArgs .) ]


state 163

    (98) arr -> callArr openBracket expresion abracket matrix .

    EQUAL           reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    SEMICOLON       reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    TIMES           reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    DIVIDE          reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    DIFF            reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    EXP             reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    PLUS            reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    MINUS           reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    LESSTHAN        reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    MORETHAN        reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    ISEQUAL         reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    NOTEQUAL        reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    AND             reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    OR              reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    COMA            reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    LPAREN          reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    RPAREN          reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)
    RBRACKET        reduce using rule 98 (arr -> callArr openBracket expresion abracket matrix .)


state 164

    (99) arr -> callArr openBracket expresion abracket epsilon .

    EQUAL           reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    SEMICOLON       reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    TIMES           reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    DIVIDE          reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    DIFF            reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    EXP             reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    PLUS            reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    MINUS           reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    LESSTHAN        reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    MORETHAN        reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    ISEQUAL         reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    NOTEQUAL        reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    AND             reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    OR              reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    COMA            reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    LPAREN          reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    RPAREN          reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)
    RBRACKET        reduce using rule 99 (arr -> callArr openBracket expresion abracket epsilon .)


state 165

    (95) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET . INT RBRACKET COLON tipo

    INT             shift and go to state 174


state 166

    (94) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 122
    FLOAT           shift and go to state 123
    BOOL            shift and go to state 124
    STRING          shift and go to state 125

    tipo                           shift and go to state 175

state 167

    (52) condicion -> IF LPAREN expresion endCondition bloque condicionelse .

    SEMICOLON       reduce using rule 52 (condicion -> IF LPAREN expresion endCondition bloque condicionelse .)


state 168

    (55) condicionelse -> else . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 176

state 169

    (56) condicionelse -> epsilon .

    SEMICOLON       reduce using rule 56 (condicionelse -> epsilon .)


state 170

    (57) else -> ELSE .

    LCURLY          reduce using rule 57 (else -> ELSE .)


state 171

    (46) doWhile -> do bloque WHILE LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 46 (doWhile -> do bloque WHILE LPAREN expresion RPAREN .)


state 172

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition . asignacion RPAREN bloque
    (30) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 94

    asignacion                     shift and go to state 177

state 173

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN . COLON tiposreturn

    COLON           shift and go to state 178


state 174

    (95) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT . RBRACKET COLON tipo

    RBRACKET        shift and go to state 179


state 175

    (94) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 94 (declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .)


state 176

    (55) condicionelse -> else bloque .

    SEMICOLON       reduce using rule 55 (condicionelse -> else bloque .)


state 177

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion . RPAREN bloque

    RPAREN          shift and go to state 180


state 178

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON . tiposreturn
    (61) tiposreturn -> . tiposFuncion bloqueReturn
    (62) tiposreturn -> . VOID bloque
    (63) tiposFuncion -> . INT
    (64) tiposFuncion -> . FLOAT
    (65) tiposFuncion -> . BOOL
    (66) tiposFuncion -> . STRING

    VOID            shift and go to state 183
    INT             shift and go to state 184
    FLOAT           shift and go to state 185
    BOOL            shift and go to state 186
    STRING          shift and go to state 187

    tiposreturn                    shift and go to state 181
    tiposFuncion                   shift and go to state 182

state 179

    (95) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET . COLON tipo

    COLON           shift and go to state 188


state 180

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 189

state 181

    (58) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .

    SEMICOLON       reduce using rule 58 (funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .)


state 182

    (61) tiposreturn -> tiposFuncion . bloqueReturn
    (15) bloqueReturn -> . LCURLY declaracion estatutoExp returnexp RCURLY

    LCURLY          shift and go to state 191

    bloqueReturn                   shift and go to state 190

state 183

    (62) tiposreturn -> VOID . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 192

state 184

    (63) tiposFuncion -> INT .

    LCURLY          reduce using rule 63 (tiposFuncion -> INT .)


state 185

    (64) tiposFuncion -> FLOAT .

    LCURLY          reduce using rule 64 (tiposFuncion -> FLOAT .)


state 186

    (65) tiposFuncion -> BOOL .

    LCURLY          reduce using rule 65 (tiposFuncion -> BOOL .)


state 187

    (66) tiposFuncion -> STRING .

    LCURLY          reduce using rule 66 (tiposFuncion -> STRING .)


state 188

    (95) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 122
    FLOAT           shift and go to state 123
    BOOL            shift and go to state 124
    STRING          shift and go to state 125

    tipo                           shift and go to state 193

state 189

    (51) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .

    SEMICOLON       reduce using rule 51 (forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .)


state 190

    (61) tiposreturn -> tiposFuncion bloqueReturn .

    SEMICOLON       reduce using rule 61 (tiposreturn -> tiposFuncion bloqueReturn .)


state 191

    (15) bloqueReturn -> LCURLY . declaracion estatutoExp returnexp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (92) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 92 (epsilon -> .)
    IF              reduce using rule 92 (epsilon -> .)
    WHILE           reduce using rule 92 (epsilon -> .)
    FOR             reduce using rule 92 (epsilon -> .)
    PRINT           reduce using rule 92 (epsilon -> .)
    FUNCTION        reduce using rule 92 (epsilon -> .)
    BREAK           reduce using rule 92 (epsilon -> .)
    DO              reduce using rule 92 (epsilon -> .)

    declaracion                    shift and go to state 194
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 192

    (62) tiposreturn -> VOID bloque .

    SEMICOLON       reduce using rule 62 (tiposreturn -> VOID bloque .)


state 193

    (95) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 95 (declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .)


state 194

    (15) bloqueReturn -> LCURLY declaracion . estatutoExp returnexp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . asignacionArr
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (27) estatuto -> . break
    (30) asignacion -> . ID EQUAL expresion
    (96) asignacionArr -> . arr arrayEqual expresion
    (52) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (48) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (46) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (67) functionCall -> . funCall lparen funcArgs rparen
    (28) break -> . BREAK expresion
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (47) do -> . DO
    (68) funCall -> . ID
    (100) callArr -> . ID

    ID              shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    FUNCTION        shift and go to state 30
    BREAK           shift and go to state 32
    DO              shift and go to state 34

    estatutoExp                    shift and go to state 195
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    asignacionArr                  shift and go to state 14
    condicion                      shift and go to state 15
    whileLoop                      shift and go to state 16
    doWhile                        shift and go to state 17
    forLoop                        shift and go to state 18
    escritura                      shift and go to state 19
    funcion                        shift and go to state 20
    functionCall                   shift and go to state 21
    break                          shift and go to state 22
    arr                            shift and go to state 24
    do                             shift and go to state 27
    funCall                        shift and go to state 31
    callArr                        shift and go to state 33

state 195

    (15) bloqueReturn -> LCURLY declaracion estatutoExp . returnexp RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (29) returnexp -> . RETURN expresion SEMICOLON
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . asignacionArr
    (20) estatuto -> . condicion
    (21) estatuto -> . whileLoop
    (22) estatuto -> . doWhile
    (23) estatuto -> . forLoop
    (24) estatuto -> . escritura
    (25) estatuto -> . funcion
    (26) estatuto -> . functionCall
    (27) estatuto -> . break
    (30) asignacion -> . ID EQUAL expresion
    (96) asignacionArr -> . arr arrayEqual expresion
    (52) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (48) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (46) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (51) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (31) escritura -> . PRINT LPAREN escrito RPAREN
    (58) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (67) functionCall -> . funCall lparen funcArgs rparen
    (28) break -> . BREAK expresion
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (47) do -> . DO
    (68) funCall -> . ID
    (100) callArr -> . ID

    RETURN          shift and go to state 197
    ID              shift and go to state 23
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    FOR             shift and go to state 28
    PRINT           shift and go to state 29
    FUNCTION        shift and go to state 30
    BREAK           shift and go to state 32
    DO              shift and go to state 34

    estatutoExp                    shift and go to state 42
    returnexp                      shift and go to state 196
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    asignacionArr                  shift and go to state 14
    condicion                      shift and go to state 15
    whileLoop                      shift and go to state 16
    doWhile                        shift and go to state 17
    forLoop                        shift and go to state 18
    escritura                      shift and go to state 19
    funcion                        shift and go to state 20
    functionCall                   shift and go to state 21
    break                          shift and go to state 22
    arr                            shift and go to state 24
    do                             shift and go to state 27
    funCall                        shift and go to state 31
    callArr                        shift and go to state 33

state 196

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp . RCURLY

    RCURLY          shift and go to state 198


state 197

    (29) returnexp -> RETURN . expresion SEMICOLON
    (35) expresion -> . exp
    (36) expresion -> . condition
    (37) expresion -> . functionCall
    (38) expresion -> . arr
    (77) exp -> . termino
    (78) exp -> . termino signo exp
    (39) condition -> . exp comparacion expresion
    (67) functionCall -> . funCall lparen funcArgs rparen
    (98) arr -> . callArr openBracket expresion abracket matrix
    (99) arr -> . callArr openBracket expresion abracket epsilon
    (81) termino -> . factor
    (82) termino -> . factor operacion termino
    (68) funCall -> . ID
    (100) callArr -> . ID
    (87) factor -> . varcte
    (88) factor -> . lparen expresion rparen
    (89) factor -> . functionCall
    (106) varcte -> . ID
    (107) varcte -> . int
    (108) varcte -> . float
    (109) varcte -> . bool
    (110) varcte -> . string
    (111) varcte -> . matrix
    (112) varcte -> . arr
    (90) lparen -> . LPAREN
    (113) int -> . INT
    (114) float -> . FLOAT
    (115) bool -> . BOOL
    (116) string -> . STRING
    (101) matrix -> . openBracket expresion mbracket
    (102) openBracket -> . LBRACKET

    ID              shift and go to state 69
    LPAREN          shift and go to state 58
    INT             shift and go to state 75
    FLOAT           shift and go to state 76
    BOOL            shift and go to state 77
    STRING          shift and go to state 78
    LBRACKET        shift and go to state 79

    expresion                      shift and go to state 199
    exp                            shift and go to state 60
    condition                      shift and go to state 61
    functionCall                   shift and go to state 62
    arr                            shift and go to state 63
    termino                        shift and go to state 64
    funCall                        shift and go to state 31
    lparen                         shift and go to state 65
    callArr                        shift and go to state 33
    openBracket                    shift and go to state 66
    matrix                         shift and go to state 67
    factor                         shift and go to state 68
    varcte                         shift and go to state 70
    int                            shift and go to state 71
    float                          shift and go to state 72
    bool                           shift and go to state 73
    string                         shift and go to state 74

state 198

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .

    SEMICOLON       reduce using rule 15 (bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .)


state 199

    (29) returnexp -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 200


state 200

    (29) returnexp -> RETURN expresion SEMICOLON .

    RCURLY          reduce using rule 29 (returnexp -> RETURN expresion SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 42 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 42 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 42 resolved as shift
WARNING: shift/reduce conflict for DO in state 42 resolved as shift
WARNING: shift/reduce conflict for COMA in state 158 resolved as shift
WARNING: shift/reduce conflict for COMA in state 162 resolved as shift
WARNING: reduce/reduce conflict in state 62 resolved using rule (expresion -> functionCall)
WARNING: rejected rule (factor -> functionCall) in state 62
WARNING: reduce/reduce conflict in state 63 resolved using rule (expresion -> arr)
WARNING: rejected rule (varcte -> arr) in state 63
WARNING: reduce/reduce conflict in state 69 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 69
WARNING: reduce/reduce conflict in state 143 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 143
