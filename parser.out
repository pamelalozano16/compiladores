Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START LPAREN RPAREN bloque
Rule 2     declaracion -> vars
Rule 3     declaracion -> epsilon
Rule 4     vars -> VAR var
Rule 5     vars -> vars vars
Rule 6     var -> vardef COLON tipo SEMICOLON
Rule 7     var -> declaracionArr SEMICOLON
Rule 8     var -> declaracionMatrix SEMICOLON
Rule 9     vardef -> ID
Rule 10    tipo -> INT
Rule 11    tipo -> FLOAT
Rule 12    tipo -> BOOL
Rule 13    tipo -> STRING
Rule 14    bloque -> LCURLY declaracion estatutoExp RCURLY
Rule 15    bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY
Rule 16    estatutoExp -> estatuto SEMICOLON
Rule 17    estatutoExp -> estatutoExp estatutoExp
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> whileLoop
Rule 21    estatuto -> doWhile
Rule 22    estatuto -> forLoop
Rule 23    estatuto -> escritura
Rule 24    estatuto -> funcion
Rule 25    estatuto -> functionCall
Rule 26    returnexp -> RETURN expresion SEMICOLON
Rule 27    asignacion -> ID EQUAL expresion
Rule 28    escritura -> PRINT LPAREN escrito RPAREN
Rule 29    escrito -> impr
Rule 30    escrito -> impr COMA impr
Rule 31    impr -> STRING
Rule 32    impr -> expresion
Rule 33    expresion -> exp
Rule 34    expresion -> condition
Rule 35    expresion -> functionCall
Rule 36    condition -> exp comparacion expresion
Rule 37    comparacion -> LESSTHAN
Rule 38    comparacion -> MORETHAN
Rule 39    comparacion -> ISEQUAL
Rule 40    comparacion -> NOTEQUAL
Rule 41    comparacion -> AND
Rule 42    comparacion -> OR
Rule 43    doWhile -> do bloque WHILE LPAREN expresion RPAREN
Rule 44    do -> DO
Rule 45    whileLoop -> WHILE startCondition expresion endCondition bloque
Rule 46    startCondition -> LPAREN
Rule 47    startCondition -> SEMICOLON
Rule 48    forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
Rule 49    condicion -> IF LPAREN expresion endCondition bloque condicionelse
Rule 50    endCondition -> RPAREN
Rule 51    endCondition -> SEMICOLON
Rule 52    condicionelse -> else bloque
Rule 53    condicionelse -> epsilon
Rule 54    else -> ELSE
Rule 55    funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
Rule 56    addArgs -> epsilon
Rule 57    funcdef -> ID
Rule 58    tiposreturn -> tiposFuncion bloqueReturn
Rule 59    tiposreturn -> VOID bloque
Rule 60    tiposFuncion -> INT
Rule 61    tiposFuncion -> FLOAT
Rule 62    tiposFuncion -> BOOL
Rule 63    tiposFuncion -> STRING
Rule 64    functionCall -> funCall paren funcArgs paren
Rule 65    funCall -> ID
Rule 66    funcArgs -> checkArgs
Rule 67    funcArgs -> funcArgs COMA funcArgs
Rule 68    funcArgs -> epsilon
Rule 69    checkArgs -> expresion
Rule 70    argumentos -> args
Rule 71    argumentos -> epsilon
Rule 72    args -> asignacion
Rule 73    args -> args COMA args
Rule 74    exp -> termino
Rule 75    exp -> termino signo exp
Rule 76    signo -> PLUS
Rule 77    signo -> MINUS
Rule 78    termino -> factor
Rule 79    termino -> factor operacion termino
Rule 80    operacion -> TIMES
Rule 81    operacion -> DIVIDE
Rule 82    operacion -> DIFF
Rule 83    operacion -> EXP
Rule 84    factor -> paren expresion paren
Rule 85    factor -> varcte
Rule 86    factor -> functionCall
Rule 87    paren -> LPAREN
Rule 88    paren -> RPAREN
Rule 89    epsilon -> <empty>
Rule 90    arrDef -> ID
Rule 91    declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo
Rule 92    declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
Rule 93    arr -> callArr bracket expresion abracket matrix
Rule 94    arr -> callArr bracket expresion abracket epsilon
Rule 95    callArr -> ID
Rule 96    matrix -> bracket expresion mbracket
Rule 97    bracket -> LBRACKET
Rule 98    bracket -> RBRACKET
Rule 99    abracket -> bracket
Rule 100   mbracket -> bracket
Rule 101   prueba -> epsilon
Rule 102   varcte -> ID
Rule 103   varcte -> int
Rule 104   varcte -> float
Rule 105   varcte -> bool
Rule 106   varcte -> string
Rule 107   varcte -> matrix
Rule 108   varcte -> arr
Rule 109   int -> INT
Rule 110   float -> FLOAT
Rule 111   bool -> BOOL
Rule 112   string -> STRING

Terminals, with rules where they appear

AND                  : 41
BOOL                 : 12 62 111
COLON                : 6 55 91 92
COMA                 : 30 67 73
DIFF                 : 82
DIVIDE               : 81
DO                   : 44
ELSE                 : 54
EQUAL                : 27
EXP                  : 83
FLOAT                : 11 61 110
FOR                  : 48
FUNCTION             : 55
ID                   : 9 27 57 65 90 95 102
IF                   : 49
INT                  : 10 60 91 92 92 109
ISEQUAL              : 39
LBRACKET             : 91 92 92 97
LCURLY               : 14 15
LESSTHAN             : 37
LPAREN               : 1 28 43 46 48 49 55 87
MINUS                : 77
MORETHAN             : 38
NOTEQUAL             : 40
OR                   : 42
PLUS                 : 76
PRINT                : 28
RBRACKET             : 91 92 92 98
RCURLY               : 14 15
RETURN               : 26
RPAREN               : 1 28 43 48 50 55 88
SEMICOLON            : 6 7 8 16 26 47 51
START                : 1
STRING               : 13 31 63 112
TIMES                : 80
VAR                  : 4
VOID                 : 59
WHILE                : 43 45
error                : 

Nonterminals, with rules where they appear

abracket             : 93 94
addArgs              : 55
args                 : 70 73 73
argumentos           : 48
arr                  : 108
arrDef               : 91 92
asignacion           : 18 48 72
bloque               : 1 43 45 48 49 52 59
bloqueReturn         : 58
bool                 : 105
bracket              : 93 94 96 99 100
callArr              : 93 94
checkArgs            : 66
comparacion          : 36
condicion            : 19
condicionelse        : 49
condition            : 34
declaracion          : 14 15 55
declaracionArr       : 7
declaracionMatrix    : 8
do                   : 43
doWhile              : 21
else                 : 52
endCondition         : 45 48 49
epsilon              : 3 53 56 68 71 94 101
escrito              : 28
escritura            : 23
estatuto             : 16
estatutoExp          : 14 15 17 17
exp                  : 33 36 75
expresion            : 26 27 32 36 43 45 48 49 69 84 93 94 96
factor               : 78 79
float                : 104
forLoop              : 22
funCall              : 64
funcArgs             : 64 67 67
funcdef              : 55
funcion              : 24
functionCall         : 25 35 86
impr                 : 29 30 30
int                  : 103
matrix               : 93 107
mbracket             : 96
operacion            : 79
paren                : 64 64 84 84
programa             : 0
prueba               : 
returnexp            : 15
signo                : 75
startCondition       : 45 48
string               : 106
termino              : 74 75 79
tipo                 : 6 91 92
tiposFuncion         : 58
tiposreturn          : 55
var                  : 4
varcte               : 85
vardef               : 6
vars                 : 2 5 5
whileLoop            : 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START LPAREN RPAREN bloque

    START           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> START . LPAREN RPAREN bloque

    LPAREN          shift and go to state 3


state 3

    (1) programa -> START LPAREN . RPAREN bloque

    RPAREN          shift and go to state 4


state 4

    (1) programa -> START LPAREN RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 5

state 5

    (1) programa -> START LPAREN RPAREN bloque .

    $end            reduce using rule 1 (programa -> START LPAREN RPAREN bloque .)


state 6

    (14) bloque -> LCURLY . declaracion estatutoExp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (89) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 89 (epsilon -> .)
    IF              reduce using rule 89 (epsilon -> .)
    WHILE           reduce using rule 89 (epsilon -> .)
    FOR             reduce using rule 89 (epsilon -> .)
    PRINT           reduce using rule 89 (epsilon -> .)
    FUNCTION        reduce using rule 89 (epsilon -> .)
    DO              reduce using rule 89 (epsilon -> .)

    declaracion                    shift and go to state 7
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 7

    (14) bloque -> LCURLY declaracion . estatutoExp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (64) functionCall -> . funCall paren funcArgs paren
    (44) do -> . DO
    (65) funCall -> . ID

    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 11
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 8

    (2) declaracion -> vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

    ID              reduce using rule 2 (declaracion -> vars .)
    IF              reduce using rule 2 (declaracion -> vars .)
    WHILE           reduce using rule 2 (declaracion -> vars .)
    FOR             reduce using rule 2 (declaracion -> vars .)
    PRINT           reduce using rule 2 (declaracion -> vars .)
    FUNCTION        reduce using rule 2 (declaracion -> vars .)
    DO              reduce using rule 2 (declaracion -> vars .)
    RPAREN          reduce using rule 2 (declaracion -> vars .)
    VAR             shift and go to state 10

    vars                           shift and go to state 30

state 9

    (3) declaracion -> epsilon .

    ID              reduce using rule 3 (declaracion -> epsilon .)
    IF              reduce using rule 3 (declaracion -> epsilon .)
    WHILE           reduce using rule 3 (declaracion -> epsilon .)
    FOR             reduce using rule 3 (declaracion -> epsilon .)
    PRINT           reduce using rule 3 (declaracion -> epsilon .)
    FUNCTION        reduce using rule 3 (declaracion -> epsilon .)
    DO              reduce using rule 3 (declaracion -> epsilon .)
    RPAREN          reduce using rule 3 (declaracion -> epsilon .)


state 10

    (4) vars -> VAR . var
    (6) var -> . vardef COLON tipo SEMICOLON
    (7) var -> . declaracionArr SEMICOLON
    (8) var -> . declaracionMatrix SEMICOLON
    (9) vardef -> . ID
    (91) declaracionArr -> . arrDef LBRACKET INT RBRACKET COLON tipo
    (92) declaracionMatrix -> . arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo
    (90) arrDef -> . ID

    ID              shift and go to state 35

    var                            shift and go to state 31
    vardef                         shift and go to state 32
    declaracionArr                 shift and go to state 33
    declaracionMatrix              shift and go to state 34
    arrDef                         shift and go to state 36

state 11

    (14) bloque -> LCURLY declaracion estatutoExp . RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (64) functionCall -> . funCall paren funcArgs paren
    (44) do -> . DO
    (65) funCall -> . ID

    RCURLY          shift and go to state 38
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 37
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 12

    (16) estatutoExp -> estatuto . SEMICOLON

    SEMICOLON       shift and go to state 39


state 13

    (18) estatuto -> asignacion .

    SEMICOLON       reduce using rule 18 (estatuto -> asignacion .)


state 14

    (19) estatuto -> condicion .

    SEMICOLON       reduce using rule 19 (estatuto -> condicion .)


state 15

    (20) estatuto -> whileLoop .

    SEMICOLON       reduce using rule 20 (estatuto -> whileLoop .)


state 16

    (21) estatuto -> doWhile .

    SEMICOLON       reduce using rule 21 (estatuto -> doWhile .)


state 17

    (22) estatuto -> forLoop .

    SEMICOLON       reduce using rule 22 (estatuto -> forLoop .)


state 18

    (23) estatuto -> escritura .

    SEMICOLON       reduce using rule 23 (estatuto -> escritura .)


state 19

    (24) estatuto -> funcion .

    SEMICOLON       reduce using rule 24 (estatuto -> funcion .)


state 20

    (25) estatuto -> functionCall .

    SEMICOLON       reduce using rule 25 (estatuto -> functionCall .)


state 21

    (27) asignacion -> ID . EQUAL expresion
    (65) funCall -> ID .

    EQUAL           shift and go to state 40
    LPAREN          reduce using rule 65 (funCall -> ID .)
    RPAREN          reduce using rule 65 (funCall -> ID .)


state 22

    (49) condicion -> IF . LPAREN expresion endCondition bloque condicionelse

    LPAREN          shift and go to state 41


state 23

    (45) whileLoop -> WHILE . startCondition expresion endCondition bloque
    (46) startCondition -> . LPAREN
    (47) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 43
    SEMICOLON       shift and go to state 44

    startCondition                 shift and go to state 42

state 24

    (43) doWhile -> do . bloque WHILE LPAREN expresion RPAREN
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 45

state 25

    (48) forLoop -> FOR . LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque

    LPAREN          shift and go to state 46


state 26

    (28) escritura -> PRINT . LPAREN escrito RPAREN

    LPAREN          shift and go to state 47


state 27

    (55) funcion -> FUNCTION . funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (57) funcdef -> . ID

    ID              shift and go to state 49

    funcdef                        shift and go to state 48

state 28

    (64) functionCall -> funCall . paren funcArgs paren
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN

    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52

    paren                          shift and go to state 50

state 29

    (44) do -> DO .

    LCURLY          reduce using rule 44 (do -> DO .)


state 30

    (5) vars -> vars vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 5 (vars -> vars vars .)
    IF              reduce using rule 5 (vars -> vars vars .)
    WHILE           reduce using rule 5 (vars -> vars vars .)
    FOR             reduce using rule 5 (vars -> vars vars .)
    PRINT           reduce using rule 5 (vars -> vars vars .)
    FUNCTION        reduce using rule 5 (vars -> vars vars .)
    DO              reduce using rule 5 (vars -> vars vars .)
    RPAREN          reduce using rule 5 (vars -> vars vars .)
    VAR             shift and go to state 10

  ! VAR             [ reduce using rule 5 (vars -> vars vars .) ]

    vars                           shift and go to state 30

state 31

    (4) vars -> VAR var .

    VAR             reduce using rule 4 (vars -> VAR var .)
    ID              reduce using rule 4 (vars -> VAR var .)
    IF              reduce using rule 4 (vars -> VAR var .)
    WHILE           reduce using rule 4 (vars -> VAR var .)
    FOR             reduce using rule 4 (vars -> VAR var .)
    PRINT           reduce using rule 4 (vars -> VAR var .)
    FUNCTION        reduce using rule 4 (vars -> VAR var .)
    DO              reduce using rule 4 (vars -> VAR var .)
    RPAREN          reduce using rule 4 (vars -> VAR var .)


state 32

    (6) var -> vardef . COLON tipo SEMICOLON

    COLON           shift and go to state 53


state 33

    (7) var -> declaracionArr . SEMICOLON

    SEMICOLON       shift and go to state 54


state 34

    (8) var -> declaracionMatrix . SEMICOLON

    SEMICOLON       shift and go to state 55


state 35

    (9) vardef -> ID .
    (90) arrDef -> ID .

    COLON           reduce using rule 9 (vardef -> ID .)
    LBRACKET        reduce using rule 90 (arrDef -> ID .)


state 36

    (91) declaracionArr -> arrDef . LBRACKET INT RBRACKET COLON tipo
    (92) declaracionMatrix -> arrDef . LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    LBRACKET        shift and go to state 56


state 37

    (17) estatutoExp -> estatutoExp estatutoExp .
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (64) functionCall -> . funCall paren funcArgs paren
    (44) do -> . DO
    (65) funCall -> . ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    RCURLY          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    RETURN          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

  ! ID              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! IF              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! WHILE           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FOR             [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! PRINT           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FUNCTION        [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! DO              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]

    estatutoExp                    shift and go to state 37
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 38

    (14) bloque -> LCURLY declaracion estatutoExp RCURLY .

    $end            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    WHILE           reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    ELSE            reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    SEMICOLON       reduce using rule 14 (bloque -> LCURLY declaracion estatutoExp RCURLY .)


state 39

    (16) estatutoExp -> estatuto SEMICOLON .

    RCURLY          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    ID              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    IF              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    WHILE           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FOR             reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    PRINT           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FUNCTION        reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    DO              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    RETURN          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)


state 40

    (27) asignacion -> ID EQUAL . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    expresion                      shift and go to state 58
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 41

    (49) condicion -> IF LPAREN . expresion endCondition bloque condicionelse
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    expresion                      shift and go to state 80
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 42

    (45) whileLoop -> WHILE startCondition . expresion endCondition bloque
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    expresion                      shift and go to state 81
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 43

    (46) startCondition -> LPAREN .

    ID              reduce using rule 46 (startCondition -> LPAREN .)
    LPAREN          reduce using rule 46 (startCondition -> LPAREN .)
    RPAREN          reduce using rule 46 (startCondition -> LPAREN .)
    INT             reduce using rule 46 (startCondition -> LPAREN .)
    FLOAT           reduce using rule 46 (startCondition -> LPAREN .)
    BOOL            reduce using rule 46 (startCondition -> LPAREN .)
    STRING          reduce using rule 46 (startCondition -> LPAREN .)
    LBRACKET        reduce using rule 46 (startCondition -> LPAREN .)
    RBRACKET        reduce using rule 46 (startCondition -> LPAREN .)


state 44

    (47) startCondition -> SEMICOLON .

    ID              reduce using rule 47 (startCondition -> SEMICOLON .)
    LPAREN          reduce using rule 47 (startCondition -> SEMICOLON .)
    RPAREN          reduce using rule 47 (startCondition -> SEMICOLON .)
    INT             reduce using rule 47 (startCondition -> SEMICOLON .)
    FLOAT           reduce using rule 47 (startCondition -> SEMICOLON .)
    BOOL            reduce using rule 47 (startCondition -> SEMICOLON .)
    STRING          reduce using rule 47 (startCondition -> SEMICOLON .)
    LBRACKET        reduce using rule 47 (startCondition -> SEMICOLON .)
    RBRACKET        reduce using rule 47 (startCondition -> SEMICOLON .)


state 45

    (43) doWhile -> do bloque . WHILE LPAREN expresion RPAREN

    WHILE           shift and go to state 82


state 46

    (48) forLoop -> FOR LPAREN . argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (70) argumentos -> . args
    (71) argumentos -> . epsilon
    (72) args -> . asignacion
    (73) args -> . args COMA args
    (89) epsilon -> .
    (27) asignacion -> . ID EQUAL expresion

    LPAREN          reduce using rule 89 (epsilon -> .)
    SEMICOLON       reduce using rule 89 (epsilon -> .)
    ID              shift and go to state 87

    argumentos                     shift and go to state 83
    asignacion                     shift and go to state 84
    args                           shift and go to state 85
    epsilon                        shift and go to state 86

state 47

    (28) escritura -> PRINT LPAREN . escrito RPAREN
    (29) escrito -> . impr
    (30) escrito -> . impr COMA impr
    (31) impr -> . STRING
    (32) impr -> . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    STRING          shift and go to state 90
    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    escrito                        shift and go to state 88
    impr                           shift and go to state 89
    expresion                      shift and go to state 91
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 48

    (55) funcion -> FUNCTION funcdef . LPAREN declaracion addArgs RPAREN COLON tiposreturn

    LPAREN          shift and go to state 92


state 49

    (57) funcdef -> ID .

    LPAREN          reduce using rule 57 (funcdef -> ID .)


state 50

    (64) functionCall -> funCall paren . funcArgs paren
    (66) funcArgs -> . checkArgs
    (67) funcArgs -> . funcArgs COMA funcArgs
    (68) funcArgs -> . epsilon
    (69) checkArgs -> . expresion
    (89) epsilon -> .
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
    COMA            reduce using rule 89 (epsilon -> .)
    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

  ! LPAREN          [ reduce using rule 89 (epsilon -> .) ]
  ! RPAREN          [ reduce using rule 89 (epsilon -> .) ]

    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    funcArgs                       shift and go to state 93
    checkArgs                      shift and go to state 94
    epsilon                        shift and go to state 95
    expresion                      shift and go to state 96
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 51

    (87) paren -> LPAREN .

    ID              reduce using rule 87 (paren -> LPAREN .)
    LPAREN          reduce using rule 87 (paren -> LPAREN .)
    RPAREN          reduce using rule 87 (paren -> LPAREN .)
    INT             reduce using rule 87 (paren -> LPAREN .)
    FLOAT           reduce using rule 87 (paren -> LPAREN .)
    BOOL            reduce using rule 87 (paren -> LPAREN .)
    STRING          reduce using rule 87 (paren -> LPAREN .)
    LBRACKET        reduce using rule 87 (paren -> LPAREN .)
    RBRACKET        reduce using rule 87 (paren -> LPAREN .)
    COMA            reduce using rule 87 (paren -> LPAREN .)
    SEMICOLON       reduce using rule 87 (paren -> LPAREN .)
    TIMES           reduce using rule 87 (paren -> LPAREN .)
    DIVIDE          reduce using rule 87 (paren -> LPAREN .)
    DIFF            reduce using rule 87 (paren -> LPAREN .)
    EXP             reduce using rule 87 (paren -> LPAREN .)
    PLUS            reduce using rule 87 (paren -> LPAREN .)
    MINUS           reduce using rule 87 (paren -> LPAREN .)
    LESSTHAN        reduce using rule 87 (paren -> LPAREN .)
    MORETHAN        reduce using rule 87 (paren -> LPAREN .)
    ISEQUAL         reduce using rule 87 (paren -> LPAREN .)
    NOTEQUAL        reduce using rule 87 (paren -> LPAREN .)
    AND             reduce using rule 87 (paren -> LPAREN .)
    OR              reduce using rule 87 (paren -> LPAREN .)


state 52

    (88) paren -> RPAREN .

    ID              reduce using rule 88 (paren -> RPAREN .)
    LPAREN          reduce using rule 88 (paren -> RPAREN .)
    RPAREN          reduce using rule 88 (paren -> RPAREN .)
    INT             reduce using rule 88 (paren -> RPAREN .)
    FLOAT           reduce using rule 88 (paren -> RPAREN .)
    BOOL            reduce using rule 88 (paren -> RPAREN .)
    STRING          reduce using rule 88 (paren -> RPAREN .)
    LBRACKET        reduce using rule 88 (paren -> RPAREN .)
    RBRACKET        reduce using rule 88 (paren -> RPAREN .)
    COMA            reduce using rule 88 (paren -> RPAREN .)
    SEMICOLON       reduce using rule 88 (paren -> RPAREN .)
    TIMES           reduce using rule 88 (paren -> RPAREN .)
    DIVIDE          reduce using rule 88 (paren -> RPAREN .)
    DIFF            reduce using rule 88 (paren -> RPAREN .)
    EXP             reduce using rule 88 (paren -> RPAREN .)
    PLUS            reduce using rule 88 (paren -> RPAREN .)
    MINUS           reduce using rule 88 (paren -> RPAREN .)
    LESSTHAN        reduce using rule 88 (paren -> RPAREN .)
    MORETHAN        reduce using rule 88 (paren -> RPAREN .)
    ISEQUAL         reduce using rule 88 (paren -> RPAREN .)
    NOTEQUAL        reduce using rule 88 (paren -> RPAREN .)
    AND             reduce using rule 88 (paren -> RPAREN .)
    OR              reduce using rule 88 (paren -> RPAREN .)


state 53

    (6) var -> vardef COLON . tipo SEMICOLON
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 98
    FLOAT           shift and go to state 99
    BOOL            shift and go to state 100
    STRING          shift and go to state 101

    tipo                           shift and go to state 97

state 54

    (7) var -> declaracionArr SEMICOLON .

    VAR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    ID              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    IF              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    WHILE           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FOR             reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    PRINT           reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    FUNCTION        reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    DO              reduce using rule 7 (var -> declaracionArr SEMICOLON .)
    RPAREN          reduce using rule 7 (var -> declaracionArr SEMICOLON .)


state 55

    (8) var -> declaracionMatrix SEMICOLON .

    VAR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    ID              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    IF              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    WHILE           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FOR             reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    PRINT           reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    FUNCTION        reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    DO              reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)
    RPAREN          reduce using rule 8 (var -> declaracionMatrix SEMICOLON .)


state 56

    (91) declaracionArr -> arrDef LBRACKET . INT RBRACKET COLON tipo
    (92) declaracionMatrix -> arrDef LBRACKET . INT RBRACKET LBRACKET INT RBRACKET COLON tipo

    INT             shift and go to state 102


state 57

    (65) funCall -> ID .
    (102) varcte -> ID .
    (95) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 65 (funCall -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 65 (funCall -> ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 95 (callArr -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 95 (callArr -> ID .)
    LPAREN          reduce using rule 65 (funCall -> ID .)
    RPAREN          reduce using rule 65 (funCall -> ID .)
    TIMES           reduce using rule 102 (varcte -> ID .)
    DIVIDE          reduce using rule 102 (varcte -> ID .)
    DIFF            reduce using rule 102 (varcte -> ID .)
    EXP             reduce using rule 102 (varcte -> ID .)
    PLUS            reduce using rule 102 (varcte -> ID .)
    MINUS           reduce using rule 102 (varcte -> ID .)
    LESSTHAN        reduce using rule 102 (varcte -> ID .)
    MORETHAN        reduce using rule 102 (varcte -> ID .)
    ISEQUAL         reduce using rule 102 (varcte -> ID .)
    NOTEQUAL        reduce using rule 102 (varcte -> ID .)
    AND             reduce using rule 102 (varcte -> ID .)
    OR              reduce using rule 102 (varcte -> ID .)
    SEMICOLON       reduce using rule 102 (varcte -> ID .)
    COMA            reduce using rule 102 (varcte -> ID .)
    LBRACKET        reduce using rule 95 (callArr -> ID .)
    RBRACKET        reduce using rule 95 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 102 (varcte -> ID .) ]
  ! RPAREN          [ reduce using rule 102 (varcte -> ID .) ]
  ! LBRACKET        [ reduce using rule 102 (varcte -> ID .) ]
  ! RBRACKET        [ reduce using rule 102 (varcte -> ID .) ]


state 58

    (27) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 27 (asignacion -> ID EQUAL expresion .)
    COMA            reduce using rule 27 (asignacion -> ID EQUAL expresion .)
    LPAREN          reduce using rule 27 (asignacion -> ID EQUAL expresion .)
    RPAREN          reduce using rule 27 (asignacion -> ID EQUAL expresion .)


state 59

    (33) expresion -> exp .
    (36) condition -> exp . comparacion expresion
    (37) comparacion -> . LESSTHAN
    (38) comparacion -> . MORETHAN
    (39) comparacion -> . ISEQUAL
    (40) comparacion -> . NOTEQUAL
    (41) comparacion -> . AND
    (42) comparacion -> . OR

    SEMICOLON       reduce using rule 33 (expresion -> exp .)
    COMA            reduce using rule 33 (expresion -> exp .)
    LPAREN          reduce using rule 33 (expresion -> exp .)
    RPAREN          reduce using rule 33 (expresion -> exp .)
    LBRACKET        reduce using rule 33 (expresion -> exp .)
    RBRACKET        reduce using rule 33 (expresion -> exp .)
    LESSTHAN        shift and go to state 104
    MORETHAN        shift and go to state 105
    ISEQUAL         shift and go to state 106
    NOTEQUAL        shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 109

    comparacion                    shift and go to state 103

state 60

    (34) expresion -> condition .

    SEMICOLON       reduce using rule 34 (expresion -> condition .)
    COMA            reduce using rule 34 (expresion -> condition .)
    LPAREN          reduce using rule 34 (expresion -> condition .)
    RPAREN          reduce using rule 34 (expresion -> condition .)
    LBRACKET        reduce using rule 34 (expresion -> condition .)
    RBRACKET        reduce using rule 34 (expresion -> condition .)


state 61

    (35) expresion -> functionCall .
    (86) factor -> functionCall .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 35 (expresion -> functionCall .)
  ! reduce/reduce conflict for COMA resolved using rule 35 (expresion -> functionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 35 (expresion -> functionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expresion -> functionCall .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 35 (expresion -> functionCall .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 35 (expresion -> functionCall .)
    SEMICOLON       reduce using rule 35 (expresion -> functionCall .)
    COMA            reduce using rule 35 (expresion -> functionCall .)
    LPAREN          reduce using rule 35 (expresion -> functionCall .)
    RPAREN          reduce using rule 35 (expresion -> functionCall .)
    LBRACKET        reduce using rule 35 (expresion -> functionCall .)
    RBRACKET        reduce using rule 35 (expresion -> functionCall .)
    TIMES           reduce using rule 86 (factor -> functionCall .)
    DIVIDE          reduce using rule 86 (factor -> functionCall .)
    DIFF            reduce using rule 86 (factor -> functionCall .)
    EXP             reduce using rule 86 (factor -> functionCall .)
    PLUS            reduce using rule 86 (factor -> functionCall .)
    MINUS           reduce using rule 86 (factor -> functionCall .)
    LESSTHAN        reduce using rule 86 (factor -> functionCall .)
    MORETHAN        reduce using rule 86 (factor -> functionCall .)
    ISEQUAL         reduce using rule 86 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 86 (factor -> functionCall .)
    AND             reduce using rule 86 (factor -> functionCall .)
    OR              reduce using rule 86 (factor -> functionCall .)

  ! SEMICOLON       [ reduce using rule 86 (factor -> functionCall .) ]
  ! COMA            [ reduce using rule 86 (factor -> functionCall .) ]
  ! LPAREN          [ reduce using rule 86 (factor -> functionCall .) ]
  ! RPAREN          [ reduce using rule 86 (factor -> functionCall .) ]
  ! LBRACKET        [ reduce using rule 86 (factor -> functionCall .) ]
  ! RBRACKET        [ reduce using rule 86 (factor -> functionCall .) ]


state 62

    (74) exp -> termino .
    (75) exp -> termino . signo exp
    (76) signo -> . PLUS
    (77) signo -> . MINUS

    LESSTHAN        reduce using rule 74 (exp -> termino .)
    MORETHAN        reduce using rule 74 (exp -> termino .)
    ISEQUAL         reduce using rule 74 (exp -> termino .)
    NOTEQUAL        reduce using rule 74 (exp -> termino .)
    AND             reduce using rule 74 (exp -> termino .)
    OR              reduce using rule 74 (exp -> termino .)
    SEMICOLON       reduce using rule 74 (exp -> termino .)
    COMA            reduce using rule 74 (exp -> termino .)
    LPAREN          reduce using rule 74 (exp -> termino .)
    RPAREN          reduce using rule 74 (exp -> termino .)
    LBRACKET        reduce using rule 74 (exp -> termino .)
    RBRACKET        reduce using rule 74 (exp -> termino .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112

    signo                          shift and go to state 110

state 63

    (84) factor -> paren . expresion paren
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    paren                          shift and go to state 63
    expresion                      shift and go to state 113
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 64

    (78) termino -> factor .
    (79) termino -> factor . operacion termino
    (80) operacion -> . TIMES
    (81) operacion -> . DIVIDE
    (82) operacion -> . DIFF
    (83) operacion -> . EXP

    PLUS            reduce using rule 78 (termino -> factor .)
    MINUS           reduce using rule 78 (termino -> factor .)
    LESSTHAN        reduce using rule 78 (termino -> factor .)
    MORETHAN        reduce using rule 78 (termino -> factor .)
    ISEQUAL         reduce using rule 78 (termino -> factor .)
    NOTEQUAL        reduce using rule 78 (termino -> factor .)
    AND             reduce using rule 78 (termino -> factor .)
    OR              reduce using rule 78 (termino -> factor .)
    SEMICOLON       reduce using rule 78 (termino -> factor .)
    COMA            reduce using rule 78 (termino -> factor .)
    LPAREN          reduce using rule 78 (termino -> factor .)
    RPAREN          reduce using rule 78 (termino -> factor .)
    LBRACKET        reduce using rule 78 (termino -> factor .)
    RBRACKET        reduce using rule 78 (termino -> factor .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    DIFF            shift and go to state 117
    EXP             shift and go to state 118

    operacion                      shift and go to state 114

state 65

    (85) factor -> varcte .

    TIMES           reduce using rule 85 (factor -> varcte .)
    DIVIDE          reduce using rule 85 (factor -> varcte .)
    DIFF            reduce using rule 85 (factor -> varcte .)
    EXP             reduce using rule 85 (factor -> varcte .)
    PLUS            reduce using rule 85 (factor -> varcte .)
    MINUS           reduce using rule 85 (factor -> varcte .)
    LESSTHAN        reduce using rule 85 (factor -> varcte .)
    MORETHAN        reduce using rule 85 (factor -> varcte .)
    ISEQUAL         reduce using rule 85 (factor -> varcte .)
    NOTEQUAL        reduce using rule 85 (factor -> varcte .)
    AND             reduce using rule 85 (factor -> varcte .)
    OR              reduce using rule 85 (factor -> varcte .)
    SEMICOLON       reduce using rule 85 (factor -> varcte .)
    COMA            reduce using rule 85 (factor -> varcte .)
    LPAREN          reduce using rule 85 (factor -> varcte .)
    RPAREN          reduce using rule 85 (factor -> varcte .)
    LBRACKET        reduce using rule 85 (factor -> varcte .)
    RBRACKET        reduce using rule 85 (factor -> varcte .)


state 66

    (103) varcte -> int .

    TIMES           reduce using rule 103 (varcte -> int .)
    DIVIDE          reduce using rule 103 (varcte -> int .)
    DIFF            reduce using rule 103 (varcte -> int .)
    EXP             reduce using rule 103 (varcte -> int .)
    PLUS            reduce using rule 103 (varcte -> int .)
    MINUS           reduce using rule 103 (varcte -> int .)
    LESSTHAN        reduce using rule 103 (varcte -> int .)
    MORETHAN        reduce using rule 103 (varcte -> int .)
    ISEQUAL         reduce using rule 103 (varcte -> int .)
    NOTEQUAL        reduce using rule 103 (varcte -> int .)
    AND             reduce using rule 103 (varcte -> int .)
    OR              reduce using rule 103 (varcte -> int .)
    SEMICOLON       reduce using rule 103 (varcte -> int .)
    COMA            reduce using rule 103 (varcte -> int .)
    LPAREN          reduce using rule 103 (varcte -> int .)
    RPAREN          reduce using rule 103 (varcte -> int .)
    LBRACKET        reduce using rule 103 (varcte -> int .)
    RBRACKET        reduce using rule 103 (varcte -> int .)


state 67

    (104) varcte -> float .

    TIMES           reduce using rule 104 (varcte -> float .)
    DIVIDE          reduce using rule 104 (varcte -> float .)
    DIFF            reduce using rule 104 (varcte -> float .)
    EXP             reduce using rule 104 (varcte -> float .)
    PLUS            reduce using rule 104 (varcte -> float .)
    MINUS           reduce using rule 104 (varcte -> float .)
    LESSTHAN        reduce using rule 104 (varcte -> float .)
    MORETHAN        reduce using rule 104 (varcte -> float .)
    ISEQUAL         reduce using rule 104 (varcte -> float .)
    NOTEQUAL        reduce using rule 104 (varcte -> float .)
    AND             reduce using rule 104 (varcte -> float .)
    OR              reduce using rule 104 (varcte -> float .)
    SEMICOLON       reduce using rule 104 (varcte -> float .)
    COMA            reduce using rule 104 (varcte -> float .)
    LPAREN          reduce using rule 104 (varcte -> float .)
    RPAREN          reduce using rule 104 (varcte -> float .)
    LBRACKET        reduce using rule 104 (varcte -> float .)
    RBRACKET        reduce using rule 104 (varcte -> float .)


state 68

    (105) varcte -> bool .

    TIMES           reduce using rule 105 (varcte -> bool .)
    DIVIDE          reduce using rule 105 (varcte -> bool .)
    DIFF            reduce using rule 105 (varcte -> bool .)
    EXP             reduce using rule 105 (varcte -> bool .)
    PLUS            reduce using rule 105 (varcte -> bool .)
    MINUS           reduce using rule 105 (varcte -> bool .)
    LESSTHAN        reduce using rule 105 (varcte -> bool .)
    MORETHAN        reduce using rule 105 (varcte -> bool .)
    ISEQUAL         reduce using rule 105 (varcte -> bool .)
    NOTEQUAL        reduce using rule 105 (varcte -> bool .)
    AND             reduce using rule 105 (varcte -> bool .)
    OR              reduce using rule 105 (varcte -> bool .)
    SEMICOLON       reduce using rule 105 (varcte -> bool .)
    COMA            reduce using rule 105 (varcte -> bool .)
    LPAREN          reduce using rule 105 (varcte -> bool .)
    RPAREN          reduce using rule 105 (varcte -> bool .)
    LBRACKET        reduce using rule 105 (varcte -> bool .)
    RBRACKET        reduce using rule 105 (varcte -> bool .)


state 69

    (106) varcte -> string .

    TIMES           reduce using rule 106 (varcte -> string .)
    DIVIDE          reduce using rule 106 (varcte -> string .)
    DIFF            reduce using rule 106 (varcte -> string .)
    EXP             reduce using rule 106 (varcte -> string .)
    PLUS            reduce using rule 106 (varcte -> string .)
    MINUS           reduce using rule 106 (varcte -> string .)
    LESSTHAN        reduce using rule 106 (varcte -> string .)
    MORETHAN        reduce using rule 106 (varcte -> string .)
    ISEQUAL         reduce using rule 106 (varcte -> string .)
    NOTEQUAL        reduce using rule 106 (varcte -> string .)
    AND             reduce using rule 106 (varcte -> string .)
    OR              reduce using rule 106 (varcte -> string .)
    SEMICOLON       reduce using rule 106 (varcte -> string .)
    COMA            reduce using rule 106 (varcte -> string .)
    LPAREN          reduce using rule 106 (varcte -> string .)
    RPAREN          reduce using rule 106 (varcte -> string .)
    LBRACKET        reduce using rule 106 (varcte -> string .)
    RBRACKET        reduce using rule 106 (varcte -> string .)


state 70

    (107) varcte -> matrix .

    TIMES           reduce using rule 107 (varcte -> matrix .)
    DIVIDE          reduce using rule 107 (varcte -> matrix .)
    DIFF            reduce using rule 107 (varcte -> matrix .)
    EXP             reduce using rule 107 (varcte -> matrix .)
    PLUS            reduce using rule 107 (varcte -> matrix .)
    MINUS           reduce using rule 107 (varcte -> matrix .)
    LESSTHAN        reduce using rule 107 (varcte -> matrix .)
    MORETHAN        reduce using rule 107 (varcte -> matrix .)
    ISEQUAL         reduce using rule 107 (varcte -> matrix .)
    NOTEQUAL        reduce using rule 107 (varcte -> matrix .)
    AND             reduce using rule 107 (varcte -> matrix .)
    OR              reduce using rule 107 (varcte -> matrix .)
    SEMICOLON       reduce using rule 107 (varcte -> matrix .)
    COMA            reduce using rule 107 (varcte -> matrix .)
    LPAREN          reduce using rule 107 (varcte -> matrix .)
    RPAREN          reduce using rule 107 (varcte -> matrix .)
    LBRACKET        reduce using rule 107 (varcte -> matrix .)
    RBRACKET        reduce using rule 107 (varcte -> matrix .)


state 71

    (108) varcte -> arr .

    TIMES           reduce using rule 108 (varcte -> arr .)
    DIVIDE          reduce using rule 108 (varcte -> arr .)
    DIFF            reduce using rule 108 (varcte -> arr .)
    EXP             reduce using rule 108 (varcte -> arr .)
    PLUS            reduce using rule 108 (varcte -> arr .)
    MINUS           reduce using rule 108 (varcte -> arr .)
    LESSTHAN        reduce using rule 108 (varcte -> arr .)
    MORETHAN        reduce using rule 108 (varcte -> arr .)
    ISEQUAL         reduce using rule 108 (varcte -> arr .)
    NOTEQUAL        reduce using rule 108 (varcte -> arr .)
    AND             reduce using rule 108 (varcte -> arr .)
    OR              reduce using rule 108 (varcte -> arr .)
    SEMICOLON       reduce using rule 108 (varcte -> arr .)
    COMA            reduce using rule 108 (varcte -> arr .)
    LPAREN          reduce using rule 108 (varcte -> arr .)
    RPAREN          reduce using rule 108 (varcte -> arr .)
    LBRACKET        reduce using rule 108 (varcte -> arr .)
    RBRACKET        reduce using rule 108 (varcte -> arr .)


state 72

    (109) int -> INT .

    TIMES           reduce using rule 109 (int -> INT .)
    DIVIDE          reduce using rule 109 (int -> INT .)
    DIFF            reduce using rule 109 (int -> INT .)
    EXP             reduce using rule 109 (int -> INT .)
    PLUS            reduce using rule 109 (int -> INT .)
    MINUS           reduce using rule 109 (int -> INT .)
    LESSTHAN        reduce using rule 109 (int -> INT .)
    MORETHAN        reduce using rule 109 (int -> INT .)
    ISEQUAL         reduce using rule 109 (int -> INT .)
    NOTEQUAL        reduce using rule 109 (int -> INT .)
    AND             reduce using rule 109 (int -> INT .)
    OR              reduce using rule 109 (int -> INT .)
    SEMICOLON       reduce using rule 109 (int -> INT .)
    COMA            reduce using rule 109 (int -> INT .)
    LPAREN          reduce using rule 109 (int -> INT .)
    RPAREN          reduce using rule 109 (int -> INT .)
    LBRACKET        reduce using rule 109 (int -> INT .)
    RBRACKET        reduce using rule 109 (int -> INT .)


state 73

    (110) float -> FLOAT .

    TIMES           reduce using rule 110 (float -> FLOAT .)
    DIVIDE          reduce using rule 110 (float -> FLOAT .)
    DIFF            reduce using rule 110 (float -> FLOAT .)
    EXP             reduce using rule 110 (float -> FLOAT .)
    PLUS            reduce using rule 110 (float -> FLOAT .)
    MINUS           reduce using rule 110 (float -> FLOAT .)
    LESSTHAN        reduce using rule 110 (float -> FLOAT .)
    MORETHAN        reduce using rule 110 (float -> FLOAT .)
    ISEQUAL         reduce using rule 110 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 110 (float -> FLOAT .)
    AND             reduce using rule 110 (float -> FLOAT .)
    OR              reduce using rule 110 (float -> FLOAT .)
    SEMICOLON       reduce using rule 110 (float -> FLOAT .)
    COMA            reduce using rule 110 (float -> FLOAT .)
    LPAREN          reduce using rule 110 (float -> FLOAT .)
    RPAREN          reduce using rule 110 (float -> FLOAT .)
    LBRACKET        reduce using rule 110 (float -> FLOAT .)
    RBRACKET        reduce using rule 110 (float -> FLOAT .)


state 74

    (111) bool -> BOOL .

    TIMES           reduce using rule 111 (bool -> BOOL .)
    DIVIDE          reduce using rule 111 (bool -> BOOL .)
    DIFF            reduce using rule 111 (bool -> BOOL .)
    EXP             reduce using rule 111 (bool -> BOOL .)
    PLUS            reduce using rule 111 (bool -> BOOL .)
    MINUS           reduce using rule 111 (bool -> BOOL .)
    LESSTHAN        reduce using rule 111 (bool -> BOOL .)
    MORETHAN        reduce using rule 111 (bool -> BOOL .)
    ISEQUAL         reduce using rule 111 (bool -> BOOL .)
    NOTEQUAL        reduce using rule 111 (bool -> BOOL .)
    AND             reduce using rule 111 (bool -> BOOL .)
    OR              reduce using rule 111 (bool -> BOOL .)
    SEMICOLON       reduce using rule 111 (bool -> BOOL .)
    COMA            reduce using rule 111 (bool -> BOOL .)
    LPAREN          reduce using rule 111 (bool -> BOOL .)
    RPAREN          reduce using rule 111 (bool -> BOOL .)
    LBRACKET        reduce using rule 111 (bool -> BOOL .)
    RBRACKET        reduce using rule 111 (bool -> BOOL .)


state 75

    (112) string -> STRING .

    TIMES           reduce using rule 112 (string -> STRING .)
    DIVIDE          reduce using rule 112 (string -> STRING .)
    DIFF            reduce using rule 112 (string -> STRING .)
    EXP             reduce using rule 112 (string -> STRING .)
    PLUS            reduce using rule 112 (string -> STRING .)
    MINUS           reduce using rule 112 (string -> STRING .)
    LESSTHAN        reduce using rule 112 (string -> STRING .)
    MORETHAN        reduce using rule 112 (string -> STRING .)
    ISEQUAL         reduce using rule 112 (string -> STRING .)
    NOTEQUAL        reduce using rule 112 (string -> STRING .)
    AND             reduce using rule 112 (string -> STRING .)
    OR              reduce using rule 112 (string -> STRING .)
    SEMICOLON       reduce using rule 112 (string -> STRING .)
    COMA            reduce using rule 112 (string -> STRING .)
    LPAREN          reduce using rule 112 (string -> STRING .)
    RPAREN          reduce using rule 112 (string -> STRING .)
    LBRACKET        reduce using rule 112 (string -> STRING .)
    RBRACKET        reduce using rule 112 (string -> STRING .)


state 76

    (96) matrix -> bracket . expresion mbracket
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    bracket                        shift and go to state 76
    expresion                      shift and go to state 119
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    callArr                        shift and go to state 77

state 77

    (93) arr -> callArr . bracket expresion abracket matrix
    (94) arr -> callArr . bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET

    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    bracket                        shift and go to state 120

state 78

    (97) bracket -> LBRACKET .

    ID              reduce using rule 97 (bracket -> LBRACKET .)
    LPAREN          reduce using rule 97 (bracket -> LBRACKET .)
    RPAREN          reduce using rule 97 (bracket -> LBRACKET .)
    INT             reduce using rule 97 (bracket -> LBRACKET .)
    FLOAT           reduce using rule 97 (bracket -> LBRACKET .)
    BOOL            reduce using rule 97 (bracket -> LBRACKET .)
    STRING          reduce using rule 97 (bracket -> LBRACKET .)
    LBRACKET        reduce using rule 97 (bracket -> LBRACKET .)
    RBRACKET        reduce using rule 97 (bracket -> LBRACKET .)
    TIMES           reduce using rule 97 (bracket -> LBRACKET .)
    DIVIDE          reduce using rule 97 (bracket -> LBRACKET .)
    DIFF            reduce using rule 97 (bracket -> LBRACKET .)
    EXP             reduce using rule 97 (bracket -> LBRACKET .)
    PLUS            reduce using rule 97 (bracket -> LBRACKET .)
    MINUS           reduce using rule 97 (bracket -> LBRACKET .)
    LESSTHAN        reduce using rule 97 (bracket -> LBRACKET .)
    MORETHAN        reduce using rule 97 (bracket -> LBRACKET .)
    ISEQUAL         reduce using rule 97 (bracket -> LBRACKET .)
    NOTEQUAL        reduce using rule 97 (bracket -> LBRACKET .)
    AND             reduce using rule 97 (bracket -> LBRACKET .)
    OR              reduce using rule 97 (bracket -> LBRACKET .)
    SEMICOLON       reduce using rule 97 (bracket -> LBRACKET .)
    COMA            reduce using rule 97 (bracket -> LBRACKET .)


state 79

    (98) bracket -> RBRACKET .

    ID              reduce using rule 98 (bracket -> RBRACKET .)
    LPAREN          reduce using rule 98 (bracket -> RBRACKET .)
    RPAREN          reduce using rule 98 (bracket -> RBRACKET .)
    INT             reduce using rule 98 (bracket -> RBRACKET .)
    FLOAT           reduce using rule 98 (bracket -> RBRACKET .)
    BOOL            reduce using rule 98 (bracket -> RBRACKET .)
    STRING          reduce using rule 98 (bracket -> RBRACKET .)
    LBRACKET        reduce using rule 98 (bracket -> RBRACKET .)
    RBRACKET        reduce using rule 98 (bracket -> RBRACKET .)
    TIMES           reduce using rule 98 (bracket -> RBRACKET .)
    DIVIDE          reduce using rule 98 (bracket -> RBRACKET .)
    DIFF            reduce using rule 98 (bracket -> RBRACKET .)
    EXP             reduce using rule 98 (bracket -> RBRACKET .)
    PLUS            reduce using rule 98 (bracket -> RBRACKET .)
    MINUS           reduce using rule 98 (bracket -> RBRACKET .)
    LESSTHAN        reduce using rule 98 (bracket -> RBRACKET .)
    MORETHAN        reduce using rule 98 (bracket -> RBRACKET .)
    ISEQUAL         reduce using rule 98 (bracket -> RBRACKET .)
    NOTEQUAL        reduce using rule 98 (bracket -> RBRACKET .)
    AND             reduce using rule 98 (bracket -> RBRACKET .)
    OR              reduce using rule 98 (bracket -> RBRACKET .)
    SEMICOLON       reduce using rule 98 (bracket -> RBRACKET .)
    COMA            reduce using rule 98 (bracket -> RBRACKET .)


state 80

    (49) condicion -> IF LPAREN expresion . endCondition bloque condicionelse
    (50) endCondition -> . RPAREN
    (51) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 122
    SEMICOLON       shift and go to state 123

    endCondition                   shift and go to state 121

state 81

    (45) whileLoop -> WHILE startCondition expresion . endCondition bloque
    (50) endCondition -> . RPAREN
    (51) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 122
    SEMICOLON       shift and go to state 123

    endCondition                   shift and go to state 124

state 82

    (43) doWhile -> do bloque WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 125


state 83

    (48) forLoop -> FOR LPAREN argumentos . startCondition expresion endCondition asignacion RPAREN bloque
    (46) startCondition -> . LPAREN
    (47) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 43
    SEMICOLON       shift and go to state 44

    startCondition                 shift and go to state 126

state 84

    (72) args -> asignacion .

    COMA            reduce using rule 72 (args -> asignacion .)
    LPAREN          reduce using rule 72 (args -> asignacion .)
    SEMICOLON       reduce using rule 72 (args -> asignacion .)


state 85

    (70) argumentos -> args .
    (73) args -> args . COMA args

    LPAREN          reduce using rule 70 (argumentos -> args .)
    SEMICOLON       reduce using rule 70 (argumentos -> args .)
    COMA            shift and go to state 127


state 86

    (71) argumentos -> epsilon .

    LPAREN          reduce using rule 71 (argumentos -> epsilon .)
    SEMICOLON       reduce using rule 71 (argumentos -> epsilon .)


state 87

    (27) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 40


state 88

    (28) escritura -> PRINT LPAREN escrito . RPAREN

    RPAREN          shift and go to state 128


state 89

    (29) escrito -> impr .
    (30) escrito -> impr . COMA impr

    RPAREN          reduce using rule 29 (escrito -> impr .)
    COMA            shift and go to state 129


state 90

    (31) impr -> STRING .
    (112) string -> STRING .

  ! reduce/reduce conflict for COMA resolved using rule 31 (impr -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (impr -> STRING .)
    COMA            reduce using rule 31 (impr -> STRING .)
    RPAREN          reduce using rule 31 (impr -> STRING .)
    TIMES           reduce using rule 112 (string -> STRING .)
    DIVIDE          reduce using rule 112 (string -> STRING .)
    DIFF            reduce using rule 112 (string -> STRING .)
    EXP             reduce using rule 112 (string -> STRING .)
    PLUS            reduce using rule 112 (string -> STRING .)
    MINUS           reduce using rule 112 (string -> STRING .)
    LESSTHAN        reduce using rule 112 (string -> STRING .)
    MORETHAN        reduce using rule 112 (string -> STRING .)
    ISEQUAL         reduce using rule 112 (string -> STRING .)
    NOTEQUAL        reduce using rule 112 (string -> STRING .)
    AND             reduce using rule 112 (string -> STRING .)
    OR              reduce using rule 112 (string -> STRING .)

  ! COMA            [ reduce using rule 112 (string -> STRING .) ]
  ! RPAREN          [ reduce using rule 112 (string -> STRING .) ]


state 91

    (32) impr -> expresion .

    COMA            reduce using rule 32 (impr -> expresion .)
    RPAREN          reduce using rule 32 (impr -> expresion .)


state 92

    (55) funcion -> FUNCTION funcdef LPAREN . declaracion addArgs RPAREN COLON tiposreturn
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (89) epsilon -> .

    VAR             shift and go to state 10
    RPAREN          reduce using rule 89 (epsilon -> .)

    declaracion                    shift and go to state 130
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 93

    (64) functionCall -> funCall paren funcArgs . paren
    (67) funcArgs -> funcArgs . COMA funcArgs
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN

    COMA            shift and go to state 132
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52

    paren                          shift and go to state 131

state 94

    (66) funcArgs -> checkArgs .

    COMA            reduce using rule 66 (funcArgs -> checkArgs .)
    LPAREN          reduce using rule 66 (funcArgs -> checkArgs .)
    RPAREN          reduce using rule 66 (funcArgs -> checkArgs .)


state 95

    (68) funcArgs -> epsilon .

    COMA            reduce using rule 68 (funcArgs -> epsilon .)
    LPAREN          reduce using rule 68 (funcArgs -> epsilon .)
    RPAREN          reduce using rule 68 (funcArgs -> epsilon .)


state 96

    (69) checkArgs -> expresion .

    COMA            reduce using rule 69 (checkArgs -> expresion .)
    LPAREN          reduce using rule 69 (checkArgs -> expresion .)
    RPAREN          reduce using rule 69 (checkArgs -> expresion .)


state 97

    (6) var -> vardef COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 133


state 98

    (10) tipo -> INT .

    SEMICOLON       reduce using rule 10 (tipo -> INT .)


state 99

    (11) tipo -> FLOAT .

    SEMICOLON       reduce using rule 11 (tipo -> FLOAT .)


state 100

    (12) tipo -> BOOL .

    SEMICOLON       reduce using rule 12 (tipo -> BOOL .)


state 101

    (13) tipo -> STRING .

    SEMICOLON       reduce using rule 13 (tipo -> STRING .)


state 102

    (91) declaracionArr -> arrDef LBRACKET INT . RBRACKET COLON tipo
    (92) declaracionMatrix -> arrDef LBRACKET INT . RBRACKET LBRACKET INT RBRACKET COLON tipo

    RBRACKET        shift and go to state 134


state 103

    (36) condition -> exp comparacion . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    exp                            shift and go to state 59
    expresion                      shift and go to state 135
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 104

    (37) comparacion -> LESSTHAN .

    ID              reduce using rule 37 (comparacion -> LESSTHAN .)
    LPAREN          reduce using rule 37 (comparacion -> LESSTHAN .)
    RPAREN          reduce using rule 37 (comparacion -> LESSTHAN .)
    INT             reduce using rule 37 (comparacion -> LESSTHAN .)
    FLOAT           reduce using rule 37 (comparacion -> LESSTHAN .)
    BOOL            reduce using rule 37 (comparacion -> LESSTHAN .)
    STRING          reduce using rule 37 (comparacion -> LESSTHAN .)
    LBRACKET        reduce using rule 37 (comparacion -> LESSTHAN .)
    RBRACKET        reduce using rule 37 (comparacion -> LESSTHAN .)


state 105

    (38) comparacion -> MORETHAN .

    ID              reduce using rule 38 (comparacion -> MORETHAN .)
    LPAREN          reduce using rule 38 (comparacion -> MORETHAN .)
    RPAREN          reduce using rule 38 (comparacion -> MORETHAN .)
    INT             reduce using rule 38 (comparacion -> MORETHAN .)
    FLOAT           reduce using rule 38 (comparacion -> MORETHAN .)
    BOOL            reduce using rule 38 (comparacion -> MORETHAN .)
    STRING          reduce using rule 38 (comparacion -> MORETHAN .)
    LBRACKET        reduce using rule 38 (comparacion -> MORETHAN .)
    RBRACKET        reduce using rule 38 (comparacion -> MORETHAN .)


state 106

    (39) comparacion -> ISEQUAL .

    ID              reduce using rule 39 (comparacion -> ISEQUAL .)
    LPAREN          reduce using rule 39 (comparacion -> ISEQUAL .)
    RPAREN          reduce using rule 39 (comparacion -> ISEQUAL .)
    INT             reduce using rule 39 (comparacion -> ISEQUAL .)
    FLOAT           reduce using rule 39 (comparacion -> ISEQUAL .)
    BOOL            reduce using rule 39 (comparacion -> ISEQUAL .)
    STRING          reduce using rule 39 (comparacion -> ISEQUAL .)
    LBRACKET        reduce using rule 39 (comparacion -> ISEQUAL .)
    RBRACKET        reduce using rule 39 (comparacion -> ISEQUAL .)


state 107

    (40) comparacion -> NOTEQUAL .

    ID              reduce using rule 40 (comparacion -> NOTEQUAL .)
    LPAREN          reduce using rule 40 (comparacion -> NOTEQUAL .)
    RPAREN          reduce using rule 40 (comparacion -> NOTEQUAL .)
    INT             reduce using rule 40 (comparacion -> NOTEQUAL .)
    FLOAT           reduce using rule 40 (comparacion -> NOTEQUAL .)
    BOOL            reduce using rule 40 (comparacion -> NOTEQUAL .)
    STRING          reduce using rule 40 (comparacion -> NOTEQUAL .)
    LBRACKET        reduce using rule 40 (comparacion -> NOTEQUAL .)
    RBRACKET        reduce using rule 40 (comparacion -> NOTEQUAL .)


state 108

    (41) comparacion -> AND .

    ID              reduce using rule 41 (comparacion -> AND .)
    LPAREN          reduce using rule 41 (comparacion -> AND .)
    RPAREN          reduce using rule 41 (comparacion -> AND .)
    INT             reduce using rule 41 (comparacion -> AND .)
    FLOAT           reduce using rule 41 (comparacion -> AND .)
    BOOL            reduce using rule 41 (comparacion -> AND .)
    STRING          reduce using rule 41 (comparacion -> AND .)
    LBRACKET        reduce using rule 41 (comparacion -> AND .)
    RBRACKET        reduce using rule 41 (comparacion -> AND .)


state 109

    (42) comparacion -> OR .

    ID              reduce using rule 42 (comparacion -> OR .)
    LPAREN          reduce using rule 42 (comparacion -> OR .)
    RPAREN          reduce using rule 42 (comparacion -> OR .)
    INT             reduce using rule 42 (comparacion -> OR .)
    FLOAT           reduce using rule 42 (comparacion -> OR .)
    BOOL            reduce using rule 42 (comparacion -> OR .)
    STRING          reduce using rule 42 (comparacion -> OR .)
    LBRACKET        reduce using rule 42 (comparacion -> OR .)
    RBRACKET        reduce using rule 42 (comparacion -> OR .)


state 110

    (75) exp -> termino signo . exp
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (64) functionCall -> . funCall paren funcArgs paren
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (65) funCall -> . ID
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    ID              shift and go to state 138
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    termino                        shift and go to state 62
    exp                            shift and go to state 136
    factor                         shift and go to state 64
    paren                          shift and go to state 63
    varcte                         shift and go to state 65
    functionCall                   shift and go to state 137
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    funCall                        shift and go to state 28
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 111

    (76) signo -> PLUS .

    LPAREN          reduce using rule 76 (signo -> PLUS .)
    RPAREN          reduce using rule 76 (signo -> PLUS .)
    ID              reduce using rule 76 (signo -> PLUS .)
    INT             reduce using rule 76 (signo -> PLUS .)
    FLOAT           reduce using rule 76 (signo -> PLUS .)
    BOOL            reduce using rule 76 (signo -> PLUS .)
    STRING          reduce using rule 76 (signo -> PLUS .)
    LBRACKET        reduce using rule 76 (signo -> PLUS .)
    RBRACKET        reduce using rule 76 (signo -> PLUS .)


state 112

    (77) signo -> MINUS .

    LPAREN          reduce using rule 77 (signo -> MINUS .)
    RPAREN          reduce using rule 77 (signo -> MINUS .)
    ID              reduce using rule 77 (signo -> MINUS .)
    INT             reduce using rule 77 (signo -> MINUS .)
    FLOAT           reduce using rule 77 (signo -> MINUS .)
    BOOL            reduce using rule 77 (signo -> MINUS .)
    STRING          reduce using rule 77 (signo -> MINUS .)
    LBRACKET        reduce using rule 77 (signo -> MINUS .)
    RBRACKET        reduce using rule 77 (signo -> MINUS .)


state 113

    (84) factor -> paren expresion . paren
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN

    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52

    paren                          shift and go to state 139

state 114

    (79) termino -> factor operacion . termino
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (64) functionCall -> . funCall paren funcArgs paren
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (65) funCall -> . ID
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    ID              shift and go to state 138
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    factor                         shift and go to state 64
    termino                        shift and go to state 140
    paren                          shift and go to state 63
    varcte                         shift and go to state 65
    functionCall                   shift and go to state 137
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    funCall                        shift and go to state 28
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 115

    (80) operacion -> TIMES .

    LPAREN          reduce using rule 80 (operacion -> TIMES .)
    RPAREN          reduce using rule 80 (operacion -> TIMES .)
    ID              reduce using rule 80 (operacion -> TIMES .)
    INT             reduce using rule 80 (operacion -> TIMES .)
    FLOAT           reduce using rule 80 (operacion -> TIMES .)
    BOOL            reduce using rule 80 (operacion -> TIMES .)
    STRING          reduce using rule 80 (operacion -> TIMES .)
    LBRACKET        reduce using rule 80 (operacion -> TIMES .)
    RBRACKET        reduce using rule 80 (operacion -> TIMES .)


state 116

    (81) operacion -> DIVIDE .

    LPAREN          reduce using rule 81 (operacion -> DIVIDE .)
    RPAREN          reduce using rule 81 (operacion -> DIVIDE .)
    ID              reduce using rule 81 (operacion -> DIVIDE .)
    INT             reduce using rule 81 (operacion -> DIVIDE .)
    FLOAT           reduce using rule 81 (operacion -> DIVIDE .)
    BOOL            reduce using rule 81 (operacion -> DIVIDE .)
    STRING          reduce using rule 81 (operacion -> DIVIDE .)
    LBRACKET        reduce using rule 81 (operacion -> DIVIDE .)
    RBRACKET        reduce using rule 81 (operacion -> DIVIDE .)


state 117

    (82) operacion -> DIFF .

    LPAREN          reduce using rule 82 (operacion -> DIFF .)
    RPAREN          reduce using rule 82 (operacion -> DIFF .)
    ID              reduce using rule 82 (operacion -> DIFF .)
    INT             reduce using rule 82 (operacion -> DIFF .)
    FLOAT           reduce using rule 82 (operacion -> DIFF .)
    BOOL            reduce using rule 82 (operacion -> DIFF .)
    STRING          reduce using rule 82 (operacion -> DIFF .)
    LBRACKET        reduce using rule 82 (operacion -> DIFF .)
    RBRACKET        reduce using rule 82 (operacion -> DIFF .)


state 118

    (83) operacion -> EXP .

    LPAREN          reduce using rule 83 (operacion -> EXP .)
    RPAREN          reduce using rule 83 (operacion -> EXP .)
    ID              reduce using rule 83 (operacion -> EXP .)
    INT             reduce using rule 83 (operacion -> EXP .)
    FLOAT           reduce using rule 83 (operacion -> EXP .)
    BOOL            reduce using rule 83 (operacion -> EXP .)
    STRING          reduce using rule 83 (operacion -> EXP .)
    LBRACKET        reduce using rule 83 (operacion -> EXP .)
    RBRACKET        reduce using rule 83 (operacion -> EXP .)


state 119

    (96) matrix -> bracket expresion . mbracket
    (100) mbracket -> . bracket
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET

    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    bracket                        shift and go to state 141
    mbracket                       shift and go to state 142

state 120

    (93) arr -> callArr bracket . expresion abracket matrix
    (94) arr -> callArr bracket . expresion abracket epsilon
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    callArr                        shift and go to state 77
    bracket                        shift and go to state 76
    expresion                      shift and go to state 143
    matrix                         shift and go to state 70
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    arr                            shift and go to state 71

state 121

    (49) condicion -> IF LPAREN expresion endCondition . bloque condicionelse
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 144

state 122

    (50) endCondition -> RPAREN .

    LCURLY          reduce using rule 50 (endCondition -> RPAREN .)
    ID              reduce using rule 50 (endCondition -> RPAREN .)


state 123

    (51) endCondition -> SEMICOLON .

    LCURLY          reduce using rule 51 (endCondition -> SEMICOLON .)
    ID              reduce using rule 51 (endCondition -> SEMICOLON .)


state 124

    (45) whileLoop -> WHILE startCondition expresion endCondition . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 145

state 125

    (43) doWhile -> do bloque WHILE LPAREN . expresion RPAREN
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    expresion                      shift and go to state 146
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 126

    (48) forLoop -> FOR LPAREN argumentos startCondition . expresion endCondition asignacion RPAREN bloque
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    expresion                      shift and go to state 147
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 127

    (73) args -> args COMA . args
    (72) args -> . asignacion
    (73) args -> . args COMA args
    (27) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 87

    args                           shift and go to state 148
    asignacion                     shift and go to state 84

state 128

    (28) escritura -> PRINT LPAREN escrito RPAREN .

    SEMICOLON       reduce using rule 28 (escritura -> PRINT LPAREN escrito RPAREN .)


state 129

    (30) escrito -> impr COMA . impr
    (31) impr -> . STRING
    (32) impr -> . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    STRING          shift and go to state 90
    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    impr                           shift and go to state 149
    expresion                      shift and go to state 91
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 130

    (55) funcion -> FUNCTION funcdef LPAREN declaracion . addArgs RPAREN COLON tiposreturn
    (56) addArgs -> . epsilon
    (89) epsilon -> .

    RPAREN          reduce using rule 89 (epsilon -> .)

    addArgs                        shift and go to state 150
    epsilon                        shift and go to state 151

state 131

    (64) functionCall -> funCall paren funcArgs paren .

    SEMICOLON       reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    COMA            reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    LPAREN          reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    RPAREN          reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    TIMES           reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    DIVIDE          reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    DIFF            reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    EXP             reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    PLUS            reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    MINUS           reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    LESSTHAN        reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    MORETHAN        reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    ISEQUAL         reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    NOTEQUAL        reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    AND             reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    OR              reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    LBRACKET        reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)
    RBRACKET        reduce using rule 64 (functionCall -> funCall paren funcArgs paren .)


state 132

    (67) funcArgs -> funcArgs COMA . funcArgs
    (66) funcArgs -> . checkArgs
    (67) funcArgs -> . funcArgs COMA funcArgs
    (68) funcArgs -> . epsilon
    (69) checkArgs -> . expresion
    (89) epsilon -> .
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
    COMA            reduce using rule 89 (epsilon -> .)
    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

  ! LPAREN          [ reduce using rule 89 (epsilon -> .) ]
  ! RPAREN          [ reduce using rule 89 (epsilon -> .) ]

    funcArgs                       shift and go to state 152
    checkArgs                      shift and go to state 94
    epsilon                        shift and go to state 95
    expresion                      shift and go to state 96
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 133

    (6) var -> vardef COLON tipo SEMICOLON .

    VAR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    ID              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    IF              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    WHILE           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FOR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    PRINT           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    DO              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)


state 134

    (91) declaracionArr -> arrDef LBRACKET INT RBRACKET . COLON tipo
    (92) declaracionMatrix -> arrDef LBRACKET INT RBRACKET . LBRACKET INT RBRACKET COLON tipo

    COLON           shift and go to state 154
    LBRACKET        shift and go to state 153


state 135

    (36) condition -> exp comparacion expresion .

    SEMICOLON       reduce using rule 36 (condition -> exp comparacion expresion .)
    COMA            reduce using rule 36 (condition -> exp comparacion expresion .)
    LPAREN          reduce using rule 36 (condition -> exp comparacion expresion .)
    RPAREN          reduce using rule 36 (condition -> exp comparacion expresion .)
    LBRACKET        reduce using rule 36 (condition -> exp comparacion expresion .)
    RBRACKET        reduce using rule 36 (condition -> exp comparacion expresion .)


state 136

    (75) exp -> termino signo exp .

    LESSTHAN        reduce using rule 75 (exp -> termino signo exp .)
    MORETHAN        reduce using rule 75 (exp -> termino signo exp .)
    ISEQUAL         reduce using rule 75 (exp -> termino signo exp .)
    NOTEQUAL        reduce using rule 75 (exp -> termino signo exp .)
    AND             reduce using rule 75 (exp -> termino signo exp .)
    OR              reduce using rule 75 (exp -> termino signo exp .)
    SEMICOLON       reduce using rule 75 (exp -> termino signo exp .)
    COMA            reduce using rule 75 (exp -> termino signo exp .)
    LPAREN          reduce using rule 75 (exp -> termino signo exp .)
    RPAREN          reduce using rule 75 (exp -> termino signo exp .)
    LBRACKET        reduce using rule 75 (exp -> termino signo exp .)
    RBRACKET        reduce using rule 75 (exp -> termino signo exp .)


state 137

    (86) factor -> functionCall .

    TIMES           reduce using rule 86 (factor -> functionCall .)
    DIVIDE          reduce using rule 86 (factor -> functionCall .)
    DIFF            reduce using rule 86 (factor -> functionCall .)
    EXP             reduce using rule 86 (factor -> functionCall .)
    PLUS            reduce using rule 86 (factor -> functionCall .)
    MINUS           reduce using rule 86 (factor -> functionCall .)
    LESSTHAN        reduce using rule 86 (factor -> functionCall .)
    MORETHAN        reduce using rule 86 (factor -> functionCall .)
    ISEQUAL         reduce using rule 86 (factor -> functionCall .)
    NOTEQUAL        reduce using rule 86 (factor -> functionCall .)
    AND             reduce using rule 86 (factor -> functionCall .)
    OR              reduce using rule 86 (factor -> functionCall .)
    SEMICOLON       reduce using rule 86 (factor -> functionCall .)
    COMA            reduce using rule 86 (factor -> functionCall .)
    LPAREN          reduce using rule 86 (factor -> functionCall .)
    RPAREN          reduce using rule 86 (factor -> functionCall .)
    LBRACKET        reduce using rule 86 (factor -> functionCall .)
    RBRACKET        reduce using rule 86 (factor -> functionCall .)


state 138

    (102) varcte -> ID .
    (65) funCall -> ID .
    (95) callArr -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 65 (funCall -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 65 (funCall -> ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 95 (callArr -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 95 (callArr -> ID .)
    TIMES           reduce using rule 102 (varcte -> ID .)
    DIVIDE          reduce using rule 102 (varcte -> ID .)
    DIFF            reduce using rule 102 (varcte -> ID .)
    EXP             reduce using rule 102 (varcte -> ID .)
    PLUS            reduce using rule 102 (varcte -> ID .)
    MINUS           reduce using rule 102 (varcte -> ID .)
    LESSTHAN        reduce using rule 102 (varcte -> ID .)
    MORETHAN        reduce using rule 102 (varcte -> ID .)
    ISEQUAL         reduce using rule 102 (varcte -> ID .)
    NOTEQUAL        reduce using rule 102 (varcte -> ID .)
    AND             reduce using rule 102 (varcte -> ID .)
    OR              reduce using rule 102 (varcte -> ID .)
    SEMICOLON       reduce using rule 102 (varcte -> ID .)
    COMA            reduce using rule 102 (varcte -> ID .)
    LPAREN          reduce using rule 65 (funCall -> ID .)
    RPAREN          reduce using rule 65 (funCall -> ID .)
    LBRACKET        reduce using rule 95 (callArr -> ID .)
    RBRACKET        reduce using rule 95 (callArr -> ID .)

  ! LPAREN          [ reduce using rule 102 (varcte -> ID .) ]
  ! RPAREN          [ reduce using rule 102 (varcte -> ID .) ]
  ! LBRACKET        [ reduce using rule 102 (varcte -> ID .) ]
  ! RBRACKET        [ reduce using rule 102 (varcte -> ID .) ]


state 139

    (84) factor -> paren expresion paren .

    TIMES           reduce using rule 84 (factor -> paren expresion paren .)
    DIVIDE          reduce using rule 84 (factor -> paren expresion paren .)
    DIFF            reduce using rule 84 (factor -> paren expresion paren .)
    EXP             reduce using rule 84 (factor -> paren expresion paren .)
    PLUS            reduce using rule 84 (factor -> paren expresion paren .)
    MINUS           reduce using rule 84 (factor -> paren expresion paren .)
    LESSTHAN        reduce using rule 84 (factor -> paren expresion paren .)
    MORETHAN        reduce using rule 84 (factor -> paren expresion paren .)
    ISEQUAL         reduce using rule 84 (factor -> paren expresion paren .)
    NOTEQUAL        reduce using rule 84 (factor -> paren expresion paren .)
    AND             reduce using rule 84 (factor -> paren expresion paren .)
    OR              reduce using rule 84 (factor -> paren expresion paren .)
    SEMICOLON       reduce using rule 84 (factor -> paren expresion paren .)
    COMA            reduce using rule 84 (factor -> paren expresion paren .)
    LPAREN          reduce using rule 84 (factor -> paren expresion paren .)
    RPAREN          reduce using rule 84 (factor -> paren expresion paren .)
    LBRACKET        reduce using rule 84 (factor -> paren expresion paren .)
    RBRACKET        reduce using rule 84 (factor -> paren expresion paren .)


state 140

    (79) termino -> factor operacion termino .

    PLUS            reduce using rule 79 (termino -> factor operacion termino .)
    MINUS           reduce using rule 79 (termino -> factor operacion termino .)
    LESSTHAN        reduce using rule 79 (termino -> factor operacion termino .)
    MORETHAN        reduce using rule 79 (termino -> factor operacion termino .)
    ISEQUAL         reduce using rule 79 (termino -> factor operacion termino .)
    NOTEQUAL        reduce using rule 79 (termino -> factor operacion termino .)
    AND             reduce using rule 79 (termino -> factor operacion termino .)
    OR              reduce using rule 79 (termino -> factor operacion termino .)
    SEMICOLON       reduce using rule 79 (termino -> factor operacion termino .)
    COMA            reduce using rule 79 (termino -> factor operacion termino .)
    LPAREN          reduce using rule 79 (termino -> factor operacion termino .)
    RPAREN          reduce using rule 79 (termino -> factor operacion termino .)
    LBRACKET        reduce using rule 79 (termino -> factor operacion termino .)
    RBRACKET        reduce using rule 79 (termino -> factor operacion termino .)


state 141

    (100) mbracket -> bracket .

    TIMES           reduce using rule 100 (mbracket -> bracket .)
    DIVIDE          reduce using rule 100 (mbracket -> bracket .)
    DIFF            reduce using rule 100 (mbracket -> bracket .)
    EXP             reduce using rule 100 (mbracket -> bracket .)
    PLUS            reduce using rule 100 (mbracket -> bracket .)
    MINUS           reduce using rule 100 (mbracket -> bracket .)
    LESSTHAN        reduce using rule 100 (mbracket -> bracket .)
    MORETHAN        reduce using rule 100 (mbracket -> bracket .)
    ISEQUAL         reduce using rule 100 (mbracket -> bracket .)
    NOTEQUAL        reduce using rule 100 (mbracket -> bracket .)
    AND             reduce using rule 100 (mbracket -> bracket .)
    OR              reduce using rule 100 (mbracket -> bracket .)
    SEMICOLON       reduce using rule 100 (mbracket -> bracket .)
    COMA            reduce using rule 100 (mbracket -> bracket .)
    LPAREN          reduce using rule 100 (mbracket -> bracket .)
    RPAREN          reduce using rule 100 (mbracket -> bracket .)
    LBRACKET        reduce using rule 100 (mbracket -> bracket .)
    RBRACKET        reduce using rule 100 (mbracket -> bracket .)


state 142

    (96) matrix -> bracket expresion mbracket .

    TIMES           reduce using rule 96 (matrix -> bracket expresion mbracket .)
    DIVIDE          reduce using rule 96 (matrix -> bracket expresion mbracket .)
    DIFF            reduce using rule 96 (matrix -> bracket expresion mbracket .)
    EXP             reduce using rule 96 (matrix -> bracket expresion mbracket .)
    PLUS            reduce using rule 96 (matrix -> bracket expresion mbracket .)
    MINUS           reduce using rule 96 (matrix -> bracket expresion mbracket .)
    LESSTHAN        reduce using rule 96 (matrix -> bracket expresion mbracket .)
    MORETHAN        reduce using rule 96 (matrix -> bracket expresion mbracket .)
    ISEQUAL         reduce using rule 96 (matrix -> bracket expresion mbracket .)
    NOTEQUAL        reduce using rule 96 (matrix -> bracket expresion mbracket .)
    AND             reduce using rule 96 (matrix -> bracket expresion mbracket .)
    OR              reduce using rule 96 (matrix -> bracket expresion mbracket .)
    SEMICOLON       reduce using rule 96 (matrix -> bracket expresion mbracket .)
    COMA            reduce using rule 96 (matrix -> bracket expresion mbracket .)
    LPAREN          reduce using rule 96 (matrix -> bracket expresion mbracket .)
    RPAREN          reduce using rule 96 (matrix -> bracket expresion mbracket .)
    LBRACKET        reduce using rule 96 (matrix -> bracket expresion mbracket .)
    RBRACKET        reduce using rule 96 (matrix -> bracket expresion mbracket .)


state 143

    (93) arr -> callArr bracket expresion . abracket matrix
    (94) arr -> callArr bracket expresion . abracket epsilon
    (99) abracket -> . bracket
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET

    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    bracket                        shift and go to state 155
    abracket                       shift and go to state 156

state 144

    (49) condicion -> IF LPAREN expresion endCondition bloque . condicionelse
    (52) condicionelse -> . else bloque
    (53) condicionelse -> . epsilon
    (54) else -> . ELSE
    (89) epsilon -> .

    ELSE            shift and go to state 160
    SEMICOLON       reduce using rule 89 (epsilon -> .)

    condicionelse                  shift and go to state 157
    else                           shift and go to state 158
    epsilon                        shift and go to state 159

state 145

    (45) whileLoop -> WHILE startCondition expresion endCondition bloque .

    SEMICOLON       reduce using rule 45 (whileLoop -> WHILE startCondition expresion endCondition bloque .)


state 146

    (43) doWhile -> do bloque WHILE LPAREN expresion . RPAREN

    RPAREN          shift and go to state 161


state 147

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion . endCondition asignacion RPAREN bloque
    (50) endCondition -> . RPAREN
    (51) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 122
    SEMICOLON       shift and go to state 123

    endCondition                   shift and go to state 162

state 148

    (73) args -> args COMA args .
    (73) args -> args . COMA args

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 73 (args -> args COMA args .)
    SEMICOLON       reduce using rule 73 (args -> args COMA args .)
    COMA            shift and go to state 127

  ! COMA            [ reduce using rule 73 (args -> args COMA args .) ]


state 149

    (30) escrito -> impr COMA impr .

    RPAREN          reduce using rule 30 (escrito -> impr COMA impr .)


state 150

    (55) funcion -> FUNCTION funcdef LPAREN declaracion addArgs . RPAREN COLON tiposreturn

    RPAREN          shift and go to state 163


state 151

    (56) addArgs -> epsilon .

    RPAREN          reduce using rule 56 (addArgs -> epsilon .)


state 152

    (67) funcArgs -> funcArgs COMA funcArgs .
    (67) funcArgs -> funcArgs . COMA funcArgs

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 67 (funcArgs -> funcArgs COMA funcArgs .)
    RPAREN          reduce using rule 67 (funcArgs -> funcArgs COMA funcArgs .)
    COMA            shift and go to state 132

  ! COMA            [ reduce using rule 67 (funcArgs -> funcArgs COMA funcArgs .) ]


state 153

    (92) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET . INT RBRACKET COLON tipo

    INT             shift and go to state 164


state 154

    (91) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 98
    FLOAT           shift and go to state 99
    BOOL            shift and go to state 100
    STRING          shift and go to state 101

    tipo                           shift and go to state 165

state 155

    (99) abracket -> bracket .

    LBRACKET        reduce using rule 99 (abracket -> bracket .)
    RBRACKET        reduce using rule 99 (abracket -> bracket .)
    TIMES           reduce using rule 99 (abracket -> bracket .)
    DIVIDE          reduce using rule 99 (abracket -> bracket .)
    DIFF            reduce using rule 99 (abracket -> bracket .)
    EXP             reduce using rule 99 (abracket -> bracket .)
    PLUS            reduce using rule 99 (abracket -> bracket .)
    MINUS           reduce using rule 99 (abracket -> bracket .)
    LESSTHAN        reduce using rule 99 (abracket -> bracket .)
    MORETHAN        reduce using rule 99 (abracket -> bracket .)
    ISEQUAL         reduce using rule 99 (abracket -> bracket .)
    NOTEQUAL        reduce using rule 99 (abracket -> bracket .)
    AND             reduce using rule 99 (abracket -> bracket .)
    OR              reduce using rule 99 (abracket -> bracket .)
    SEMICOLON       reduce using rule 99 (abracket -> bracket .)
    COMA            reduce using rule 99 (abracket -> bracket .)
    LPAREN          reduce using rule 99 (abracket -> bracket .)
    RPAREN          reduce using rule 99 (abracket -> bracket .)


state 156

    (93) arr -> callArr bracket expresion abracket . matrix
    (94) arr -> callArr bracket expresion abracket . epsilon
    (96) matrix -> . bracket expresion mbracket
    (89) epsilon -> .
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for RBRACKET resolved as shift
    TIMES           reduce using rule 89 (epsilon -> .)
    DIVIDE          reduce using rule 89 (epsilon -> .)
    DIFF            reduce using rule 89 (epsilon -> .)
    EXP             reduce using rule 89 (epsilon -> .)
    PLUS            reduce using rule 89 (epsilon -> .)
    MINUS           reduce using rule 89 (epsilon -> .)
    LESSTHAN        reduce using rule 89 (epsilon -> .)
    MORETHAN        reduce using rule 89 (epsilon -> .)
    ISEQUAL         reduce using rule 89 (epsilon -> .)
    NOTEQUAL        reduce using rule 89 (epsilon -> .)
    AND             reduce using rule 89 (epsilon -> .)
    OR              reduce using rule 89 (epsilon -> .)
    SEMICOLON       reduce using rule 89 (epsilon -> .)
    COMA            reduce using rule 89 (epsilon -> .)
    LPAREN          reduce using rule 89 (epsilon -> .)
    RPAREN          reduce using rule 89 (epsilon -> .)
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

  ! LBRACKET        [ reduce using rule 89 (epsilon -> .) ]
  ! RBRACKET        [ reduce using rule 89 (epsilon -> .) ]

    bracket                        shift and go to state 76
    matrix                         shift and go to state 166
    epsilon                        shift and go to state 167

state 157

    (49) condicion -> IF LPAREN expresion endCondition bloque condicionelse .

    SEMICOLON       reduce using rule 49 (condicion -> IF LPAREN expresion endCondition bloque condicionelse .)


state 158

    (52) condicionelse -> else . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 168

state 159

    (53) condicionelse -> epsilon .

    SEMICOLON       reduce using rule 53 (condicionelse -> epsilon .)


state 160

    (54) else -> ELSE .

    LCURLY          reduce using rule 54 (else -> ELSE .)


state 161

    (43) doWhile -> do bloque WHILE LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 43 (doWhile -> do bloque WHILE LPAREN expresion RPAREN .)


state 162

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition . asignacion RPAREN bloque
    (27) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 87

    asignacion                     shift and go to state 169

state 163

    (55) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN . COLON tiposreturn

    COLON           shift and go to state 170


state 164

    (92) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT . RBRACKET COLON tipo

    RBRACKET        shift and go to state 171


state 165

    (91) declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 91 (declaracionArr -> arrDef LBRACKET INT RBRACKET COLON tipo .)


state 166

    (93) arr -> callArr bracket expresion abracket matrix .

    TIMES           reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    DIVIDE          reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    DIFF            reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    EXP             reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    PLUS            reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    MINUS           reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    LESSTHAN        reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    MORETHAN        reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    ISEQUAL         reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    NOTEQUAL        reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    AND             reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    OR              reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    SEMICOLON       reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    COMA            reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    LPAREN          reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    RPAREN          reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    LBRACKET        reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)
    RBRACKET        reduce using rule 93 (arr -> callArr bracket expresion abracket matrix .)


state 167

    (94) arr -> callArr bracket expresion abracket epsilon .

    TIMES           reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    DIVIDE          reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    DIFF            reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    EXP             reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    PLUS            reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    MINUS           reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    LESSTHAN        reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    MORETHAN        reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    ISEQUAL         reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    NOTEQUAL        reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    AND             reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    OR              reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    SEMICOLON       reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    COMA            reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    LPAREN          reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    RPAREN          reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    LBRACKET        reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)
    RBRACKET        reduce using rule 94 (arr -> callArr bracket expresion abracket epsilon .)


state 168

    (52) condicionelse -> else bloque .

    SEMICOLON       reduce using rule 52 (condicionelse -> else bloque .)


state 169

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion . RPAREN bloque

    RPAREN          shift and go to state 172


state 170

    (55) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON . tiposreturn
    (58) tiposreturn -> . tiposFuncion bloqueReturn
    (59) tiposreturn -> . VOID bloque
    (60) tiposFuncion -> . INT
    (61) tiposFuncion -> . FLOAT
    (62) tiposFuncion -> . BOOL
    (63) tiposFuncion -> . STRING

    VOID            shift and go to state 175
    INT             shift and go to state 176
    FLOAT           shift and go to state 177
    BOOL            shift and go to state 178
    STRING          shift and go to state 179

    tiposreturn                    shift and go to state 173
    tiposFuncion                   shift and go to state 174

state 171

    (92) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET . COLON tipo

    COLON           shift and go to state 180


state 172

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 181

state 173

    (55) funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .

    SEMICOLON       reduce using rule 55 (funcion -> FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn .)


state 174

    (58) tiposreturn -> tiposFuncion . bloqueReturn
    (15) bloqueReturn -> . LCURLY declaracion estatutoExp returnexp RCURLY

    LCURLY          shift and go to state 183

    bloqueReturn                   shift and go to state 182

state 175

    (59) tiposreturn -> VOID . bloque
    (14) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 184

state 176

    (60) tiposFuncion -> INT .

    LCURLY          reduce using rule 60 (tiposFuncion -> INT .)


state 177

    (61) tiposFuncion -> FLOAT .

    LCURLY          reduce using rule 61 (tiposFuncion -> FLOAT .)


state 178

    (62) tiposFuncion -> BOOL .

    LCURLY          reduce using rule 62 (tiposFuncion -> BOOL .)


state 179

    (63) tiposFuncion -> STRING .

    LCURLY          reduce using rule 63 (tiposFuncion -> STRING .)


state 180

    (92) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . BOOL
    (13) tipo -> . STRING

    INT             shift and go to state 98
    FLOAT           shift and go to state 99
    BOOL            shift and go to state 100
    STRING          shift and go to state 101

    tipo                           shift and go to state 185

state 181

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .

    SEMICOLON       reduce using rule 48 (forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .)


state 182

    (58) tiposreturn -> tiposFuncion bloqueReturn .

    SEMICOLON       reduce using rule 58 (tiposreturn -> tiposFuncion bloqueReturn .)


state 183

    (15) bloqueReturn -> LCURLY . declaracion estatutoExp returnexp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (89) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 89 (epsilon -> .)
    IF              reduce using rule 89 (epsilon -> .)
    WHILE           reduce using rule 89 (epsilon -> .)
    FOR             reduce using rule 89 (epsilon -> .)
    PRINT           reduce using rule 89 (epsilon -> .)
    FUNCTION        reduce using rule 89 (epsilon -> .)
    DO              reduce using rule 89 (epsilon -> .)

    declaracion                    shift and go to state 186
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 184

    (59) tiposreturn -> VOID bloque .

    SEMICOLON       reduce using rule 59 (tiposreturn -> VOID bloque .)


state 185

    (92) declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .

    SEMICOLON       reduce using rule 92 (declaracionMatrix -> arrDef LBRACKET INT RBRACKET LBRACKET INT RBRACKET COLON tipo .)


state 186

    (15) bloqueReturn -> LCURLY declaracion . estatutoExp returnexp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (64) functionCall -> . funCall paren funcArgs paren
    (44) do -> . DO
    (65) funCall -> . ID

    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 187
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 187

    (15) bloqueReturn -> LCURLY declaracion estatutoExp . returnexp RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (26) returnexp -> . RETURN expresion SEMICOLON
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . functionCall
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion addArgs RPAREN COLON tiposreturn
    (64) functionCall -> . funCall paren funcArgs paren
    (44) do -> . DO
    (65) funCall -> . ID

    RETURN          shift and go to state 189
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 37
    returnexp                      shift and go to state 188
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    functionCall                   shift and go to state 20
    do                             shift and go to state 24
    funCall                        shift and go to state 28

state 188

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp . RCURLY

    RCURLY          shift and go to state 190


state 189

    (26) returnexp -> RETURN . expresion SEMICOLON
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . functionCall
    (74) exp -> . termino
    (75) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (64) functionCall -> . funCall paren funcArgs paren
    (78) termino -> . factor
    (79) termino -> . factor operacion termino
    (65) funCall -> . ID
    (84) factor -> . paren expresion paren
    (85) factor -> . varcte
    (86) factor -> . functionCall
    (87) paren -> . LPAREN
    (88) paren -> . RPAREN
    (102) varcte -> . ID
    (103) varcte -> . int
    (104) varcte -> . float
    (105) varcte -> . bool
    (106) varcte -> . string
    (107) varcte -> . matrix
    (108) varcte -> . arr
    (109) int -> . INT
    (110) float -> . FLOAT
    (111) bool -> . BOOL
    (112) string -> . STRING
    (96) matrix -> . bracket expresion mbracket
    (93) arr -> . callArr bracket expresion abracket matrix
    (94) arr -> . callArr bracket expresion abracket epsilon
    (97) bracket -> . LBRACKET
    (98) bracket -> . RBRACKET
    (95) callArr -> . ID

    ID              shift and go to state 57
    LPAREN          shift and go to state 51
    RPAREN          shift and go to state 52
    INT             shift and go to state 72
    FLOAT           shift and go to state 73
    BOOL            shift and go to state 74
    STRING          shift and go to state 75
    LBRACKET        shift and go to state 78
    RBRACKET        shift and go to state 79

    expresion                      shift and go to state 191
    exp                            shift and go to state 59
    condition                      shift and go to state 60
    functionCall                   shift and go to state 61
    termino                        shift and go to state 62
    funCall                        shift and go to state 28
    paren                          shift and go to state 63
    factor                         shift and go to state 64
    varcte                         shift and go to state 65
    int                            shift and go to state 66
    float                          shift and go to state 67
    bool                           shift and go to state 68
    string                         shift and go to state 69
    matrix                         shift and go to state 70
    arr                            shift and go to state 71
    bracket                        shift and go to state 76
    callArr                        shift and go to state 77

state 190

    (15) bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .

    SEMICOLON       reduce using rule 15 (bloqueReturn -> LCURLY declaracion estatutoExp returnexp RCURLY .)


state 191

    (26) returnexp -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 192


state 192

    (26) returnexp -> RETURN expresion SEMICOLON .

    RCURLY          reduce using rule 26 (returnexp -> RETURN expresion SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 37 resolved as shift
WARNING: shift/reduce conflict for IF in state 37 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 37 resolved as shift
WARNING: shift/reduce conflict for FOR in state 37 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 37 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 37 resolved as shift
WARNING: shift/reduce conflict for DO in state 37 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for COMA in state 148 resolved as shift
WARNING: shift/reduce conflict for COMA in state 152 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 156 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 156 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (callArr -> ID)
WARNING: rejected rule (varcte -> ID) in state 57
WARNING: reduce/reduce conflict in state 61 resolved using rule (expresion -> functionCall)
WARNING: rejected rule (factor -> functionCall) in state 61
WARNING: reduce/reduce conflict in state 90 resolved using rule (impr -> STRING)
WARNING: rejected rule (string -> STRING) in state 90
WARNING: reduce/reduce conflict in state 138 resolved using rule (funCall -> ID)
WARNING: rejected rule (varcte -> ID) in state 138
WARNING: reduce/reduce conflict in state 138 resolved using rule (callArr -> ID)
WARNING: rejected rule (varcte -> ID) in state 138
