Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTEF
    CTEL

Grammar

Rule 0     S' -> programa
Rule 1     programa -> START LPAREN RPAREN bloque
Rule 2     declaracion -> vars
Rule 3     declaracion -> epsilon
Rule 4     vars -> VAR var
Rule 5     vars -> vars vars
Rule 6     var -> vardef COLON tipo SEMICOLON
Rule 7     vardef -> ID
Rule 8     tipo -> INT
Rule 9     tipo -> FLOAT
Rule 10    tipo -> BOOL
Rule 11    tipo -> STRING
Rule 12    lista -> ID
Rule 13    lista -> ID COMA
Rule 14    arreglo -> LBRACKET lista RBRACKET
Rule 15    bloque -> LCURLY declaracion estatutoExp RCURLY
Rule 16    estatutoExp -> estatuto SEMICOLON
Rule 17    estatutoExp -> estatutoExp estatutoExp
Rule 18    estatuto -> asignacion
Rule 19    estatuto -> condicion
Rule 20    estatuto -> whileLoop
Rule 21    estatuto -> doWhile
Rule 22    estatuto -> forLoop
Rule 23    estatuto -> escritura
Rule 24    estatuto -> funcion
Rule 25    estatuto -> returnexp
Rule 26    returnexp -> RETURN expresion
Rule 27    asignacion -> ID EQUAL expresion
Rule 28    escritura -> PRINT LPAREN escrito RPAREN
Rule 29    escrito -> impr
Rule 30    escrito -> impr COMA impr
Rule 31    impr -> STRING
Rule 32    impr -> expresion
Rule 33    expresion -> exp
Rule 34    expresion -> condition
Rule 35    expresion -> arreglo
Rule 36    condition -> exp comparacion expresion
Rule 37    comparacion -> LESSTHAN
Rule 38    comparacion -> MORETHAN
Rule 39    comparacion -> ISEQUAL
Rule 40    comparacion -> NOTEQUAL
Rule 41    comparacion -> AND
Rule 42    comparacion -> OR
Rule 43    doWhile -> do bloque WHILE LPAREN expresion RPAREN
Rule 44    do -> DO
Rule 45    whileLoop -> WHILE startCondition expresion endCondition bloque
Rule 46    startCondition -> LPAREN
Rule 47    startCondition -> SEMICOLON
Rule 48    forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
Rule 49    condicion -> IF LPAREN expresion endCondition bloque condicionelse
Rule 50    endCondition -> RPAREN
Rule 51    endCondition -> SEMICOLON
Rule 52    condicionelse -> else bloque
Rule 53    condicionelse -> epsilon
Rule 54    else -> ELSE
Rule 55    funcion -> FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque
Rule 56    funcdef -> ID
Rule 57    tiposreturn -> tipo
Rule 58    tiposreturn -> VOID
Rule 59    argumentos -> args
Rule 60    argumentos -> epsilon
Rule 61    args -> asignacion
Rule 62    args -> args COMA args
Rule 63    exp -> termino
Rule 64    exp -> termino signo exp
Rule 65    signo -> PLUS
Rule 66    signo -> MINUS
Rule 67    termino -> factor
Rule 68    termino -> factor operacion termino
Rule 69    operacion -> TIMES
Rule 70    operacion -> DIVIDE
Rule 71    operacion -> DIFF
Rule 72    operacion -> EXP
Rule 73    factor -> paren expresion paren
Rule 74    factor -> varcte
Rule 75    paren -> LPAREN
Rule 76    paren -> RPAREN
Rule 77    epsilon -> <empty>
Rule 78    varcte -> ID
Rule 79    varcte -> int
Rule 80    varcte -> float
Rule 81    varcte -> bool
Rule 82    varcte -> string
Rule 83    int -> INT
Rule 84    float -> FLOAT
Rule 85    bool -> BOOL
Rule 86    string -> STRING

Terminals, with rules where they appear

AND                  : 41
BOOL                 : 10 85
COLON                : 6 55
COMA                 : 13 30 62
CTEF                 : 
CTEL                 : 
DIFF                 : 71
DIVIDE               : 70
DO                   : 44
ELSE                 : 54
EQUAL                : 27
EXP                  : 72
FLOAT                : 9 84
FOR                  : 48
FUNCTION             : 55
ID                   : 7 12 13 27 56 78
IF                   : 49
INT                  : 8 83
ISEQUAL              : 39
LBRACKET             : 14
LCURLY               : 15
LESSTHAN             : 37
LPAREN               : 1 28 43 46 48 49 55 75
MINUS                : 66
MORETHAN             : 38
NOTEQUAL             : 40
OR                   : 42
PLUS                 : 65
PRINT                : 28
RBRACKET             : 14
RCURLY               : 15
RETURN               : 26
RPAREN               : 1 28 43 48 50 55 76
SEMICOLON            : 6 16 47 51
START                : 1
STRING               : 11 31 86
TIMES                : 69
VAR                  : 4
VOID                 : 58
WHILE                : 43 45
error                : 

Nonterminals, with rules where they appear

args                 : 59 62 62
argumentos           : 48
arreglo              : 35
asignacion           : 18 48 61
bloque               : 1 43 45 48 49 52 55
bool                 : 81
comparacion          : 36
condicion            : 19
condicionelse        : 49
condition            : 34
declaracion          : 15 55
do                   : 43
doWhile              : 21
else                 : 52
endCondition         : 45 48 49
epsilon              : 3 53 60
escrito              : 28
escritura            : 23
estatuto             : 16
estatutoExp          : 15 17 17
exp                  : 33 36 64
expresion            : 26 27 32 36 43 45 48 49 73
factor               : 67 68
float                : 80
forLoop              : 22
funcdef              : 55
funcion              : 24
impr                 : 29 30 30
int                  : 79
lista                : 14
operacion            : 68
paren                : 73 73
programa             : 0
returnexp            : 25
signo                : 64
startCondition       : 45 48
string               : 82
termino              : 63 64 68
tipo                 : 6 57
tiposreturn          : 55
var                  : 4
varcte               : 74
vardef               : 6
vars                 : 2 5 5
whileLoop            : 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . START LPAREN RPAREN bloque

    START           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> START . LPAREN RPAREN bloque

    LPAREN          shift and go to state 3


state 3

    (1) programa -> START LPAREN . RPAREN bloque

    RPAREN          shift and go to state 4


state 4

    (1) programa -> START LPAREN RPAREN . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 5

state 5

    (1) programa -> START LPAREN RPAREN bloque .

    $end            reduce using rule 1 (programa -> START LPAREN RPAREN bloque .)


state 6

    (15) bloque -> LCURLY . declaracion estatutoExp RCURLY
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (77) epsilon -> .

    VAR             shift and go to state 10
    ID              reduce using rule 77 (epsilon -> .)
    IF              reduce using rule 77 (epsilon -> .)
    WHILE           reduce using rule 77 (epsilon -> .)
    FOR             reduce using rule 77 (epsilon -> .)
    PRINT           reduce using rule 77 (epsilon -> .)
    FUNCTION        reduce using rule 77 (epsilon -> .)
    RETURN          reduce using rule 77 (epsilon -> .)
    DO              reduce using rule 77 (epsilon -> .)

    declaracion                    shift and go to state 7
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 7

    (15) bloque -> LCURLY declaracion . estatutoExp RCURLY
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . returnexp
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque
    (26) returnexp -> . RETURN expresion
    (44) do -> . DO

    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 11
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    returnexp                      shift and go to state 20
    do                             shift and go to state 24

state 8

    (2) declaracion -> vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

    ID              reduce using rule 2 (declaracion -> vars .)
    IF              reduce using rule 2 (declaracion -> vars .)
    WHILE           reduce using rule 2 (declaracion -> vars .)
    FOR             reduce using rule 2 (declaracion -> vars .)
    PRINT           reduce using rule 2 (declaracion -> vars .)
    FUNCTION        reduce using rule 2 (declaracion -> vars .)
    RETURN          reduce using rule 2 (declaracion -> vars .)
    DO              reduce using rule 2 (declaracion -> vars .)
    RPAREN          reduce using rule 2 (declaracion -> vars .)
    VAR             shift and go to state 10

    vars                           shift and go to state 30

state 9

    (3) declaracion -> epsilon .

    ID              reduce using rule 3 (declaracion -> epsilon .)
    IF              reduce using rule 3 (declaracion -> epsilon .)
    WHILE           reduce using rule 3 (declaracion -> epsilon .)
    FOR             reduce using rule 3 (declaracion -> epsilon .)
    PRINT           reduce using rule 3 (declaracion -> epsilon .)
    FUNCTION        reduce using rule 3 (declaracion -> epsilon .)
    RETURN          reduce using rule 3 (declaracion -> epsilon .)
    DO              reduce using rule 3 (declaracion -> epsilon .)
    RPAREN          reduce using rule 3 (declaracion -> epsilon .)


state 10

    (4) vars -> VAR . var
    (6) var -> . vardef COLON tipo SEMICOLON
    (7) vardef -> . ID

    ID              shift and go to state 33

    var                            shift and go to state 31
    vardef                         shift and go to state 32

state 11

    (15) bloque -> LCURLY declaracion estatutoExp . RCURLY
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . returnexp
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque
    (26) returnexp -> . RETURN expresion
    (44) do -> . DO

    RCURLY          shift and go to state 35
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    DO              shift and go to state 29

    estatutoExp                    shift and go to state 34
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    returnexp                      shift and go to state 20
    do                             shift and go to state 24

state 12

    (16) estatutoExp -> estatuto . SEMICOLON

    SEMICOLON       shift and go to state 36


state 13

    (18) estatuto -> asignacion .

    SEMICOLON       reduce using rule 18 (estatuto -> asignacion .)


state 14

    (19) estatuto -> condicion .

    SEMICOLON       reduce using rule 19 (estatuto -> condicion .)


state 15

    (20) estatuto -> whileLoop .

    SEMICOLON       reduce using rule 20 (estatuto -> whileLoop .)


state 16

    (21) estatuto -> doWhile .

    SEMICOLON       reduce using rule 21 (estatuto -> doWhile .)


state 17

    (22) estatuto -> forLoop .

    SEMICOLON       reduce using rule 22 (estatuto -> forLoop .)


state 18

    (23) estatuto -> escritura .

    SEMICOLON       reduce using rule 23 (estatuto -> escritura .)


state 19

    (24) estatuto -> funcion .

    SEMICOLON       reduce using rule 24 (estatuto -> funcion .)


state 20

    (25) estatuto -> returnexp .

    SEMICOLON       reduce using rule 25 (estatuto -> returnexp .)


state 21

    (27) asignacion -> ID . EQUAL expresion

    EQUAL           shift and go to state 37


state 22

    (49) condicion -> IF . LPAREN expresion endCondition bloque condicionelse

    LPAREN          shift and go to state 38


state 23

    (45) whileLoop -> WHILE . startCondition expresion endCondition bloque
    (46) startCondition -> . LPAREN
    (47) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 40
    SEMICOLON       shift and go to state 41

    startCondition                 shift and go to state 39

state 24

    (43) doWhile -> do . bloque WHILE LPAREN expresion RPAREN
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 42

state 25

    (48) forLoop -> FOR . LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque

    LPAREN          shift and go to state 43


state 26

    (28) escritura -> PRINT . LPAREN escrito RPAREN

    LPAREN          shift and go to state 44


state 27

    (55) funcion -> FUNCTION . funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque
    (56) funcdef -> . ID

    ID              shift and go to state 46

    funcdef                        shift and go to state 45

state 28

    (26) returnexp -> RETURN . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    expresion                      shift and go to state 47
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 29

    (44) do -> DO .

    LCURLY          reduce using rule 44 (do -> DO .)


state 30

    (5) vars -> vars vars .
    (5) vars -> vars . vars
    (4) vars -> . VAR var
    (5) vars -> . vars vars

  ! shift/reduce conflict for VAR resolved as shift
    ID              reduce using rule 5 (vars -> vars vars .)
    IF              reduce using rule 5 (vars -> vars vars .)
    WHILE           reduce using rule 5 (vars -> vars vars .)
    FOR             reduce using rule 5 (vars -> vars vars .)
    PRINT           reduce using rule 5 (vars -> vars vars .)
    FUNCTION        reduce using rule 5 (vars -> vars vars .)
    RETURN          reduce using rule 5 (vars -> vars vars .)
    DO              reduce using rule 5 (vars -> vars vars .)
    RPAREN          reduce using rule 5 (vars -> vars vars .)
    VAR             shift and go to state 10

  ! VAR             [ reduce using rule 5 (vars -> vars vars .) ]

    vars                           shift and go to state 30

state 31

    (4) vars -> VAR var .

    VAR             reduce using rule 4 (vars -> VAR var .)
    ID              reduce using rule 4 (vars -> VAR var .)
    IF              reduce using rule 4 (vars -> VAR var .)
    WHILE           reduce using rule 4 (vars -> VAR var .)
    FOR             reduce using rule 4 (vars -> VAR var .)
    PRINT           reduce using rule 4 (vars -> VAR var .)
    FUNCTION        reduce using rule 4 (vars -> VAR var .)
    RETURN          reduce using rule 4 (vars -> VAR var .)
    DO              reduce using rule 4 (vars -> VAR var .)
    RPAREN          reduce using rule 4 (vars -> VAR var .)


state 32

    (6) var -> vardef . COLON tipo SEMICOLON

    COLON           shift and go to state 67


state 33

    (7) vardef -> ID .

    COLON           reduce using rule 7 (vardef -> ID .)


state 34

    (17) estatutoExp -> estatutoExp estatutoExp .
    (17) estatutoExp -> estatutoExp . estatutoExp
    (16) estatutoExp -> . estatuto SEMICOLON
    (17) estatutoExp -> . estatutoExp estatutoExp
    (18) estatuto -> . asignacion
    (19) estatuto -> . condicion
    (20) estatuto -> . whileLoop
    (21) estatuto -> . doWhile
    (22) estatuto -> . forLoop
    (23) estatuto -> . escritura
    (24) estatuto -> . funcion
    (25) estatuto -> . returnexp
    (27) asignacion -> . ID EQUAL expresion
    (49) condicion -> . IF LPAREN expresion endCondition bloque condicionelse
    (45) whileLoop -> . WHILE startCondition expresion endCondition bloque
    (43) doWhile -> . do bloque WHILE LPAREN expresion RPAREN
    (48) forLoop -> . FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (28) escritura -> . PRINT LPAREN escrito RPAREN
    (55) funcion -> . FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque
    (26) returnexp -> . RETURN expresion
    (44) do -> . DO

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    RCURLY          reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .)
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 25
    PRINT           shift and go to state 26
    FUNCTION        shift and go to state 27
    RETURN          shift and go to state 28
    DO              shift and go to state 29

  ! ID              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! IF              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! WHILE           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FOR             [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! PRINT           [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! FUNCTION        [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! RETURN          [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]
  ! DO              [ reduce using rule 17 (estatutoExp -> estatutoExp estatutoExp .) ]

    estatutoExp                    shift and go to state 34
    estatuto                       shift and go to state 12
    asignacion                     shift and go to state 13
    condicion                      shift and go to state 14
    whileLoop                      shift and go to state 15
    doWhile                        shift and go to state 16
    forLoop                        shift and go to state 17
    escritura                      shift and go to state 18
    funcion                        shift and go to state 19
    returnexp                      shift and go to state 20
    do                             shift and go to state 24

state 35

    (15) bloque -> LCURLY declaracion estatutoExp RCURLY .

    $end            reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    WHILE           reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    ELSE            reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)
    SEMICOLON       reduce using rule 15 (bloque -> LCURLY declaracion estatutoExp RCURLY .)


state 36

    (16) estatutoExp -> estatuto SEMICOLON .

    RCURLY          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    ID              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    IF              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    WHILE           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FOR             reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    PRINT           reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    FUNCTION        reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    RETURN          reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)
    DO              reduce using rule 16 (estatutoExp -> estatuto SEMICOLON .)


state 37

    (27) asignacion -> ID EQUAL . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    expresion                      shift and go to state 68
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 38

    (49) condicion -> IF LPAREN . expresion endCondition bloque condicionelse
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    expresion                      shift and go to state 69
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 39

    (45) whileLoop -> WHILE startCondition . expresion endCondition bloque
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    expresion                      shift and go to state 70
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 40

    (46) startCondition -> LPAREN .

    LBRACKET        reduce using rule 46 (startCondition -> LPAREN .)
    LPAREN          reduce using rule 46 (startCondition -> LPAREN .)
    RPAREN          reduce using rule 46 (startCondition -> LPAREN .)
    ID              reduce using rule 46 (startCondition -> LPAREN .)
    INT             reduce using rule 46 (startCondition -> LPAREN .)
    FLOAT           reduce using rule 46 (startCondition -> LPAREN .)
    BOOL            reduce using rule 46 (startCondition -> LPAREN .)
    STRING          reduce using rule 46 (startCondition -> LPAREN .)


state 41

    (47) startCondition -> SEMICOLON .

    LBRACKET        reduce using rule 47 (startCondition -> SEMICOLON .)
    LPAREN          reduce using rule 47 (startCondition -> SEMICOLON .)
    RPAREN          reduce using rule 47 (startCondition -> SEMICOLON .)
    ID              reduce using rule 47 (startCondition -> SEMICOLON .)
    INT             reduce using rule 47 (startCondition -> SEMICOLON .)
    FLOAT           reduce using rule 47 (startCondition -> SEMICOLON .)
    BOOL            reduce using rule 47 (startCondition -> SEMICOLON .)
    STRING          reduce using rule 47 (startCondition -> SEMICOLON .)


state 42

    (43) doWhile -> do bloque . WHILE LPAREN expresion RPAREN

    WHILE           shift and go to state 71


state 43

    (48) forLoop -> FOR LPAREN . argumentos startCondition expresion endCondition asignacion RPAREN bloque
    (59) argumentos -> . args
    (60) argumentos -> . epsilon
    (61) args -> . asignacion
    (62) args -> . args COMA args
    (77) epsilon -> .
    (27) asignacion -> . ID EQUAL expresion

    LPAREN          reduce using rule 77 (epsilon -> .)
    SEMICOLON       reduce using rule 77 (epsilon -> .)
    ID              shift and go to state 21

    argumentos                     shift and go to state 72
    asignacion                     shift and go to state 73
    args                           shift and go to state 74
    epsilon                        shift and go to state 75

state 44

    (28) escritura -> PRINT LPAREN . escrito RPAREN
    (29) escrito -> . impr
    (30) escrito -> . impr COMA impr
    (31) impr -> . STRING
    (32) impr -> . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    STRING          shift and go to state 78
    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65

    escrito                        shift and go to state 76
    impr                           shift and go to state 77
    expresion                      shift and go to state 79
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 45

    (55) funcion -> FUNCTION funcdef . LPAREN declaracion RPAREN COLON tiposreturn bloque

    LPAREN          shift and go to state 80


state 46

    (56) funcdef -> ID .

    LPAREN          reduce using rule 56 (funcdef -> ID .)


state 47

    (26) returnexp -> RETURN expresion .

    SEMICOLON       reduce using rule 26 (returnexp -> RETURN expresion .)


state 48

    (33) expresion -> exp .
    (36) condition -> exp . comparacion expresion
    (37) comparacion -> . LESSTHAN
    (38) comparacion -> . MORETHAN
    (39) comparacion -> . ISEQUAL
    (40) comparacion -> . NOTEQUAL
    (41) comparacion -> . AND
    (42) comparacion -> . OR

    SEMICOLON       reduce using rule 33 (expresion -> exp .)
    COMA            reduce using rule 33 (expresion -> exp .)
    LPAREN          reduce using rule 33 (expresion -> exp .)
    RPAREN          reduce using rule 33 (expresion -> exp .)
    LESSTHAN        shift and go to state 82
    MORETHAN        shift and go to state 83
    ISEQUAL         shift and go to state 84
    NOTEQUAL        shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

    comparacion                    shift and go to state 81

state 49

    (34) expresion -> condition .

    SEMICOLON       reduce using rule 34 (expresion -> condition .)
    COMA            reduce using rule 34 (expresion -> condition .)
    LPAREN          reduce using rule 34 (expresion -> condition .)
    RPAREN          reduce using rule 34 (expresion -> condition .)


state 50

    (35) expresion -> arreglo .

    SEMICOLON       reduce using rule 35 (expresion -> arreglo .)
    COMA            reduce using rule 35 (expresion -> arreglo .)
    LPAREN          reduce using rule 35 (expresion -> arreglo .)
    RPAREN          reduce using rule 35 (expresion -> arreglo .)


state 51

    (63) exp -> termino .
    (64) exp -> termino . signo exp
    (65) signo -> . PLUS
    (66) signo -> . MINUS

    LESSTHAN        reduce using rule 63 (exp -> termino .)
    MORETHAN        reduce using rule 63 (exp -> termino .)
    ISEQUAL         reduce using rule 63 (exp -> termino .)
    NOTEQUAL        reduce using rule 63 (exp -> termino .)
    AND             reduce using rule 63 (exp -> termino .)
    OR              reduce using rule 63 (exp -> termino .)
    SEMICOLON       reduce using rule 63 (exp -> termino .)
    COMA            reduce using rule 63 (exp -> termino .)
    LPAREN          reduce using rule 63 (exp -> termino .)
    RPAREN          reduce using rule 63 (exp -> termino .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90

    signo                          shift and go to state 88

state 52

    (14) arreglo -> LBRACKET . lista RBRACKET
    (12) lista -> . ID
    (13) lista -> . ID COMA

    ID              shift and go to state 92

    lista                          shift and go to state 91

state 53

    (67) termino -> factor .
    (68) termino -> factor . operacion termino
    (69) operacion -> . TIMES
    (70) operacion -> . DIVIDE
    (71) operacion -> . DIFF
    (72) operacion -> . EXP

    PLUS            reduce using rule 67 (termino -> factor .)
    MINUS           reduce using rule 67 (termino -> factor .)
    LESSTHAN        reduce using rule 67 (termino -> factor .)
    MORETHAN        reduce using rule 67 (termino -> factor .)
    ISEQUAL         reduce using rule 67 (termino -> factor .)
    NOTEQUAL        reduce using rule 67 (termino -> factor .)
    AND             reduce using rule 67 (termino -> factor .)
    OR              reduce using rule 67 (termino -> factor .)
    SEMICOLON       reduce using rule 67 (termino -> factor .)
    COMA            reduce using rule 67 (termino -> factor .)
    LPAREN          reduce using rule 67 (termino -> factor .)
    RPAREN          reduce using rule 67 (termino -> factor .)
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    DIFF            shift and go to state 96
    EXP             shift and go to state 97

    operacion                      shift and go to state 93

state 54

    (73) factor -> paren . expresion paren
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    paren                          shift and go to state 54
    expresion                      shift and go to state 98
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 55

    (74) factor -> varcte .

    TIMES           reduce using rule 74 (factor -> varcte .)
    DIVIDE          reduce using rule 74 (factor -> varcte .)
    DIFF            reduce using rule 74 (factor -> varcte .)
    EXP             reduce using rule 74 (factor -> varcte .)
    PLUS            reduce using rule 74 (factor -> varcte .)
    MINUS           reduce using rule 74 (factor -> varcte .)
    LESSTHAN        reduce using rule 74 (factor -> varcte .)
    MORETHAN        reduce using rule 74 (factor -> varcte .)
    ISEQUAL         reduce using rule 74 (factor -> varcte .)
    NOTEQUAL        reduce using rule 74 (factor -> varcte .)
    AND             reduce using rule 74 (factor -> varcte .)
    OR              reduce using rule 74 (factor -> varcte .)
    SEMICOLON       reduce using rule 74 (factor -> varcte .)
    COMA            reduce using rule 74 (factor -> varcte .)
    LPAREN          reduce using rule 74 (factor -> varcte .)
    RPAREN          reduce using rule 74 (factor -> varcte .)


state 56

    (75) paren -> LPAREN .

    LBRACKET        reduce using rule 75 (paren -> LPAREN .)
    LPAREN          reduce using rule 75 (paren -> LPAREN .)
    RPAREN          reduce using rule 75 (paren -> LPAREN .)
    ID              reduce using rule 75 (paren -> LPAREN .)
    INT             reduce using rule 75 (paren -> LPAREN .)
    FLOAT           reduce using rule 75 (paren -> LPAREN .)
    BOOL            reduce using rule 75 (paren -> LPAREN .)
    STRING          reduce using rule 75 (paren -> LPAREN .)
    TIMES           reduce using rule 75 (paren -> LPAREN .)
    DIVIDE          reduce using rule 75 (paren -> LPAREN .)
    DIFF            reduce using rule 75 (paren -> LPAREN .)
    EXP             reduce using rule 75 (paren -> LPAREN .)
    PLUS            reduce using rule 75 (paren -> LPAREN .)
    MINUS           reduce using rule 75 (paren -> LPAREN .)
    LESSTHAN        reduce using rule 75 (paren -> LPAREN .)
    MORETHAN        reduce using rule 75 (paren -> LPAREN .)
    ISEQUAL         reduce using rule 75 (paren -> LPAREN .)
    NOTEQUAL        reduce using rule 75 (paren -> LPAREN .)
    AND             reduce using rule 75 (paren -> LPAREN .)
    OR              reduce using rule 75 (paren -> LPAREN .)
    SEMICOLON       reduce using rule 75 (paren -> LPAREN .)
    COMA            reduce using rule 75 (paren -> LPAREN .)


state 57

    (76) paren -> RPAREN .

    LBRACKET        reduce using rule 76 (paren -> RPAREN .)
    LPAREN          reduce using rule 76 (paren -> RPAREN .)
    RPAREN          reduce using rule 76 (paren -> RPAREN .)
    ID              reduce using rule 76 (paren -> RPAREN .)
    INT             reduce using rule 76 (paren -> RPAREN .)
    FLOAT           reduce using rule 76 (paren -> RPAREN .)
    BOOL            reduce using rule 76 (paren -> RPAREN .)
    STRING          reduce using rule 76 (paren -> RPAREN .)
    TIMES           reduce using rule 76 (paren -> RPAREN .)
    DIVIDE          reduce using rule 76 (paren -> RPAREN .)
    DIFF            reduce using rule 76 (paren -> RPAREN .)
    EXP             reduce using rule 76 (paren -> RPAREN .)
    PLUS            reduce using rule 76 (paren -> RPAREN .)
    MINUS           reduce using rule 76 (paren -> RPAREN .)
    LESSTHAN        reduce using rule 76 (paren -> RPAREN .)
    MORETHAN        reduce using rule 76 (paren -> RPAREN .)
    ISEQUAL         reduce using rule 76 (paren -> RPAREN .)
    NOTEQUAL        reduce using rule 76 (paren -> RPAREN .)
    AND             reduce using rule 76 (paren -> RPAREN .)
    OR              reduce using rule 76 (paren -> RPAREN .)
    SEMICOLON       reduce using rule 76 (paren -> RPAREN .)
    COMA            reduce using rule 76 (paren -> RPAREN .)


state 58

    (78) varcte -> ID .

    TIMES           reduce using rule 78 (varcte -> ID .)
    DIVIDE          reduce using rule 78 (varcte -> ID .)
    DIFF            reduce using rule 78 (varcte -> ID .)
    EXP             reduce using rule 78 (varcte -> ID .)
    PLUS            reduce using rule 78 (varcte -> ID .)
    MINUS           reduce using rule 78 (varcte -> ID .)
    LESSTHAN        reduce using rule 78 (varcte -> ID .)
    MORETHAN        reduce using rule 78 (varcte -> ID .)
    ISEQUAL         reduce using rule 78 (varcte -> ID .)
    NOTEQUAL        reduce using rule 78 (varcte -> ID .)
    AND             reduce using rule 78 (varcte -> ID .)
    OR              reduce using rule 78 (varcte -> ID .)
    SEMICOLON       reduce using rule 78 (varcte -> ID .)
    COMA            reduce using rule 78 (varcte -> ID .)
    LPAREN          reduce using rule 78 (varcte -> ID .)
    RPAREN          reduce using rule 78 (varcte -> ID .)


state 59

    (79) varcte -> int .

    TIMES           reduce using rule 79 (varcte -> int .)
    DIVIDE          reduce using rule 79 (varcte -> int .)
    DIFF            reduce using rule 79 (varcte -> int .)
    EXP             reduce using rule 79 (varcte -> int .)
    PLUS            reduce using rule 79 (varcte -> int .)
    MINUS           reduce using rule 79 (varcte -> int .)
    LESSTHAN        reduce using rule 79 (varcte -> int .)
    MORETHAN        reduce using rule 79 (varcte -> int .)
    ISEQUAL         reduce using rule 79 (varcte -> int .)
    NOTEQUAL        reduce using rule 79 (varcte -> int .)
    AND             reduce using rule 79 (varcte -> int .)
    OR              reduce using rule 79 (varcte -> int .)
    SEMICOLON       reduce using rule 79 (varcte -> int .)
    COMA            reduce using rule 79 (varcte -> int .)
    LPAREN          reduce using rule 79 (varcte -> int .)
    RPAREN          reduce using rule 79 (varcte -> int .)


state 60

    (80) varcte -> float .

    TIMES           reduce using rule 80 (varcte -> float .)
    DIVIDE          reduce using rule 80 (varcte -> float .)
    DIFF            reduce using rule 80 (varcte -> float .)
    EXP             reduce using rule 80 (varcte -> float .)
    PLUS            reduce using rule 80 (varcte -> float .)
    MINUS           reduce using rule 80 (varcte -> float .)
    LESSTHAN        reduce using rule 80 (varcte -> float .)
    MORETHAN        reduce using rule 80 (varcte -> float .)
    ISEQUAL         reduce using rule 80 (varcte -> float .)
    NOTEQUAL        reduce using rule 80 (varcte -> float .)
    AND             reduce using rule 80 (varcte -> float .)
    OR              reduce using rule 80 (varcte -> float .)
    SEMICOLON       reduce using rule 80 (varcte -> float .)
    COMA            reduce using rule 80 (varcte -> float .)
    LPAREN          reduce using rule 80 (varcte -> float .)
    RPAREN          reduce using rule 80 (varcte -> float .)


state 61

    (81) varcte -> bool .

    TIMES           reduce using rule 81 (varcte -> bool .)
    DIVIDE          reduce using rule 81 (varcte -> bool .)
    DIFF            reduce using rule 81 (varcte -> bool .)
    EXP             reduce using rule 81 (varcte -> bool .)
    PLUS            reduce using rule 81 (varcte -> bool .)
    MINUS           reduce using rule 81 (varcte -> bool .)
    LESSTHAN        reduce using rule 81 (varcte -> bool .)
    MORETHAN        reduce using rule 81 (varcte -> bool .)
    ISEQUAL         reduce using rule 81 (varcte -> bool .)
    NOTEQUAL        reduce using rule 81 (varcte -> bool .)
    AND             reduce using rule 81 (varcte -> bool .)
    OR              reduce using rule 81 (varcte -> bool .)
    SEMICOLON       reduce using rule 81 (varcte -> bool .)
    COMA            reduce using rule 81 (varcte -> bool .)
    LPAREN          reduce using rule 81 (varcte -> bool .)
    RPAREN          reduce using rule 81 (varcte -> bool .)


state 62

    (82) varcte -> string .

    TIMES           reduce using rule 82 (varcte -> string .)
    DIVIDE          reduce using rule 82 (varcte -> string .)
    DIFF            reduce using rule 82 (varcte -> string .)
    EXP             reduce using rule 82 (varcte -> string .)
    PLUS            reduce using rule 82 (varcte -> string .)
    MINUS           reduce using rule 82 (varcte -> string .)
    LESSTHAN        reduce using rule 82 (varcte -> string .)
    MORETHAN        reduce using rule 82 (varcte -> string .)
    ISEQUAL         reduce using rule 82 (varcte -> string .)
    NOTEQUAL        reduce using rule 82 (varcte -> string .)
    AND             reduce using rule 82 (varcte -> string .)
    OR              reduce using rule 82 (varcte -> string .)
    SEMICOLON       reduce using rule 82 (varcte -> string .)
    COMA            reduce using rule 82 (varcte -> string .)
    LPAREN          reduce using rule 82 (varcte -> string .)
    RPAREN          reduce using rule 82 (varcte -> string .)


state 63

    (83) int -> INT .

    TIMES           reduce using rule 83 (int -> INT .)
    DIVIDE          reduce using rule 83 (int -> INT .)
    DIFF            reduce using rule 83 (int -> INT .)
    EXP             reduce using rule 83 (int -> INT .)
    PLUS            reduce using rule 83 (int -> INT .)
    MINUS           reduce using rule 83 (int -> INT .)
    LESSTHAN        reduce using rule 83 (int -> INT .)
    MORETHAN        reduce using rule 83 (int -> INT .)
    ISEQUAL         reduce using rule 83 (int -> INT .)
    NOTEQUAL        reduce using rule 83 (int -> INT .)
    AND             reduce using rule 83 (int -> INT .)
    OR              reduce using rule 83 (int -> INT .)
    SEMICOLON       reduce using rule 83 (int -> INT .)
    COMA            reduce using rule 83 (int -> INT .)
    LPAREN          reduce using rule 83 (int -> INT .)
    RPAREN          reduce using rule 83 (int -> INT .)


state 64

    (84) float -> FLOAT .

    TIMES           reduce using rule 84 (float -> FLOAT .)
    DIVIDE          reduce using rule 84 (float -> FLOAT .)
    DIFF            reduce using rule 84 (float -> FLOAT .)
    EXP             reduce using rule 84 (float -> FLOAT .)
    PLUS            reduce using rule 84 (float -> FLOAT .)
    MINUS           reduce using rule 84 (float -> FLOAT .)
    LESSTHAN        reduce using rule 84 (float -> FLOAT .)
    MORETHAN        reduce using rule 84 (float -> FLOAT .)
    ISEQUAL         reduce using rule 84 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 84 (float -> FLOAT .)
    AND             reduce using rule 84 (float -> FLOAT .)
    OR              reduce using rule 84 (float -> FLOAT .)
    SEMICOLON       reduce using rule 84 (float -> FLOAT .)
    COMA            reduce using rule 84 (float -> FLOAT .)
    LPAREN          reduce using rule 84 (float -> FLOAT .)
    RPAREN          reduce using rule 84 (float -> FLOAT .)


state 65

    (85) bool -> BOOL .

    TIMES           reduce using rule 85 (bool -> BOOL .)
    DIVIDE          reduce using rule 85 (bool -> BOOL .)
    DIFF            reduce using rule 85 (bool -> BOOL .)
    EXP             reduce using rule 85 (bool -> BOOL .)
    PLUS            reduce using rule 85 (bool -> BOOL .)
    MINUS           reduce using rule 85 (bool -> BOOL .)
    LESSTHAN        reduce using rule 85 (bool -> BOOL .)
    MORETHAN        reduce using rule 85 (bool -> BOOL .)
    ISEQUAL         reduce using rule 85 (bool -> BOOL .)
    NOTEQUAL        reduce using rule 85 (bool -> BOOL .)
    AND             reduce using rule 85 (bool -> BOOL .)
    OR              reduce using rule 85 (bool -> BOOL .)
    SEMICOLON       reduce using rule 85 (bool -> BOOL .)
    COMA            reduce using rule 85 (bool -> BOOL .)
    LPAREN          reduce using rule 85 (bool -> BOOL .)
    RPAREN          reduce using rule 85 (bool -> BOOL .)


state 66

    (86) string -> STRING .

    TIMES           reduce using rule 86 (string -> STRING .)
    DIVIDE          reduce using rule 86 (string -> STRING .)
    DIFF            reduce using rule 86 (string -> STRING .)
    EXP             reduce using rule 86 (string -> STRING .)
    PLUS            reduce using rule 86 (string -> STRING .)
    MINUS           reduce using rule 86 (string -> STRING .)
    LESSTHAN        reduce using rule 86 (string -> STRING .)
    MORETHAN        reduce using rule 86 (string -> STRING .)
    ISEQUAL         reduce using rule 86 (string -> STRING .)
    NOTEQUAL        reduce using rule 86 (string -> STRING .)
    AND             reduce using rule 86 (string -> STRING .)
    OR              reduce using rule 86 (string -> STRING .)
    SEMICOLON       reduce using rule 86 (string -> STRING .)
    COMA            reduce using rule 86 (string -> STRING .)
    LPAREN          reduce using rule 86 (string -> STRING .)
    RPAREN          reduce using rule 86 (string -> STRING .)


state 67

    (6) var -> vardef COLON . tipo SEMICOLON
    (8) tipo -> . INT
    (9) tipo -> . FLOAT
    (10) tipo -> . BOOL
    (11) tipo -> . STRING

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    STRING          shift and go to state 103

    tipo                           shift and go to state 99

state 68

    (27) asignacion -> ID EQUAL expresion .

    SEMICOLON       reduce using rule 27 (asignacion -> ID EQUAL expresion .)
    COMA            reduce using rule 27 (asignacion -> ID EQUAL expresion .)
    LPAREN          reduce using rule 27 (asignacion -> ID EQUAL expresion .)
    RPAREN          reduce using rule 27 (asignacion -> ID EQUAL expresion .)


state 69

    (49) condicion -> IF LPAREN expresion . endCondition bloque condicionelse
    (50) endCondition -> . RPAREN
    (51) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 105
    SEMICOLON       shift and go to state 106

    endCondition                   shift and go to state 104

state 70

    (45) whileLoop -> WHILE startCondition expresion . endCondition bloque
    (50) endCondition -> . RPAREN
    (51) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 105
    SEMICOLON       shift and go to state 106

    endCondition                   shift and go to state 107

state 71

    (43) doWhile -> do bloque WHILE . LPAREN expresion RPAREN

    LPAREN          shift and go to state 108


state 72

    (48) forLoop -> FOR LPAREN argumentos . startCondition expresion endCondition asignacion RPAREN bloque
    (46) startCondition -> . LPAREN
    (47) startCondition -> . SEMICOLON

    LPAREN          shift and go to state 40
    SEMICOLON       shift and go to state 41

    startCondition                 shift and go to state 109

state 73

    (61) args -> asignacion .

    COMA            reduce using rule 61 (args -> asignacion .)
    LPAREN          reduce using rule 61 (args -> asignacion .)
    SEMICOLON       reduce using rule 61 (args -> asignacion .)


state 74

    (59) argumentos -> args .
    (62) args -> args . COMA args

    LPAREN          reduce using rule 59 (argumentos -> args .)
    SEMICOLON       reduce using rule 59 (argumentos -> args .)
    COMA            shift and go to state 110


state 75

    (60) argumentos -> epsilon .

    LPAREN          reduce using rule 60 (argumentos -> epsilon .)
    SEMICOLON       reduce using rule 60 (argumentos -> epsilon .)


state 76

    (28) escritura -> PRINT LPAREN escrito . RPAREN

    RPAREN          shift and go to state 111


state 77

    (29) escrito -> impr .
    (30) escrito -> impr . COMA impr

    RPAREN          reduce using rule 29 (escrito -> impr .)
    COMA            shift and go to state 112


state 78

    (31) impr -> STRING .
    (86) string -> STRING .

  ! reduce/reduce conflict for COMA resolved using rule 31 (impr -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (impr -> STRING .)
    COMA            reduce using rule 31 (impr -> STRING .)
    RPAREN          reduce using rule 31 (impr -> STRING .)
    TIMES           reduce using rule 86 (string -> STRING .)
    DIVIDE          reduce using rule 86 (string -> STRING .)
    DIFF            reduce using rule 86 (string -> STRING .)
    EXP             reduce using rule 86 (string -> STRING .)
    PLUS            reduce using rule 86 (string -> STRING .)
    MINUS           reduce using rule 86 (string -> STRING .)
    LESSTHAN        reduce using rule 86 (string -> STRING .)
    MORETHAN        reduce using rule 86 (string -> STRING .)
    ISEQUAL         reduce using rule 86 (string -> STRING .)
    NOTEQUAL        reduce using rule 86 (string -> STRING .)
    AND             reduce using rule 86 (string -> STRING .)
    OR              reduce using rule 86 (string -> STRING .)

  ! COMA            [ reduce using rule 86 (string -> STRING .) ]
  ! RPAREN          [ reduce using rule 86 (string -> STRING .) ]


state 79

    (32) impr -> expresion .

    COMA            reduce using rule 32 (impr -> expresion .)
    RPAREN          reduce using rule 32 (impr -> expresion .)


state 80

    (55) funcion -> FUNCTION funcdef LPAREN . declaracion RPAREN COLON tiposreturn bloque
    (2) declaracion -> . vars
    (3) declaracion -> . epsilon
    (4) vars -> . VAR var
    (5) vars -> . vars vars
    (77) epsilon -> .

    VAR             shift and go to state 10
    RPAREN          reduce using rule 77 (epsilon -> .)

    declaracion                    shift and go to state 113
    vars                           shift and go to state 8
    epsilon                        shift and go to state 9

state 81

    (36) condition -> exp comparacion . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    exp                            shift and go to state 48
    expresion                      shift and go to state 114
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 82

    (37) comparacion -> LESSTHAN .

    LBRACKET        reduce using rule 37 (comparacion -> LESSTHAN .)
    LPAREN          reduce using rule 37 (comparacion -> LESSTHAN .)
    RPAREN          reduce using rule 37 (comparacion -> LESSTHAN .)
    ID              reduce using rule 37 (comparacion -> LESSTHAN .)
    INT             reduce using rule 37 (comparacion -> LESSTHAN .)
    FLOAT           reduce using rule 37 (comparacion -> LESSTHAN .)
    BOOL            reduce using rule 37 (comparacion -> LESSTHAN .)
    STRING          reduce using rule 37 (comparacion -> LESSTHAN .)


state 83

    (38) comparacion -> MORETHAN .

    LBRACKET        reduce using rule 38 (comparacion -> MORETHAN .)
    LPAREN          reduce using rule 38 (comparacion -> MORETHAN .)
    RPAREN          reduce using rule 38 (comparacion -> MORETHAN .)
    ID              reduce using rule 38 (comparacion -> MORETHAN .)
    INT             reduce using rule 38 (comparacion -> MORETHAN .)
    FLOAT           reduce using rule 38 (comparacion -> MORETHAN .)
    BOOL            reduce using rule 38 (comparacion -> MORETHAN .)
    STRING          reduce using rule 38 (comparacion -> MORETHAN .)


state 84

    (39) comparacion -> ISEQUAL .

    LBRACKET        reduce using rule 39 (comparacion -> ISEQUAL .)
    LPAREN          reduce using rule 39 (comparacion -> ISEQUAL .)
    RPAREN          reduce using rule 39 (comparacion -> ISEQUAL .)
    ID              reduce using rule 39 (comparacion -> ISEQUAL .)
    INT             reduce using rule 39 (comparacion -> ISEQUAL .)
    FLOAT           reduce using rule 39 (comparacion -> ISEQUAL .)
    BOOL            reduce using rule 39 (comparacion -> ISEQUAL .)
    STRING          reduce using rule 39 (comparacion -> ISEQUAL .)


state 85

    (40) comparacion -> NOTEQUAL .

    LBRACKET        reduce using rule 40 (comparacion -> NOTEQUAL .)
    LPAREN          reduce using rule 40 (comparacion -> NOTEQUAL .)
    RPAREN          reduce using rule 40 (comparacion -> NOTEQUAL .)
    ID              reduce using rule 40 (comparacion -> NOTEQUAL .)
    INT             reduce using rule 40 (comparacion -> NOTEQUAL .)
    FLOAT           reduce using rule 40 (comparacion -> NOTEQUAL .)
    BOOL            reduce using rule 40 (comparacion -> NOTEQUAL .)
    STRING          reduce using rule 40 (comparacion -> NOTEQUAL .)


state 86

    (41) comparacion -> AND .

    LBRACKET        reduce using rule 41 (comparacion -> AND .)
    LPAREN          reduce using rule 41 (comparacion -> AND .)
    RPAREN          reduce using rule 41 (comparacion -> AND .)
    ID              reduce using rule 41 (comparacion -> AND .)
    INT             reduce using rule 41 (comparacion -> AND .)
    FLOAT           reduce using rule 41 (comparacion -> AND .)
    BOOL            reduce using rule 41 (comparacion -> AND .)
    STRING          reduce using rule 41 (comparacion -> AND .)


state 87

    (42) comparacion -> OR .

    LBRACKET        reduce using rule 42 (comparacion -> OR .)
    LPAREN          reduce using rule 42 (comparacion -> OR .)
    RPAREN          reduce using rule 42 (comparacion -> OR .)
    ID              reduce using rule 42 (comparacion -> OR .)
    INT             reduce using rule 42 (comparacion -> OR .)
    FLOAT           reduce using rule 42 (comparacion -> OR .)
    BOOL            reduce using rule 42 (comparacion -> OR .)
    STRING          reduce using rule 42 (comparacion -> OR .)


state 88

    (64) exp -> termino signo . exp
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    termino                        shift and go to state 51
    exp                            shift and go to state 115
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 89

    (65) signo -> PLUS .

    LPAREN          reduce using rule 65 (signo -> PLUS .)
    RPAREN          reduce using rule 65 (signo -> PLUS .)
    ID              reduce using rule 65 (signo -> PLUS .)
    INT             reduce using rule 65 (signo -> PLUS .)
    FLOAT           reduce using rule 65 (signo -> PLUS .)
    BOOL            reduce using rule 65 (signo -> PLUS .)
    STRING          reduce using rule 65 (signo -> PLUS .)


state 90

    (66) signo -> MINUS .

    LPAREN          reduce using rule 66 (signo -> MINUS .)
    RPAREN          reduce using rule 66 (signo -> MINUS .)
    ID              reduce using rule 66 (signo -> MINUS .)
    INT             reduce using rule 66 (signo -> MINUS .)
    FLOAT           reduce using rule 66 (signo -> MINUS .)
    BOOL            reduce using rule 66 (signo -> MINUS .)
    STRING          reduce using rule 66 (signo -> MINUS .)


state 91

    (14) arreglo -> LBRACKET lista . RBRACKET

    RBRACKET        shift and go to state 116


state 92

    (12) lista -> ID .
    (13) lista -> ID . COMA

    RBRACKET        reduce using rule 12 (lista -> ID .)
    COMA            shift and go to state 117


state 93

    (68) termino -> factor operacion . termino
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    factor                         shift and go to state 53
    termino                        shift and go to state 118
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 94

    (69) operacion -> TIMES .

    LPAREN          reduce using rule 69 (operacion -> TIMES .)
    RPAREN          reduce using rule 69 (operacion -> TIMES .)
    ID              reduce using rule 69 (operacion -> TIMES .)
    INT             reduce using rule 69 (operacion -> TIMES .)
    FLOAT           reduce using rule 69 (operacion -> TIMES .)
    BOOL            reduce using rule 69 (operacion -> TIMES .)
    STRING          reduce using rule 69 (operacion -> TIMES .)


state 95

    (70) operacion -> DIVIDE .

    LPAREN          reduce using rule 70 (operacion -> DIVIDE .)
    RPAREN          reduce using rule 70 (operacion -> DIVIDE .)
    ID              reduce using rule 70 (operacion -> DIVIDE .)
    INT             reduce using rule 70 (operacion -> DIVIDE .)
    FLOAT           reduce using rule 70 (operacion -> DIVIDE .)
    BOOL            reduce using rule 70 (operacion -> DIVIDE .)
    STRING          reduce using rule 70 (operacion -> DIVIDE .)


state 96

    (71) operacion -> DIFF .

    LPAREN          reduce using rule 71 (operacion -> DIFF .)
    RPAREN          reduce using rule 71 (operacion -> DIFF .)
    ID              reduce using rule 71 (operacion -> DIFF .)
    INT             reduce using rule 71 (operacion -> DIFF .)
    FLOAT           reduce using rule 71 (operacion -> DIFF .)
    BOOL            reduce using rule 71 (operacion -> DIFF .)
    STRING          reduce using rule 71 (operacion -> DIFF .)


state 97

    (72) operacion -> EXP .

    LPAREN          reduce using rule 72 (operacion -> EXP .)
    RPAREN          reduce using rule 72 (operacion -> EXP .)
    ID              reduce using rule 72 (operacion -> EXP .)
    INT             reduce using rule 72 (operacion -> EXP .)
    FLOAT           reduce using rule 72 (operacion -> EXP .)
    BOOL            reduce using rule 72 (operacion -> EXP .)
    STRING          reduce using rule 72 (operacion -> EXP .)


state 98

    (73) factor -> paren expresion . paren
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN

    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57

    paren                          shift and go to state 119

state 99

    (6) var -> vardef COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 120


state 100

    (8) tipo -> INT .

    SEMICOLON       reduce using rule 8 (tipo -> INT .)
    LCURLY          reduce using rule 8 (tipo -> INT .)


state 101

    (9) tipo -> FLOAT .

    SEMICOLON       reduce using rule 9 (tipo -> FLOAT .)
    LCURLY          reduce using rule 9 (tipo -> FLOAT .)


state 102

    (10) tipo -> BOOL .

    SEMICOLON       reduce using rule 10 (tipo -> BOOL .)
    LCURLY          reduce using rule 10 (tipo -> BOOL .)


state 103

    (11) tipo -> STRING .

    SEMICOLON       reduce using rule 11 (tipo -> STRING .)
    LCURLY          reduce using rule 11 (tipo -> STRING .)


state 104

    (49) condicion -> IF LPAREN expresion endCondition . bloque condicionelse
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 121

state 105

    (50) endCondition -> RPAREN .

    LCURLY          reduce using rule 50 (endCondition -> RPAREN .)
    ID              reduce using rule 50 (endCondition -> RPAREN .)


state 106

    (51) endCondition -> SEMICOLON .

    LCURLY          reduce using rule 51 (endCondition -> SEMICOLON .)
    ID              reduce using rule 51 (endCondition -> SEMICOLON .)


state 107

    (45) whileLoop -> WHILE startCondition expresion endCondition . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 122

state 108

    (43) doWhile -> do bloque WHILE LPAREN . expresion RPAREN
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    expresion                      shift and go to state 123
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 109

    (48) forLoop -> FOR LPAREN argumentos startCondition . expresion endCondition asignacion RPAREN bloque
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65
    STRING          shift and go to state 66

    expresion                      shift and go to state 124
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 110

    (62) args -> args COMA . args
    (61) args -> . asignacion
    (62) args -> . args COMA args
    (27) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 21

    args                           shift and go to state 125
    asignacion                     shift and go to state 73

state 111

    (28) escritura -> PRINT LPAREN escrito RPAREN .

    SEMICOLON       reduce using rule 28 (escritura -> PRINT LPAREN escrito RPAREN .)


state 112

    (30) escrito -> impr COMA . impr
    (31) impr -> . STRING
    (32) impr -> . expresion
    (33) expresion -> . exp
    (34) expresion -> . condition
    (35) expresion -> . arreglo
    (63) exp -> . termino
    (64) exp -> . termino signo exp
    (36) condition -> . exp comparacion expresion
    (14) arreglo -> . LBRACKET lista RBRACKET
    (67) termino -> . factor
    (68) termino -> . factor operacion termino
    (73) factor -> . paren expresion paren
    (74) factor -> . varcte
    (75) paren -> . LPAREN
    (76) paren -> . RPAREN
    (78) varcte -> . ID
    (79) varcte -> . int
    (80) varcte -> . float
    (81) varcte -> . bool
    (82) varcte -> . string
    (83) int -> . INT
    (84) float -> . FLOAT
    (85) bool -> . BOOL
    (86) string -> . STRING

    STRING          shift and go to state 78
    LBRACKET        shift and go to state 52
    LPAREN          shift and go to state 56
    RPAREN          shift and go to state 57
    ID              shift and go to state 58
    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    BOOL            shift and go to state 65

    impr                           shift and go to state 126
    expresion                      shift and go to state 79
    exp                            shift and go to state 48
    condition                      shift and go to state 49
    arreglo                        shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 53
    paren                          shift and go to state 54
    varcte                         shift and go to state 55
    int                            shift and go to state 59
    float                          shift and go to state 60
    bool                           shift and go to state 61
    string                         shift and go to state 62

state 113

    (55) funcion -> FUNCTION funcdef LPAREN declaracion . RPAREN COLON tiposreturn bloque

    RPAREN          shift and go to state 127


state 114

    (36) condition -> exp comparacion expresion .

    SEMICOLON       reduce using rule 36 (condition -> exp comparacion expresion .)
    COMA            reduce using rule 36 (condition -> exp comparacion expresion .)
    LPAREN          reduce using rule 36 (condition -> exp comparacion expresion .)
    RPAREN          reduce using rule 36 (condition -> exp comparacion expresion .)


state 115

    (64) exp -> termino signo exp .

    LESSTHAN        reduce using rule 64 (exp -> termino signo exp .)
    MORETHAN        reduce using rule 64 (exp -> termino signo exp .)
    ISEQUAL         reduce using rule 64 (exp -> termino signo exp .)
    NOTEQUAL        reduce using rule 64 (exp -> termino signo exp .)
    AND             reduce using rule 64 (exp -> termino signo exp .)
    OR              reduce using rule 64 (exp -> termino signo exp .)
    SEMICOLON       reduce using rule 64 (exp -> termino signo exp .)
    COMA            reduce using rule 64 (exp -> termino signo exp .)
    LPAREN          reduce using rule 64 (exp -> termino signo exp .)
    RPAREN          reduce using rule 64 (exp -> termino signo exp .)


state 116

    (14) arreglo -> LBRACKET lista RBRACKET .

    SEMICOLON       reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)
    COMA            reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)
    LPAREN          reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)
    RPAREN          reduce using rule 14 (arreglo -> LBRACKET lista RBRACKET .)


state 117

    (13) lista -> ID COMA .

    RBRACKET        reduce using rule 13 (lista -> ID COMA .)


state 118

    (68) termino -> factor operacion termino .

    PLUS            reduce using rule 68 (termino -> factor operacion termino .)
    MINUS           reduce using rule 68 (termino -> factor operacion termino .)
    LESSTHAN        reduce using rule 68 (termino -> factor operacion termino .)
    MORETHAN        reduce using rule 68 (termino -> factor operacion termino .)
    ISEQUAL         reduce using rule 68 (termino -> factor operacion termino .)
    NOTEQUAL        reduce using rule 68 (termino -> factor operacion termino .)
    AND             reduce using rule 68 (termino -> factor operacion termino .)
    OR              reduce using rule 68 (termino -> factor operacion termino .)
    SEMICOLON       reduce using rule 68 (termino -> factor operacion termino .)
    COMA            reduce using rule 68 (termino -> factor operacion termino .)
    LPAREN          reduce using rule 68 (termino -> factor operacion termino .)
    RPAREN          reduce using rule 68 (termino -> factor operacion termino .)


state 119

    (73) factor -> paren expresion paren .

    TIMES           reduce using rule 73 (factor -> paren expresion paren .)
    DIVIDE          reduce using rule 73 (factor -> paren expresion paren .)
    DIFF            reduce using rule 73 (factor -> paren expresion paren .)
    EXP             reduce using rule 73 (factor -> paren expresion paren .)
    PLUS            reduce using rule 73 (factor -> paren expresion paren .)
    MINUS           reduce using rule 73 (factor -> paren expresion paren .)
    LESSTHAN        reduce using rule 73 (factor -> paren expresion paren .)
    MORETHAN        reduce using rule 73 (factor -> paren expresion paren .)
    ISEQUAL         reduce using rule 73 (factor -> paren expresion paren .)
    NOTEQUAL        reduce using rule 73 (factor -> paren expresion paren .)
    AND             reduce using rule 73 (factor -> paren expresion paren .)
    OR              reduce using rule 73 (factor -> paren expresion paren .)
    SEMICOLON       reduce using rule 73 (factor -> paren expresion paren .)
    COMA            reduce using rule 73 (factor -> paren expresion paren .)
    LPAREN          reduce using rule 73 (factor -> paren expresion paren .)
    RPAREN          reduce using rule 73 (factor -> paren expresion paren .)


state 120

    (6) var -> vardef COLON tipo SEMICOLON .

    VAR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    ID              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    IF              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    WHILE           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FOR             reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    PRINT           reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RETURN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    DO              reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)
    RPAREN          reduce using rule 6 (var -> vardef COLON tipo SEMICOLON .)


state 121

    (49) condicion -> IF LPAREN expresion endCondition bloque . condicionelse
    (52) condicionelse -> . else bloque
    (53) condicionelse -> . epsilon
    (54) else -> . ELSE
    (77) epsilon -> .

    ELSE            shift and go to state 131
    SEMICOLON       reduce using rule 77 (epsilon -> .)

    condicionelse                  shift and go to state 128
    else                           shift and go to state 129
    epsilon                        shift and go to state 130

state 122

    (45) whileLoop -> WHILE startCondition expresion endCondition bloque .

    SEMICOLON       reduce using rule 45 (whileLoop -> WHILE startCondition expresion endCondition bloque .)


state 123

    (43) doWhile -> do bloque WHILE LPAREN expresion . RPAREN

    RPAREN          shift and go to state 132


state 124

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion . endCondition asignacion RPAREN bloque
    (50) endCondition -> . RPAREN
    (51) endCondition -> . SEMICOLON

    RPAREN          shift and go to state 105
    SEMICOLON       shift and go to state 106

    endCondition                   shift and go to state 133

state 125

    (62) args -> args COMA args .
    (62) args -> args . COMA args

  ! shift/reduce conflict for COMA resolved as shift
    LPAREN          reduce using rule 62 (args -> args COMA args .)
    SEMICOLON       reduce using rule 62 (args -> args COMA args .)
    COMA            shift and go to state 110

  ! COMA            [ reduce using rule 62 (args -> args COMA args .) ]


state 126

    (30) escrito -> impr COMA impr .

    RPAREN          reduce using rule 30 (escrito -> impr COMA impr .)


state 127

    (55) funcion -> FUNCTION funcdef LPAREN declaracion RPAREN . COLON tiposreturn bloque

    COLON           shift and go to state 134


state 128

    (49) condicion -> IF LPAREN expresion endCondition bloque condicionelse .

    SEMICOLON       reduce using rule 49 (condicion -> IF LPAREN expresion endCondition bloque condicionelse .)


state 129

    (52) condicionelse -> else . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 135

state 130

    (53) condicionelse -> epsilon .

    SEMICOLON       reduce using rule 53 (condicionelse -> epsilon .)


state 131

    (54) else -> ELSE .

    LCURLY          reduce using rule 54 (else -> ELSE .)


state 132

    (43) doWhile -> do bloque WHILE LPAREN expresion RPAREN .

    SEMICOLON       reduce using rule 43 (doWhile -> do bloque WHILE LPAREN expresion RPAREN .)


state 133

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition . asignacion RPAREN bloque
    (27) asignacion -> . ID EQUAL expresion

    ID              shift and go to state 21

    asignacion                     shift and go to state 136

state 134

    (55) funcion -> FUNCTION funcdef LPAREN declaracion RPAREN COLON . tiposreturn bloque
    (57) tiposreturn -> . tipo
    (58) tiposreturn -> . VOID
    (8) tipo -> . INT
    (9) tipo -> . FLOAT
    (10) tipo -> . BOOL
    (11) tipo -> . STRING

    VOID            shift and go to state 139
    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    BOOL            shift and go to state 102
    STRING          shift and go to state 103

    tiposreturn                    shift and go to state 137
    tipo                           shift and go to state 138

state 135

    (52) condicionelse -> else bloque .

    SEMICOLON       reduce using rule 52 (condicionelse -> else bloque .)


state 136

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion . RPAREN bloque

    RPAREN          shift and go to state 140


state 137

    (55) funcion -> FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 141

state 138

    (57) tiposreturn -> tipo .

    LCURLY          reduce using rule 57 (tiposreturn -> tipo .)


state 139

    (58) tiposreturn -> VOID .

    LCURLY          reduce using rule 58 (tiposreturn -> VOID .)


state 140

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN . bloque
    (15) bloque -> . LCURLY declaracion estatutoExp RCURLY

    LCURLY          shift and go to state 6

    bloque                         shift and go to state 142

state 141

    (55) funcion -> FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque .

    SEMICOLON       reduce using rule 55 (funcion -> FUNCTION funcdef LPAREN declaracion RPAREN COLON tiposreturn bloque .)


state 142

    (48) forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .

    SEMICOLON       reduce using rule 48 (forLoop -> FOR LPAREN argumentos startCondition expresion endCondition asignacion RPAREN bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 34 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 34 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 34 resolved as shift
WARNING: shift/reduce conflict for DO in state 34 resolved as shift
WARNING: shift/reduce conflict for COMA in state 125 resolved as shift
WARNING: reduce/reduce conflict in state 78 resolved using rule (impr -> STRING)
WARNING: rejected rule (string -> STRING) in state 78
